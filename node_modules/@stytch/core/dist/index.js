'use strict';

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == _typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a '" + n + "' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
var ui = require('./ui-29f384b0.js');
var TEST_API_URL = 'https://test.stytch.com';
var LIVE_API_URL = 'https://api.stytch.com';
var CLIENTSIDE_SERVICES_IFRAME_URL = 'https://js.stytch.com/clientside-services/index.html';
var STYTCH_DFP_BACKEND_URL = "https://telemetry.stytch.com";
var STYTCH_DFP_CDN_URL = "https://elements.stytch.com";
var STYTCH_SESSION_COOKIE = 'stytch_session';
var STYTCH_SESSION_JWT_COOKIE = 'stytch_session_jwt';
var POWERED_BY_STYTCH_IMG_URL = 'https://public-assets.stytch.com/et_powered_by_stytch_logo.png';
var GOOGLE_ONE_TAP_HOST = 'https://accounts.google.com/gsi';
var GOOGLE_ONE_TAP_SCRIPT_URL = "".concat(GOOGLE_ONE_TAP_HOST, "/client");
var DEFAULT_SESSION_DURATION_MINUTES = 30;
var DEFAULT_OTP_EXPIRATION_MINUTES = 5;
var MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING = "It looks like you're creating multiple copies of the Stytch client." + ' This behavior is unsupported, and unintended side effects may occur. ' + "Make sure you are creating the Stytch client at the global level, and not inside a component's render function.";

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
exports.RetriableErrorType = void 0;
(function (RetriableErrorType) {
  RetriableErrorType["RequiredCatcha"] = "Catcha Required";
})(exports.RetriableErrorType || (exports.RetriableErrorType = {}));
var RetriableError = /*#__PURE__*/function (_Error) {
  function RetriableError(type) {
    var _this;
    _classCallCheck(this, RetriableError);
    _this = _callSuper(this, RetriableError, [type]);
    _this.type = type;
    return _this;
  }
  _inherits(RetriableError, _Error);
  return _createClass(RetriableError);
}(/*#__PURE__*/_wrapNativeSuper(Error));
function retriableFetchSDK(_ref) {
  var method = _ref.method,
    finalURL = _ref.finalURL,
    basicAuthHeader = _ref.basicAuthHeader,
    xSDKClientHeader = _ref.xSDKClientHeader,
    xSDKParentHostHeader = _ref.xSDKParentHostHeader,
    body = _ref.body,
    retryCallback = _ref.retryCallback;
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var req;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          req = {
            method: method,
            finalURL: finalURL,
            basicAuthHeader: basicAuthHeader,
            xSDKClientHeader: xSDKClientHeader,
            xSDKParentHostHeader: xSDKParentHostHeader,
            body: body
          };
          _context.prev = 1;
          _context.next = 4;
          return baseFetchSDK(req);
        case 4:
          return _context.abrupt("return", _context.sent);
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          if (!(_context.t0 instanceof RetriableError)) {
            _context.next = 16;
            break;
          }
          _context.next = 12;
          return retryCallback(_context.t0, req);
        case 12:
          req = _context.sent;
          _context.next = 15;
          return baseFetchSDK(req);
        case 15:
          return _context.abrupt("return", _context.sent);
        case 16:
          throw _context.t0;
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 7]]);
  }));
}
function baseFetchSDK(_ref2) {
  var method = _ref2.method,
    finalURL = _ref2.finalURL,
    basicAuthHeader = _ref2.basicAuthHeader,
    xSDKClientHeader = _ref2.xSDKClientHeader,
    xSDKParentHostHeader = _ref2.xSDKParentHostHeader,
    body = _ref2.body;
  var _a;
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var headers, fetchOpts, resp, _respData, respError, respData;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          headers = {
            Authorization: basicAuthHeader,
            'Content-Type': 'application/json',
            'X-SDK-Client': xSDKClientHeader
          };
          if (xSDKParentHostHeader) {
            headers['X-SDK-Parent-Host'] = xSDKParentHostHeader;
          }
          fetchOpts = {
            method: method,
            headers: headers,
            body: body && JSON.stringify(body),
            credentials: 'include'
          };
          _context2.prev = 3;
          _context2.next = 6;
          return fetch(finalURL, fetchOpts);
        case 6:
          resp = _context2.sent;
          _context2.next = 14;
          break;
        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](3);
          if (!(_context2.t0.message === 'Failed to fetch')) {
            _context2.next = 13;
            break;
          }
          throw new ui.StytchAPIUnreachableError('Unable to contact our servers.');
        case 13:
          throw _context2.t0;
        case 14:
          if (!(resp.status <= 299)) {
            _context2.next = 25;
            break;
          }
          _context2.prev = 15;
          _context2.next = 18;
          return resp.json();
        case 18:
          _respData = _context2.sent;
          return _context2.abrupt("return", _respData.data);
        case 22:
          _context2.prev = 22;
          _context2.t1 = _context2["catch"](15);
          throw new ui.StytchAPIUnreachableError('Invalid JSON response from our servers.');
        case 25:
          if (!(resp.status !== 200 && ((_a = resp.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')))) {
            _context2.next = 38;
            break;
          }
          _context2.prev = 26;
          _context2.next = 29;
          return resp.json();
        case 29:
          respError = _context2.sent;
          _context2.next = 35;
          break;
        case 32:
          _context2.prev = 32;
          _context2.t2 = _context2["catch"](26);
          throw new ui.StytchAPIUnreachableError('Invalid or no response from server');
        case 35:
          if (!('body' in respError || 'params' in respError || 'query' in respError)) {
            _context2.next = 37;
            break;
          }
          throw new ui.StytchAPISchemaError(respError);
        case 37:
          throw new ui.StytchAPIError(respError);
        case 38:
          _context2.prev = 38;
          _context2.next = 41;
          return resp.text();
        case 41:
          respData = _context2.sent;
          _context2.next = 47;
          break;
        case 44:
          _context2.prev = 44;
          _context2.t3 = _context2["catch"](38);
          throw new ui.StytchAPIUnreachableError('Invalid response from our servers.');
        case 47:
          if (!respData.includes('Captcha required')) {
            _context2.next = 49;
            break;
          }
          throw new RetriableError(exports.RetriableErrorType.RequiredCatcha);
        case 49:
          throw new ui.StytchAPIUnreachableError('Invalid response from our servers.');
        case 50:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[3, 9], [15, 22], [26, 32], [38, 44]]);
  }));
}
function baseSubmitFormSDK(_ref3) {
  var method = _ref3.method,
    finalURL = _ref3.finalURL,
    basicAuthHeader = _ref3.basicAuthHeader,
    xSDKClientHeader = _ref3.xSDKClientHeader,
    xSDKParentHostHeader = _ref3.xSDKParentHostHeader,
    body = _ref3.body;
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var bodyParams, finalBody, children, form;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          bodyParams = body || {};
          finalBody = Object.assign(Object.assign({}, bodyParams), {
            __Authorization: basicAuthHeader,
            '__X-SDK-Client': xSDKClientHeader
          });
          if (xSDKParentHostHeader) {
            finalBody['__X-SDK-Parent-Host'] = xSDKParentHostHeader;
          }
          children = Object.entries(finalBody).map(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
              key = _ref5[0],
              value = _ref5[1];
            var input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = value;
            return input;
          });
          form = document.createElement('form');
          form.method = method;
          form.action = finalURL;
          form.append.apply(form, _toConsumableArray(children));
          document.body.appendChild(form);
          form.submit();
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate$1(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields
  if (!validate$1(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify(rnds);
}
var ModulePromiseCache = {};
function loadESModule(url, moduleFromGlobalScope) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(ModulePromiseCache[url] !== undefined)) {
            _context4.next = 2;
            break;
          }
          return _context4.abrupt("return", ModulePromiseCache[url]);
        case 2:
          ModulePromiseCache[url] = loadESModuleFromNetwork(url, moduleFromGlobalScope);
          return _context4.abrupt("return", ModulePromiseCache[url]);
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
}
function loadESModuleFromNetwork(url, moduleFromGlobalScope) {
  return new Promise(function (resolve, reject) {
    var maybeScript = findScript(url);
    if (maybeScript && maybeScript.dataset.loaded === 'true') {
      try {
        resolve(moduleFromGlobalScope());
      } catch (err) {
        return reject(new Error("".concat(url, " already loaded, but module was not found in global scope: ").concat(err)));
      }
    }
    var script = createScript(url);
    script.addEventListener('load', function () {
      script.dataset.loaded = 'true';
      try {
        resolve(moduleFromGlobalScope());
      } catch (err) {
        reject(new Error("".concat(url, " was loaded, but module was not found in global scope: ").concat(err)));
      }
    });
    script.addEventListener('error', function (err) {
      reject(new Error("".concat(url, " could not be loaded: ").concat(err)));
    });
  });
}
var findScriptsInDom = function findScriptsInDom(url) {
  return document.querySelectorAll("script[src=\"".concat(url, "\"]"));
};
function findScript(url) {
  var scripts = findScriptsInDom(url);
  if (scripts[0]) {
    return scripts[0];
  }
}
function createScript(url) {
  var script = document.createElement('script');
  script.setAttribute('src', url);
  script.setAttribute('async', 'true');
  script.setAttribute('defer', 'true');
  document.head.appendChild(script);
  return script;
}
var getHttpsUrl = function getHttpsUrl(urlOrDomain) {
  // If it's already a valid URL, extract the domain
  try {
    var url = new URL(urlOrDomain);
    return "https://".concat(url.hostname);
  } catch (_a) {
    // invalid URLs are OK
  }
  // Prepend a scheme and verify it's a valid URL
  try {
    var _url = new URL("https://".concat(urlOrDomain));
    return "https://".concat(_url.hostname);
  } catch (_b) {}
  // Input was neither a valid URL nor a valid domain
  return undefined;
};

/**
 * A set of tokens to stylize the console.log output
 * First token is the raw text. %c is a placeholder for string formatting
 * Second token starts our stylizing - adding custom color and background
 * Third token resets stylizing to baseline before showing the rest of the content.
 */
var STYTCH_BADGE = process.env.NODE_ENV === 'production' ? ['[Stytch]'] : ['%c[Stytch]%c', 'background: #19303d; color: #13E5C0; padding: 2px;border-radius: 4px', ''];
// Turn this to true to enable debug logs
// TODO: Make this an env var
var DEBUG = false;
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * An ultralightweight wrapper around console.log.
 * In the future, the logger might be passed in from the customer,
 * or the level might be configurable.
 */
var logger = {
  debug: function debug() {
    return DEBUG;
  },
  log: function log() {
    var _console;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_console = console).log.apply(_console, STYTCH_BADGE.concat(args));
  },
  warn: function warn() {
    var _console2;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return (_console2 = console).warn.apply(_console2, STYTCH_BADGE.concat(args));
  },
  error: function error() {
    var _console3;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return (_console3 = console).error.apply(_console3, STYTCH_BADGE.concat(args));
  }
};
/* eslint-enable @typescript-eslint/no-explicit-any */
/* eslint-enable no-console */

var getLiveApiURL = function getLiveApiURL(opts) {
  var _a, _b, _c;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.apiDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.apiDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom API domain `".concat(opts.endpointOptions.apiDomain, "`. apiDomain should be a valid domain."));
    }
  }
  return (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.liveAPIURL) !== null && _c !== void 0 ? _c : LIVE_API_URL;
};
var getTestApiURL = function getTestApiURL(opts) {
  var _a, _b, _c;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.testApiDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.testApiDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom API domain `".concat(opts.endpointOptions.testApiDomain, "`. testApiDomain should be a valid domain."));
    }
  }
  return (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.testAPIURL) !== null && _c !== void 0 ? _c : TEST_API_URL;
};
var trailer = "\nYou can find your public token at https://stytch.com/dashboard/api-keys.";
var checkPublicToken = function checkPublicToken(publicToken) {
  if (typeof publicToken !== 'string') {
    logger.warn("Public token is malformed. Expected a string, got ".concat(_typeof(publicToken), ".").concat(trailer));
  } else if (publicToken === '') {
    logger.warn("Public token is malformed. Expected \"public-token-...\", got an empty string.".concat(trailer));
  } else if (!publicToken.startsWith('public-token-')) {
    logger.warn("Public token is malformed. Expected \"public-token-...\", got ".concat(publicToken, ".").concat(trailer));
  }
};
var checkNotSSR = function checkNotSSR(clientName) {
  var factoryFunctionName = clientName === 'StytchUIClient' ? 'createStytchUIClient' : 'createStytchHeadlessClient';
  if (typeof window === 'undefined') {
    throw new Error("`new ".concat(clientName, "()` is not supported in server environments. If using @stytch/react or @stytch/nextjs, use `").concat(factoryFunctionName, "()` instead."));
  }
};
var checkB2BNotSSR = function checkB2BNotSSR(clientName) {
  var factoryFunctionName = clientName === 'StytchB2BUIClient' ? 'createStytchB2BUIClient' : 'createStytchB2BHeadlessClient';
  if (typeof window === 'undefined') {
    throw new Error("`new ".concat(clientName, "()` is not supported in server environments. If using @stytch/react or @stytch/nextjs, use `").concat(factoryFunctionName, "()` instead."));
  }
};

// List of Alpha-2 country codes to display in the drop down for phone number entry in our pre-built UI components.
//
// This list contains all allowed country codes, in alphabetical order, with the exception of the US, which is placed first as it is
// the default and our most common user country.
//
// This list was built by pulling all countries from https://www.iban.com/country-codes and then removing countries that are not on our
// unsupported countries (https://app.launchdarkly.com/default/production/features/default-banned-countries-for-phone-validation/targeting).
//
// Other useful links are the IBAN Alpha-2 code list (https://www.iban.com/country-codes) and Twilio's per-country notes
// (https://www.twilio.com/en-us/guidelines/ag/sms). Just substitute the country code in that URL!
//
// This list is served to any customer, regardless of whether they are on the default country allowlist (only US and Canada) or they allow
// all countries. This means that users may be able to choose a country that is not allowed for a customer and receive an error. This should
// be improved in the future: ODEVX-34.
var COUNTRIES_LIST = {
  US: '1',
  // United States of America
  AX: '358',
  // Aland Islands
  AS: '1684',
  // American Samoa
  AG: '1268',
  // Antigua and Barbuda
  AI: '1264',
  // Anguilla
  AR: '54',
  // Argentina
  AT: '43',
  // Austria
  AU: '61',
  // Australia
  BE: '32',
  // Belgium
  BJ: '229',
  // Benin
  BO: '591',
  // Bolivia
  BR: '55',
  // Brazil
  IO: '246',
  // British Indian Ocean Territory (the)
  BN: '673',
  // Brunei Darussalam
  BG: '359',
  // Bulgaria
  BF: '226',
  // Burkina Faso
  CM: '237',
  // Cameroon
  CA: '1',
  // Canada
  BQ: '599',
  // Caribbean Netherlands
  CF: '236',
  // Central African Republic (the)
  CL: '56',
  // Chile
  CX: '61',
  // Christmas Island
  CC: '61',
  // Cocos (Keeling) Islands (the)
  CO: '57',
  // Colombia
  CD: '243',
  // Congo (the Democratic Republic of the)
  CK: '682',
  // Cook Islands (the)
  CR: '506',
  // Costa Rica
  HR: '385',
  // Croatia
  CZ: '420',
  // Czechia
  DK: '45',
  // Denmark
  DO: '1829',
  // Dominican Republic (the)
  EC: '593',
  // Ecuador
  SV: '503',
  // El Salvador
  EE: '372',
  // Estonia
  SZ: '268',
  // Eswatini
  FK: '500',
  // Falkland Islands (the) [Malvinas]
  FI: '358',
  // Finland
  FR: '33',
  // France
  GF: '594',
  // French Guiana
  DE: '49',
  // Germany
  GH: '233',
  // Ghana
  GR: '30',
  // Greece
  GD: '1473',
  // Grenada
  GT: '502',
  // Guatemala
  GG: '44',
  // Guernsey
  GW: '245',
  // Guinea-Bissau
  GY: '592',
  // Guyana
  HU: '36',
  // Hungary
  IS: '354',
  // Iceland
  IN: '91',
  // India
  IE: '353',
  // Ireland
  IM: '44',
  // Isle of Man
  IT: '39',
  // Italy
  JM: '1876',
  // Jamaica
  JP: '81',
  // Japan
  KZ: '7',
  // Kazakhstan
  KE: '254',
  // Kenya
  KI: '686',
  // Kiribati
  KR: '82',
  // Korea (the Republic of)
  LV: '371',
  // Latvia
  LT: '370',
  // Lithuania
  LU: '352',
  // Luxembourg
  MO: '853',
  // Macao
  MT: '356',
  // Malta
  MH: '692',
  // Marshall Islands (the)
  MR: '222',
  // Mauritania
  MU: '230',
  // Mauritius
  YT: '262',
  // Mayotte
  MX: '52',
  // Mexico
  MC: '377',
  // Monaco
  ME: '382',
  // Montenegro
  NR: '674',
  // Nauru
  NL: '31',
  // Netherlands (the)
  NZ: '64',
  // New Zealand
  NI: '505',
  // Nicaragua
  NF: '672',
  // Norfolk Island
  NO: '47',
  // Norway
  PA: '507',
  // Panama
  PY: '595',
  // Paraguay
  PE: '51',
  // Peru
  PN: '870',
  // Pitcairn
  PL: '48',
  // Poland
  PT: '351',
  // Portugal
  PR: '1',
  // Puerto Rico
  RO: '40',
  // Romania
  BL: '590',
  // Saint Barthélemy
  SH: '290',
  // Saint Helena, Ascension and Tristan da Cunha
  KN: '1869',
  // Saint Kitts and Nevis
  LC: '1758',
  // Saint Lucia
  MF: '590',
  // Saint Martin (French part)
  PM: '508',
  // Saint Pierre and Miquelon
  SM: '378',
  // San Marino
  ST: '239',
  // Sao Tome and Principe
  SC: '248',
  // Seychelles
  SX: '599',
  // Sint Maarten (Dutch part)
  SK: '421',
  // Slovakia
  SI: '386',
  // Slovenia
  ZA: '27',
  // South Africa
  SS: '211',
  // South Sudan
  ES: '34',
  // Spain
  SR: '597',
  // Suriname
  SJ: '47',
  // Svalbard and Jan Mayen
  SE: '46',
  // Sweden
  CH: '41',
  // Switzerland
  TW: '886',
  // Taiwan
  TZ: '255',
  // Tanzania, United Republic of
  TK: '690',
  // Tokelau
  TO: '676',
  // Tonga
  TT: '1868',
  // Trinidad and Tobago
  TR: '90',
  // Turkey
  UA: '380',
  // Ukraine
  GB: '44',
  // United Kingdom of Great Britain and Northern Ireland (the)
  UM: '1',
  // United States Minor Outlying Islands (the)
  UY: '598',
  // Uruguay
  VA: '379',
  // Vatican
  EH: '212' // Western Sahara
};
var getDFPBackendURL = function getDFPBackendURL(opts) {
  var _a, _b, _c;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.dfppaDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.dfppaDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom DFPPA domain `".concat(opts.endpointOptions.dfppaDomain, "`. dfppaDomain should be a valid domain."));
    }
  }
  return (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.dfpBackendURL) !== null && _c !== void 0 ? _c : STYTCH_DFP_BACKEND_URL;
};
var getDFPCdnURL = function getDFPCdnURL(opts) {
  var _a;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.dfpCdnDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.dfpCdnDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom DFP CDN domain `".concat(opts.endpointOptions.dfpCdnDomain, "`. dfpCdnDomain should be a valid domain."));
    }
  }
  return STYTCH_DFP_CDN_URL;
};
var isTestPublicToken = function isTestPublicToken(token) {
  return token.includes('public-token-test');
};
/**
 * Normalizes an es5 promise with a .then(onSuccess, onFailure) signature to
 * the es6 .then().catch() signature
 */
var normalizePromiseLike = function normalizePromiseLike(prom) {
  return new Promise(function (resolve, reject) {
    prom.then(resolve, reject);
  });
};
var createEventId = function createEventId() {
  return "event-id-".concat(v4());
};
var createAppSessionId = function createAppSessionId() {
  return "app-session-id-".concat(v4());
};
var createPersistentId = function createPersistentId() {
  return "persistent-id-".concat(v4());
};
var validate = function validate(methodName) {
  var validator = {
    isObject: function isObject(fieldName, value) {
      var isObject = _typeof(value) === 'object' && !Array.isArray(value) && value !== null;
      if (!isObject) {
        throw new ui.StytchSDKUsageError(methodName, fieldName + ' must be an object.');
      }
      return validator;
    },
    isOptionalObject: function isOptionalObject(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isObject(fieldName, value);
    },
    isString: function isString(fieldName, value) {
      if (typeof value !== 'string') {
        throw new ui.StytchSDKUsageError(methodName, fieldName + ' must be a string.');
      }
      return validator;
    },
    isOptionalString: function isOptionalString(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isString(fieldName, value);
    },
    isStringArray: function isStringArray(fieldName, value) {
      if (!Array.isArray(value)) {
        throw new ui.StytchSDKUsageError(methodName, fieldName + ' must be an array of strings.');
      }
      var _iterator = _createForOfIteratorHelper(value),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var str = _step.value;
          if (typeof str !== 'string') {
            throw new ui.StytchSDKUsageError(methodName, fieldName + ' must be an array of strings.');
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return validator;
    },
    isOptionalStringArray: function isOptionalStringArray(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isStringArray(fieldName, value);
    },
    isNumber: function isNumber(fieldName, value) {
      if (typeof value !== 'number') {
        throw new ui.StytchSDKUsageError(methodName, fieldName + ' must be a number.');
      }
      return validator;
    },
    isOptionalNumber: function isOptionalNumber(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isNumber(fieldName, value);
    },
    isBoolean: function isBoolean(fieldName, value) {
      if (typeof value !== 'boolean') {
        throw new ui.StytchSDKUsageError(methodName, fieldName + ' must be a boolean.');
      }
      return validator;
    },
    isOptionalBoolean: function isOptionalBoolean(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isBoolean(fieldName, value);
    }
  };
  return validator;
};
var isPhoneMethod = function isPhoneMethod(selectionMethod) {
  return selectionMethod === ui.OTPMethods.SMS || selectionMethod === ui.OTPMethods.WhatsApp;
};
var isEmailMethod = function isEmailMethod(selectionMethod) {
  return selectionMethod === ui.OTPMethods.Email;
};
var removeResponseCommon = function removeResponseCommon(_a) {
  var rest = __rest(_a, ["request_id", "status_code"]);
  return rest;
};
var omitUser = function omitUser(resp) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  var rest = __rest(resp, ["__user"]);
  return rest;
};
var loadTelemetryJS = function loadTelemetryJS(domain) {
  return loadESModule("".concat(domain, "/telemetry.js"), function () {
    return window.GetTelemetryID;
  });
};
var DFPProtectedAuthProvider = /*#__PURE__*/_createClass(function DFPProtectedAuthProvider(publicToken, dfpBackendURL, dfpCdnDomain, bootstrapPromise) {
  var _this2 = this;
  var executeRecaptcha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {
    return Promise.resolve(undefined);
  };
  _classCallCheck(this, DFPProtectedAuthProvider);
  this.bootstrapPromise = bootstrapPromise;
  this.isEnabled = function () {
    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", this.state.then(function (state) {
              return state.enabled;
            }));
          case 1:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
  };
  this.getTelemetryID = function () {
    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var _yield$this$state, publicToken, enabled, dfpBackendURL;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return this.state;
          case 2:
            _yield$this$state = _context6.sent;
            publicToken = _yield$this$state.publicToken;
            enabled = _yield$this$state.enabled;
            dfpBackendURL = _yield$this$state.dfpBackendURL;
            if (enabled) {
              _context6.next = 8;
              break;
            }
            return _context6.abrupt("return", undefined);
          case 8:
            _context6.next = 10;
            return window.GetTelemetryID(publicToken, "".concat(dfpBackendURL, "/submit"));
          case 10:
            return _context6.abrupt("return", _context6.sent);
          case 11:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
  };
  this.getDFPTelemetryIDAndCaptcha = function () {
    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var _yield$this$state2, enabled, executeRecaptcha, mode, dfp_telemetry_id, captcha_token;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return this.state;
          case 2:
            _yield$this$state2 = _context7.sent;
            enabled = _yield$this$state2.enabled;
            executeRecaptcha = _yield$this$state2.executeRecaptcha;
            mode = _yield$this$state2.mode;
            dfp_telemetry_id = undefined;
            captcha_token = undefined;
            if (enabled) {
              _context7.next = 12;
              break;
            }
            _context7.next = 11;
            return executeRecaptcha();
          case 11:
            captcha_token = _context7.sent;
          case 12:
            if (!(mode === 'DECISIONING')) {
              _context7.next = 18;
              break;
            }
            _context7.next = 15;
            return this.getTelemetryID();
          case 15:
            dfp_telemetry_id = _context7.sent;
            _context7.next = 25;
            break;
          case 18:
            if (!(mode === 'OBSERVATION')) {
              _context7.next = 25;
              break;
            }
            _context7.next = 21;
            return this.getTelemetryID();
          case 21:
            dfp_telemetry_id = _context7.sent;
            _context7.next = 24;
            return executeRecaptcha();
          case 24:
            captcha_token = _context7.sent;
          case 25:
            return _context7.abrupt("return", {
              dfp_telemetry_id: dfp_telemetry_id,
              captcha_token: captcha_token
            });
          case 26:
          case "end":
            return _context7.stop();
        }
      }, _callee7, this);
    }));
  };
  this.retryWithCaptchaAndDFP = function (e, req) {
    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var _yield$this$state3, enabled, executeRecaptcha;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return this.state;
          case 2:
            _yield$this$state3 = _context8.sent;
            enabled = _yield$this$state3.enabled;
            executeRecaptcha = _yield$this$state3.executeRecaptcha;
            if (!(e.type === exports.RetriableErrorType.RequiredCatcha && enabled)) {
              _context8.next = 14;
              break;
            }
            if (!req.body) {
              _context8.next = 13;
              break;
            }
            _context8.next = 9;
            return this.getTelemetryID();
          case 9:
            req.body.dfp_telemetry_id = _context8.sent;
            _context8.next = 12;
            return executeRecaptcha();
          case 12:
            req.body.captcha_token = _context8.sent;
          case 13:
            return _context8.abrupt("return", req);
          case 14:
            throw new Error('Unable to query captcha and/or dfp telemetry ID');
          case 15:
          case "end":
            return _context8.stop();
        }
      }, _callee8, this);
    }));
  };
  this.state = bootstrapPromise.then(function (bootstrapData) {
    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (bootstrapData.runDFPProtectedAuth) {
              _context9.next = 2;
              break;
            }
            return _context9.abrupt("return", {
              publicToken: publicToken,
              dfpBackendURL: dfpBackendURL,
              enabled: false,
              loaded: false,
              executeRecaptcha: executeRecaptcha
            });
          case 2:
            _context9.next = 4;
            return loadTelemetryJS(dfpCdnDomain);
          case 4:
            return _context9.abrupt("return", {
              publicToken: publicToken,
              dfpBackendURL: dfpBackendURL,
              enabled: true,
              mode: bootstrapData.dfpProtectedAuthMode || 'OBSERVATION',
              loaded: true,
              executeRecaptcha: executeRecaptcha
            });
          case 5:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
  });
});
var DisabledDFPProtectedAuthProvider = function DisabledDFPProtectedAuthProvider() {
  return {
    isEnabled: function isEnabled() {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {
        return _regeneratorRuntime().wrap(function _callee0$(_context0) {
          while (1) switch (_context0.prev = _context0.next) {
            case 0:
              return _context0.abrupt("return", false);
            case 1:
            case "end":
              return _context0.stop();
          }
        }, _callee0);
      }));
    },
    getTelemetryID: function getTelemetryID() {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {
        return _regeneratorRuntime().wrap(function _callee1$(_context1) {
          while (1) switch (_context1.prev = _context1.next) {
            case 0:
              return _context1.abrupt("return", undefined);
            case 1:
            case "end":
              return _context1.stop();
          }
        }, _callee1);
      }));
    },
    getDFPTelemetryIDAndCaptcha: function getDFPTelemetryIDAndCaptcha() {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", {
                dfp_telemetry_id: undefined,
                captcha_token: undefined
              });
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
    },
    retryWithCaptchaAndDFP: function retryWithCaptchaAndDFP() {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              throw new Error('DFP protected auth is disabled');
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
    }
  };
};

/**
 * Some errors are thrown from inside an iframe, but we can't serialize them
 * to the parent in Webkit. This class handles restoring marshalled errors
 * to their original form.
 * It preserves the error instance/class constructor by inspecting err.name
 * and calling `new` on the matching constructor.
 */
var ErrorMarshaller = /*#__PURE__*/function () {
  function ErrorMarshaller() {
    _classCallCheck(this, ErrorMarshaller);
  }
  return _createClass(ErrorMarshaller, null, [{
    key: "inflate",
    value: function inflate(ErrorClass, ErrorData) {
      // !!HACK!!
      // We make the assumption that if the error takes in a required property
      // (StytchAPIError takes in an APIDetials obj...)
      // that we can just pass in the error body itself to satisfy the constructor...
      // And if the types don't work out, Object.assign(...) copies everything over anyway
      // This is a brittle and weak assumption.
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      var err = new ErrorClass(ErrorData);
      Object.assign(err, ErrorData);
      Object.setPrototypeOf(err, ErrorClass.prototype);
      return err;
    }
  }, {
    key: "unmarshall",
    value: function unmarshall(error) {
      if ('name' in error) {
        switch (error.name) {
          case 'SDKAPIUnreachableError':
            return ErrorMarshaller.inflate(ui.SDKAPIUnreachableError, error);
          case 'StytchSDKSchemaError':
            return ErrorMarshaller.inflate(ui.StytchSDKSchemaError, error);
          case 'StytchAPIUnreachableError':
            return ErrorMarshaller.inflate(ui.StytchAPIUnreachableError, error);
          case 'StytchAPISchemaError':
            return ErrorMarshaller.inflate(ui.StytchAPISchemaError, error);
          case 'StytchSDKAPIError':
            return ErrorMarshaller.inflate(ui.StytchSDKAPIError, error);
          case 'StytchAPIError':
            return ErrorMarshaller.inflate(ui.StytchAPIError, error);
          case 'TypeError':
            return ErrorMarshaller.inflate(TypeError, error);
          case 'SyntaxError':
            return ErrorMarshaller.inflate(SyntaxError, error);
          case 'ReferenceError':
            return ErrorMarshaller.inflate(ReferenceError, error);
          case 'RangeError':
            return ErrorMarshaller.inflate(RangeError, error);
          case 'EvalError':
            return ErrorMarshaller.inflate(EvalError, error);
          case 'URIError':
            return ErrorMarshaller.inflate(URIError, error);
        }
      }
      return ErrorMarshaller.inflate(Error, error);
    }
  }]);
}();
var DEFAULT_MAX_BATCH_SIZE = 15;
var DEFAULT_INTERVAL_DURATION_MS = 800;
var EventLogger = /*#__PURE__*/function () {
  function EventLogger(args) {
    _classCallCheck(this, EventLogger);
    this.maxBatchSize = args.maxBatchSize;
    this.logEventURL = args.logEventURL;
    // TODO: If we create more than one of these, we'll want a mechanism to clean up the intervals
    setInterval(this.flush.bind(this), args.intervalDurationMs);
    this.batch = [];
  }
  return _createClass(EventLogger, [{
    key: "logEvent",
    value: function logEvent(telemetry, event) {
      this.batch.push({
        telemetry: telemetry,
        event: event
      });
      if (this.batch.length >= this.maxBatchSize) {
        this.flush();
      }
    }
  }, {
    key: "flush",
    value: function flush() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        var batchToSubmit;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (this.batch.length) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return");
            case 2:
              batchToSubmit = this.batch;
              this.batch = [];
              _context12.prev = 4;
              _context12.next = 7;
              return fetch(this.logEventURL, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(batchToSubmit)
              });
            case 7:
              _context12.next = 11;
              break;
            case 9:
              _context12.prev = 9;
              _context12.t0 = _context12["catch"](4);
            case 11:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this, [[4, 9]]);
      }));
    }
  }]);
}();
exports.EmailSentType = void 0;
(function (EmailSentType) {
  EmailSentType["LoginOrCreateEML"] = "login_or_create_eml";
  EmailSentType["LoginOrCreateOTP"] = "login_or_create_otp";
  EmailSentType["ResetPassword"] = "reset_password";
})(exports.EmailSentType || (exports.EmailSentType = {}));
var HeadlessUserClient = /*#__PURE__*/_createClass(function HeadlessUserClient(_networkClient, _subscriptionService) {
  var _this3 = this;
  _classCallCheck(this, HeadlessUserClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return this._networkClient.fetchSDK({
              url: '/users/me',
              method: 'GET'
            });
          case 2:
            resp = _context13.sent;
            user = removeResponseCommon(resp);
            this._subscriptionService.updateUser(user);
            return _context13.abrupt("return", user);
          case 6:
          case "end":
            return _context13.stop();
        }
      }, _callee13, this);
    }));
  };
  this.getSync = function () {
    return _this3._subscriptionService.getUser();
  };
  this.getInfo = function () {
    return {
      user: _this3.getSync(),
      fromCache: _this3._subscriptionService.getFromCache()
    };
  };
  this.update = function (options) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            validate('stytch.user.update').isOptionalObject('untrusted_metadata', options.untrusted_metadata);
            _context14.next = 3;
            return this._networkClient.fetchSDK({
              url: '/users/me',
              body: options,
              method: 'PUT'
            });
          case 3:
            resp = _context14.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context14.abrupt("return", omitUser(resp));
          case 7:
          case "end":
            return _context14.stop();
        }
      }, _callee14, this);
    }));
  };
  this.deleteEmail = function (emailId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/emails/".concat(emailId),
              method: 'DELETE'
            });
          case 2:
            resp = _context15.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context15.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context15.stop();
        }
      }, _callee15, this);
    }));
  };
  this.deletePhoneNumber = function (phoneId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/phone_numbers/".concat(phoneId),
              method: 'DELETE'
            });
          case 2:
            resp = _context16.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context16.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context16.stop();
        }
      }, _callee16, this);
    }));
  };
  this.deleteTOTP = function (totpId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee17$(_context17) {
        while (1) switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/totps/".concat(totpId),
              method: 'DELETE'
            });
          case 2:
            resp = _context17.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context17.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context17.stop();
        }
      }, _callee17, this);
    }));
  };
  this.deleteCryptoWallet = function (cryptoWalletId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/crypto_wallets/".concat(cryptoWalletId),
              method: 'DELETE'
            });
          case 2:
            resp = _context18.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context18.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context18.stop();
        }
      }, _callee18, this);
    }));
  };
  this.deleteOAuthRegistration = function (oauthUserRegistrationId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee19$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/oauth/".concat(oauthUserRegistrationId),
              method: 'DELETE'
            });
          case 2:
            resp = _context19.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context19.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context19.stop();
        }
      }, _callee19, this);
    }));
  };
  this.deleteWebauthnRegistration = function (webAuthnId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee20$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/webauthn_registrations/".concat(webAuthnId),
              method: 'DELETE'
            });
          case 2:
            resp = _context20.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context20.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context20.stop();
        }
      }, _callee20, this);
    }));
  };
  this.deleteBiometricRegistration = function (biometricRegistrationId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
      var resp, user;
      return _regeneratorRuntime().wrap(function _callee21$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/biometric_registrations/".concat(biometricRegistrationId),
              method: 'DELETE'
            });
          case 2:
            resp = _context21.sent;
            user = removeResponseCommon(resp.__user);
            this._subscriptionService.updateUser(user);
            return _context21.abrupt("return", omitUser(resp));
          case 6:
          case "end":
            return _context21.stop();
        }
      }, _callee21, this);
    }));
  };
  this.onChange = function (callback) {
    var lastVal = _this3._subscriptionService.getUser();
    var listener = function listener(state) {
      var _a;
      if ((state === null || state === void 0 ? void 0 : state.user) !== lastVal) {
        lastVal = (_a = state === null || state === void 0 ? void 0 : state.user) !== null && _a !== void 0 ? _a : null;
        callback(lastVal);
      }
    };
    return _this3._subscriptionService.subscribeToState(listener);
  };
  this.getConnectedApps = function () {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return this._networkClient.fetchSDK({
              url: '/users/connected_apps',
              method: 'GET'
            });
          case 2:
            return _context22.abrupt("return", _context22.sent);
          case 3:
          case "end":
            return _context22.stop();
        }
      }, _callee22, this);
    }));
  };
  this.revokedConnectedApp = function (connectedAppId) {
    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return this._networkClient.fetchSDK({
              url: "/users/connected_apps/".concat(connectedAppId, "/revoke"),
              method: 'POST'
            });
          case 2:
            return _context23.abrupt("return", _context23.sent);
          case 3:
          case "end":
            return _context23.stop();
        }
      }, _callee23, this);
    }));
  };
});
var HeadlessSessionClient = /*#__PURE__*/function () {
  function HeadlessSessionClient(_networkClient, _subscriptionService) {
    var _this4 = this;
    _classCallCheck(this, HeadlessSessionClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.getSync = function () {
      return _this4._subscriptionService.getSession();
    };
    this.getInfo = function () {
      var session = _this4.getSync();
      var fromCache = _this4._subscriptionService.getFromCache();
      return {
        session: session,
        fromCache: fromCache
      };
    };
    this.onChange = function (callback) {
      var lastVal = _this4._subscriptionService.getSession();
      var listener = function listener(state) {
        var _a;
        if ((state === null || state === void 0 ? void 0 : state.session) !== lastVal) {
          lastVal = (_a = state === null || state === void 0 ? void 0 : state.session) !== null && _a !== void 0 ? _a : null;
          callback(lastVal);
        }
      };
      return _this4._subscriptionService.subscribeToState(listener);
    };
    this.revoke = function (options) {
      return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              _context24.prev = 0;
              _context24.next = 3;
              return this._networkClient.fetchSDK({
                url: "/sessions/revoke",
                method: 'POST'
              });
            case 3:
              resp = _context24.sent;
              this._subscriptionService.destroyState();
              return _context24.abrupt("return", resp);
            case 8:
              _context24.prev = 8;
              _context24.t0 = _context24["catch"](0);
              if (!!(options === null || options === void 0 ? void 0 : options.forceClear)) {
                this._subscriptionService.destroyState();
              } else if (ui.UNRECOVERABLE_ERROR_TYPES.includes(_context24.t0.error_type)) {
                this._subscriptionService.destroyState();
              }
              throw _context24.t0;
            case 12:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this, [[0, 8]]);
      }));
    };
    this.authenticate = function (options) {
      return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
        var _this5 = this;
        var initialSession, isSessionStale, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              initialSession = this._subscriptionService.getSession();
              isSessionStale = function isSessionStale() {
                var _a;
                return (initialSession === null || initialSession === void 0 ? void 0 : initialSession.session_id) !== ((_a = _this5._subscriptionService.getSession()) === null || _a === void 0 ? void 0 : _a.session_id);
              };
              _context25.prev = 2;
              requestBody = {
                session_duration_minutes: options === null || options === void 0 ? void 0 : options.session_duration_minutes
              };
              _context25.next = 6;
              return this._networkClient.fetchSDK({
                url: '/sessions/authenticate',
                body: requestBody,
                method: 'POST'
              });
            case 6:
              resp = _context25.sent;
              if (!isSessionStale()) {
                _context25.next = 9;
                break;
              }
              return _context25.abrupt("return", this.authenticate(options));
            case 9:
              this._subscriptionService.updateSession(resp);
              return _context25.abrupt("return", omitUser(resp));
            case 13:
              _context25.prev = 13;
              _context25.t0 = _context25["catch"](2);
              if (!isSessionStale()) {
                _context25.next = 17;
                break;
              }
              return _context25.abrupt("return", this.authenticate(options));
            case 17:
              if (ui.UNRECOVERABLE_ERROR_TYPES.includes(_context25.t0.error_type)) {
                this._subscriptionService.destroySession();
              }
              throw _context25.t0;
            case 19:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this, [[2, 13]]);
      }));
    };
    this.exchangeAccessToken = function (data) {
      return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              validate('stytch.session.exchangeAccessToken').isString('access_token', data.access_token).isNumber('session_duration_minutes', data.session_duration_minutes);
              _context26.next = 3;
              return this._networkClient.fetchSDK({
                url: '/sessions/exchange_access_token',
                body: data,
                method: 'POST'
              });
            case 3:
              resp = _context26.sent;
              this._subscriptionService.updateSession(resp);
              return _context26.abrupt("return", omitUser(resp));
            case 6:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
    };
    this.attest = function (data) {
      return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              validate('stytch.session.attest').isString('profile_id', data.profile_id).isString('token', data.token).isOptionalNumber('session_duration_minutes', data.session_duration_minutes);
              _context27.next = 3;
              return this._networkClient.fetchSDK({
                url: '/sessions/attest',
                body: data,
                method: 'POST'
              });
            case 3:
              resp = _context27.sent;
              this._subscriptionService.updateSession(resp);
              return _context27.abrupt("return", resp);
            case 6:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
    };
  }
  return _createClass(HeadlessSessionClient, [{
    key: "getTokens",
    value: function getTokens() {
      return this._subscriptionService.getTokens();
    }
  }, {
    key: "updateSession",
    value: function updateSession(tokens) {
      var _a;
      validate('stytch.session.updateSession').isString('session_token', tokens.session_token).isOptionalString('session_jwt', (_a = tokens.session_jwt) !== null && _a !== void 0 ? _a : undefined);
      this._subscriptionService.updateTokens(tokens);
    }
  }]);
}();
var DefaultDynamicConfig$4 = Promise.resolve({
  pkceRequiredForEmailMagicLinks: false
});
var HeadlessMagicLinksClient = /*#__PURE__*/function () {
  function HeadlessMagicLinksClient(_networkClient, _subscriptionService, _pkceManager, _passwordResetPKCEManager) {
    var _this6 = this;
    var _config = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DefaultDynamicConfig$4;
    var dfpProtectedAuth = arguments.length > 5 ? arguments[5] : undefined;
    _classCallCheck(this, HeadlessMagicLinksClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._passwordResetPKCEManager = _passwordResetPKCEManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.email = {
      loginOrCreate: function loginOrCreate(email) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return __awaiter(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
          var _yield$this$_config, pkceRequiredForEmailMagicLinks, code_challenge, _yield$this$dfpProtec, dfp_telemetry_id, captcha_token, requestBody;
          return _regeneratorRuntime().wrap(function _callee28$(_context28) {
            while (1) switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this._config;
              case 2:
                _yield$this$_config = _context28.sent;
                pkceRequiredForEmailMagicLinks = _yield$this$_config.pkceRequiredForEmailMagicLinks;
                code_challenge = undefined;
                if (!pkceRequiredForEmailMagicLinks) {
                  _context28.next = 9;
                  break;
                }
                _context28.next = 8;
                return this.getCodeChallenge();
              case 8:
                code_challenge = _context28.sent;
              case 9:
                _context28.next = 11;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 11:
                _yield$this$dfpProtec = _context28.sent;
                dfp_telemetry_id = _yield$this$dfpProtec.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec.captcha_token;
                requestBody = Object.assign(Object.assign({}, options), {
                  email: email,
                  code_challenge: code_challenge,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                });
                return _context28.abrupt("return", this._networkClient.retriableFetchSDK({
                  url: '/magic_links/email/login_or_create',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                }));
              case 16:
              case "end":
                return _context28.stop();
            }
          }, _callee28, this);
        }));
      },
      send: function send(email) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return __awaiter(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
          var _yield$this$_config2, pkceRequiredForEmailMagicLinks, code_challenge, _yield$this$dfpProtec2, dfp_telemetry_id, captcha_token, requestBody, isLoggedIn, endpoint;
          return _regeneratorRuntime().wrap(function _callee29$(_context29) {
            while (1) switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return this._config;
              case 2:
                _yield$this$_config2 = _context29.sent;
                pkceRequiredForEmailMagicLinks = _yield$this$_config2.pkceRequiredForEmailMagicLinks;
                code_challenge = undefined;
                if (!pkceRequiredForEmailMagicLinks) {
                  _context29.next = 9;
                  break;
                }
                _context29.next = 8;
                return this.getCodeChallenge();
              case 8:
                code_challenge = _context29.sent;
              case 9:
                _context29.next = 11;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 11:
                _yield$this$dfpProtec2 = _context29.sent;
                dfp_telemetry_id = _yield$this$dfpProtec2.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec2.captcha_token;
                requestBody = Object.assign(Object.assign({}, options), {
                  email: email,
                  code_challenge: code_challenge,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                });
                isLoggedIn = !!this._subscriptionService.getSession();
                endpoint = isLoggedIn ? '/magic_links/email/send/secondary' : '/magic_links/email/send/primary';
                return _context29.abrupt("return", this._networkClient.retriableFetchSDK({
                  url: endpoint,
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                }));
              case 18:
              case "end":
                return _context29.stop();
            }
          }, _callee29, this);
        }));
      }
    };
    this.authenticate = function (token, options) {
      return __awaiter(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
        var passwordResetPKPair, resp;
        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              validate('stytch.magicLinks.authenticate').isString('Token', token).isNumber('session_duration_minutes', options.session_duration_minutes);
              // When a user resets their password with PKCE turned on, they create a pkPair in the 'passwords' namespace.
              // However, when the user gets the reset password email, they have the option to log in without a password.
              // This redirects them to the magic link authenticate flow, which automatically looks for the pkce code_verifier
              // in the 'magic_links' namespace, breaking the flow. Unfortunately we won't know for sure in the eml authenticate call
              // whether or not the user is coming from a password reset flow. To handle this, we have to try to authenticate with
              // both the 'passwords' and 'magic_links' code_verifiers.
              _context30.next = 3;
              return this._passwordResetPKCEManager.getPKPair();
            case 3:
              passwordResetPKPair = _context30.sent;
              resp = null;
              if (!(passwordResetPKPair === null || passwordResetPKPair === void 0 ? void 0 : passwordResetPKPair.code_verifier)) {
                _context30.next = 19;
                break;
              }
              _context30.prev = 6;
              _context30.next = 9;
              return this.handlePKCEForAuthenticate(this._passwordResetPKCEManager, Object.assign(Object.assign({}, options), {
                token: token
              }));
            case 9:
              resp = _context30.sent;
              _context30.next = 19;
              break;
            case 12:
              _context30.prev = 12;
              _context30.t0 = _context30["catch"](6);
              if (!_context30.t0.message.includes('pkce')) {
                _context30.next = 18;
                break;
              }
              // If pkce-related error, fall back to magic links code_verifier
              // eslint-disable-next-line no-console
              console.log('Authenticate with passwords pkce namespace failed. Falling back to authenticate with magic_links namespace.');
              _context30.next = 19;
              break;
            case 18:
              throw _context30.t0;
            case 19:
              if (resp) {
                _context30.next = 23;
                break;
              }
              _context30.next = 22;
              return this.handlePKCEForAuthenticate(this._pkceManager, Object.assign(Object.assign({}, options), {
                token: token
              }));
            case 22:
              resp = _context30.sent;
            case 23:
              this._subscriptionService.updateSession(resp);
              return _context30.abrupt("return", omitUser(resp));
            case 25:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this, [[6, 12]]);
      }));
    };
  }
  return _createClass(HeadlessMagicLinksClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
        var keyPair;
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return this._pkceManager.getPKPair();
            case 2:
              keyPair = _context31.sent;
              if (!keyPair) {
                _context31.next = 5;
                break;
              }
              return _context31.abrupt("return", keyPair.code_challenge);
            case 5:
              _context31.next = 7;
              return this._pkceManager.startPKCETransaction();
            case 7:
              keyPair = _context31.sent;
              return _context31.abrupt("return", keyPair.code_challenge);
            case 9:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
    }
  }, {
    key: "handlePKCEForAuthenticate",
    value: function handlePKCEForAuthenticate(pkceManager, data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
        var pkPair, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return pkceManager.getPKPair();
            case 2:
              pkPair = _context32.sent;
              requestBody = Object.assign({
                code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier
              }, data);
              _context32.next = 6;
              return this._networkClient.fetchSDK({
                url: '/magic_links/authenticate',
                body: requestBody,
                method: 'POST'
              });
            case 6:
              resp = _context32.sent;
              pkceManager.clearPKPair();
              return _context32.abrupt("return", resp);
            case 9:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
    }
  }]);
}();
var HeadlessOTPClient = /*#__PURE__*/_createClass(function HeadlessOTPClient(_networkClient, _subscriptionService) {
  var _this7 = this;
  var executeRecaptcha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
    return Promise.resolve(undefined);
  };
  var dfpProtectedAuth = arguments.length > 3 ? arguments[3] : undefined;
  _classCallCheck(this, HeadlessOTPClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.executeRecaptcha = executeRecaptcha;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.sms = {
    loginOrCreate: function loginOrCreate(phone_number, options) {
      return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
        var _yield$this$dfpProtec3, dfp_telemetry_id, captcha_token, requestBody;
        return _regeneratorRuntime().wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec3 = _context33.sent;
              dfp_telemetry_id = _yield$this$dfpProtec3.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec3.captcha_token;
              requestBody = Object.assign(Object.assign({}, options), {
                phone_number: phone_number,
                captcha_token: captcha_token,
                dfp_telemetry_id: dfp_telemetry_id
              });
              return _context33.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/otps/sms/login_or_create',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 7:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
    },
    send: function send(phone_number, options) {
      return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
        var _yield$this$dfpProtec4, dfp_telemetry_id, captcha_token, requestBody, isLoggedIn, endpoint;
        return _regeneratorRuntime().wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec4 = _context34.sent;
              dfp_telemetry_id = _yield$this$dfpProtec4.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec4.captcha_token;
              requestBody = Object.assign(Object.assign({}, options), {
                phone_number: phone_number,
                captcha_token: captcha_token,
                dfp_telemetry_id: dfp_telemetry_id
              });
              isLoggedIn = !!this._subscriptionService.getSession();
              endpoint = isLoggedIn ? '/otps/sms/send/secondary' : '/otps/sms/send/primary';
              return _context34.abrupt("return", this._networkClient.retriableFetchSDK({
                url: endpoint,
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 9:
            case "end":
              return _context34.stop();
          }
        }, _callee34, this);
      }));
    }
  };
  this.whatsapp = {
    loginOrCreate: function loginOrCreate(phone_number, options) {
      return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
        var _yield$this$dfpProtec5, dfp_telemetry_id, captcha_token, requestBody;
        return _regeneratorRuntime().wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec5 = _context35.sent;
              dfp_telemetry_id = _yield$this$dfpProtec5.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec5.captcha_token;
              requestBody = Object.assign(Object.assign({}, options), {
                phone_number: phone_number,
                dfp_telemetry_id: dfp_telemetry_id,
                captcha_token: captcha_token
              });
              return _context35.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/otps/whatsapp/login_or_create',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 7:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this);
      }));
    },
    send: function send(phone_number, options) {
      return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
        var _yield$this$dfpProtec6, dfp_telemetry_id, captcha_token, requestBody, isLoggedIn, endpoint;
        return _regeneratorRuntime().wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              _context36.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec6 = _context36.sent;
              dfp_telemetry_id = _yield$this$dfpProtec6.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec6.captcha_token;
              requestBody = Object.assign(Object.assign({}, options), {
                phone_number: phone_number,
                captcha_token: captcha_token,
                dfp_telemetry_id: dfp_telemetry_id
              });
              isLoggedIn = !!this._subscriptionService.getSession();
              endpoint = isLoggedIn ? '/otps/whatsapp/send/secondary' : '/otps/whatsapp/send/primary';
              return _context36.abrupt("return", this._networkClient.retriableFetchSDK({
                url: endpoint,
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 9:
            case "end":
              return _context36.stop();
          }
        }, _callee36, this);
      }));
    }
  };
  this.email = {
    loginOrCreate: function loginOrCreate(email, options) {
      return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
        var _yield$this$dfpProtec7, dfp_telemetry_id, captcha_token, requestBody;
        return _regeneratorRuntime().wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec7 = _context37.sent;
              dfp_telemetry_id = _yield$this$dfpProtec7.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec7.captcha_token;
              requestBody = Object.assign(Object.assign({}, options), {
                email: email,
                captcha_token: captcha_token,
                dfp_telemetry_id: dfp_telemetry_id
              });
              return _context37.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/otps/email/login_or_create',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 7:
            case "end":
              return _context37.stop();
          }
        }, _callee37, this);
      }));
    },
    send: function send(email, options) {
      return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
        var captcha_token, requestBody, isLoggedIn, endpoint;
        return _regeneratorRuntime().wrap(function _callee38$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return this.executeRecaptcha();
            case 2:
              captcha_token = _context38.sent;
              requestBody = Object.assign(Object.assign({}, options), {
                email: email,
                captcha_token: captcha_token
              });
              isLoggedIn = !!this._subscriptionService.getSession();
              endpoint = isLoggedIn ? '/otps/email/send/secondary' : '/otps/email/send/primary';
              return _context38.abrupt("return", this._networkClient.fetchSDK({
                url: endpoint,
                body: requestBody,
                method: 'POST'
              }));
            case 7:
            case "end":
              return _context38.stop();
          }
        }, _callee38, this);
      }));
    }
  };
  this.authenticate = function (code, method_id, options) {
    return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
      var _yield$this$dfpProtec8, dfp_telemetry_id, captcha_token, requestBody, resp;
      return _regeneratorRuntime().wrap(function _callee39$(_context39) {
        while (1) switch (_context39.prev = _context39.next) {
          case 0:
            validate('stytch.otps.authenticate').isString('Code', code).isNumber('session_duration_minutes', options.session_duration_minutes);
            _context39.next = 3;
            return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
          case 3:
            _yield$this$dfpProtec8 = _context39.sent;
            dfp_telemetry_id = _yield$this$dfpProtec8.dfp_telemetry_id;
            captcha_token = _yield$this$dfpProtec8.captcha_token;
            requestBody = Object.assign({
              token: code,
              method_id: method_id,
              dfp_telemetry_id: dfp_telemetry_id,
              captcha_token: captcha_token
            }, options);
            _context39.next = 9;
            return this._networkClient.retriableFetchSDK({
              url: '/otps/authenticate',
              body: requestBody,
              method: 'POST',
              retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
            });
          case 9:
            resp = _context39.sent;
            this._subscriptionService.updateSession(resp);
            return _context39.abrupt("return", omitUser(resp));
          case 12:
          case "end":
            return _context39.stop();
        }
      }, _callee39, this);
    }));
  };
});
var HeadlessOAuthClient = /*#__PURE__*/function () {
  function HeadlessOAuthClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config) {
    _classCallCheck(this, HeadlessOAuthClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.google = {
      start: this.startOAuthFlow(ui.OAuthProviders.Google)
    };
    this.apple = {
      start: this.startOAuthFlow(ui.OAuthProviders.Apple)
    };
    this.microsoft = {
      start: this.startOAuthFlow(ui.OAuthProviders.Microsoft)
    };
    this.github = {
      start: this.startOAuthFlow(ui.OAuthProviders.Github)
    };
    this.gitlab = {
      start: this.startOAuthFlow(ui.OAuthProviders.GitLab)
    };
    this.facebook = {
      start: this.startOAuthFlow(ui.OAuthProviders.Facebook)
    };
    this.discord = {
      start: this.startOAuthFlow(ui.OAuthProviders.Discord)
    };
    this.salesforce = {
      start: this.startOAuthFlow(ui.OAuthProviders.Salesforce)
    };
    this.slack = {
      start: this.startOAuthFlow(ui.OAuthProviders.Slack)
    };
    this.amazon = {
      start: this.startOAuthFlow(ui.OAuthProviders.Amazon)
    };
    this.bitbucket = {
      start: this.startOAuthFlow(ui.OAuthProviders.Bitbucket)
    };
    this.linkedin = {
      start: this.startOAuthFlow(ui.OAuthProviders.LinkedIn)
    };
    this.coinbase = {
      start: this.startOAuthFlow(ui.OAuthProviders.Coinbase)
    };
    this.twitch = {
      start: this.startOAuthFlow(ui.OAuthProviders.Twitch)
    };
    this.twitter = {
      start: this.startOAuthFlow(ui.OAuthProviders.Twitter)
    };
    this.tiktok = {
      start: this.startOAuthFlow(ui.OAuthProviders.TikTok)
    };
    this.snapchat = {
      start: this.startOAuthFlow(ui.OAuthProviders.Snapchat)
    };
    this.figma = {
      start: this.startOAuthFlow(ui.OAuthProviders.Figma)
    };
    this.yahoo = {
      start: this.startOAuthFlow(ui.OAuthProviders.Yahoo)
    };
  }
  return _createClass(HeadlessOAuthClient, [{
    key: "authenticate",
    value: function authenticate(token, options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
        var keyPair, resp;
        return _regeneratorRuntime().wrap(function _callee40$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              validate('stytch.oauth.authenticate').isString('Token', token).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context40.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context40.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for OAuth flow.\n' + 'Consider using stytch.oauth.$provider.start() to add PKCE to your OAuth flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context40.next = 7;
              return this._networkClient.fetchSDK({
                url: '/oauth/authenticate',
                method: 'POST',
                body: Object.assign({
                  token: token,
                  code_verifier: keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier
                }, options)
              });
            case 7:
              resp = _context40.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context40.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context40.stop();
          }
        }, _callee40, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
        var _yield$this$_dynamicC, cnameDomain;
        return _regeneratorRuntime().wrap(function _callee41$(_context41) {
          while (1) switch (_context41.prev = _context41.next) {
            case 0:
              _context41.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC = _context41.sent;
              cnameDomain = _yield$this$_dynamicC.cnameDomain;
              if (!cnameDomain) {
                _context41.next = 6;
                break;
              }
              return _context41.abrupt("return", "https://".concat(cnameDomain));
            case 6:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context41.next = 8;
                break;
              }
              return _context41.abrupt("return", this._config.testAPIURL);
            case 8:
              return _context41.abrupt("return", this._config.liveAPIURL);
            case 9:
            case "end":
              return _context41.stop();
          }
        }, _callee41, this);
      }));
    }
  }, {
    key: "startOAuthFlow",
    value: function startOAuthFlow(providerType) {
      var _this8 = this;
      return function () {
        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          login_redirect_url = _ref6.login_redirect_url,
          signup_redirect_url = _ref6.signup_redirect_url,
          custom_scopes = _ref6.custom_scopes,
          provider_params = _ref6.provider_params;
        return __awaiter(_this8, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {
          var _yield$this$_dynamicC2, cnameDomain, pkceRequiredForOAuth, baseURL, oauthUrl, keyPair, key;
          return _regeneratorRuntime().wrap(function _callee42$(_context42) {
            while (1) switch (_context42.prev = _context42.next) {
              case 0:
                _context42.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC2 = _context42.sent;
                cnameDomain = _yield$this$_dynamicC2.cnameDomain;
                pkceRequiredForOAuth = _yield$this$_dynamicC2.pkceRequiredForOAuth;
                _context42.next = 7;
                return this.getBaseApiUrl();
              case 7:
                baseURL = _context42.sent;
                this._networkClient.logEvent({
                  name: 'start_oauth_flow',
                  details: {
                    provider_type: providerType,
                    custom_scopes: custom_scopes,
                    cname_domain: cnameDomain,
                    pkce: pkceRequiredForOAuth,
                    provider_params: provider_params
                  }
                });
                oauthUrl = new URL("".concat(baseURL, "/v1/public/oauth/").concat(providerType, "/start"));
                oauthUrl.searchParams.set('public_token', this._config.publicToken);
                if (!pkceRequiredForOAuth) {
                  _context42.next = 18;
                  break;
                }
                _context42.next = 14;
                return this._pkceManager.startPKCETransaction();
              case 14:
                keyPair = _context42.sent;
                oauthUrl.searchParams.set('code_challenge', keyPair.code_challenge);
                _context42.next = 19;
                break;
              case 18:
                this._pkceManager.clearPKPair();
              case 19:
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  oauthUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    oauthUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                login_redirect_url && oauthUrl.searchParams.set('login_redirect_url', login_redirect_url);
                signup_redirect_url && oauthUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
                window.location.href = oauthUrl.toString();
              case 24:
              case "end":
                return _context42.stop();
            }
          }, _callee42, this);
        }));
      };
    }
  }]);
}();
var DefaultDynamicConfig$3 = Promise.resolve({
  siweRequiredForCryptoWallets: false
});
var HeadlessCryptoWalletClient = /*#__PURE__*/function () {
  function HeadlessCryptoWalletClient(_networkClient, _apiNetworkClient, _subscriptionService) {
    var executeRecaptcha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
      return Promise.resolve(undefined);
    };
    var dfpProtectedAuth = arguments.length > 4 ? arguments[4] : undefined;
    var _config = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DefaultDynamicConfig$3;
    _classCallCheck(this, HeadlessCryptoWalletClient);
    this._networkClient = _networkClient;
    this._apiNetworkClient = _apiNetworkClient;
    this._subscriptionService = _subscriptionService;
    this.executeRecaptcha = executeRecaptcha;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this._config = _config;
  }
  return _createClass(HeadlessCryptoWalletClient, [{
    key: "authenticateStart",
    value: function authenticateStart(options) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
        var isLoggedIn, captcha_token, _yield$this$_config3, siweRequiredForCryptoWallets, body, endpoint, requestBody;
        return _regeneratorRuntime().wrap(function _callee43$(_context43) {
          while (1) switch (_context43.prev = _context43.next) {
            case 0:
              validate('stytch.cryptoWallets.authenticateStart').isString('crypto_wallet_address', options.crypto_wallet_address).isString('crypto_wallet_type', options.crypto_wallet_type);
              if (options.siwe_params) {
                validate('stytch.cryptoWallets.authenticateStart').isOptionalString('uri', options.siwe_params.uri).isOptionalString('chain_id', options.siwe_params.chain_id).isOptionalString('issued_at', options.siwe_params.issued_at).isOptionalString('statement', options.siwe_params.statement).isOptionalString('not_before', options.siwe_params.not_before).isOptionalString('message_request_id', options.siwe_params.message_request_id).isOptionalStringArray('resources', options.siwe_params.resources);
              }
              isLoggedIn = !!this._subscriptionService.getSession();
              _context43.next = 5;
              return this.executeRecaptcha();
            case 5:
              captcha_token = _context43.sent;
              _context43.next = 8;
              return this._config;
            case 8:
              _yield$this$_config3 = _context43.sent;
              siweRequiredForCryptoWallets = _yield$this$_config3.siweRequiredForCryptoWallets;
              body = {
                crypto_wallet_address: options.crypto_wallet_address,
                crypto_wallet_type: options.crypto_wallet_type
              };
              if (siweRequiredForCryptoWallets && options.crypto_wallet_type == 'ethereum') {
                body.siwe_params = Object.assign(Object.assign({}, options.siwe_params), {
                  uri: ((_a = options.siwe_params) === null || _a === void 0 ? void 0 : _a.uri) || window.location.origin
                });
              }
              endpoint = isLoggedIn ? '/crypto_wallets/authenticate/start/secondary' : '/crypto_wallets/authenticate/start/primary';
              requestBody = Object.assign(Object.assign({}, body), {
                captcha_token: captcha_token
              });
              return _context43.abrupt("return", this._apiNetworkClient.fetchSDK({
                url: endpoint,
                method: 'POST',
                body: requestBody
              }));
            case 15:
            case "end":
              return _context43.stop();
          }
        }, _callee43, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {
        var _yield$this$dfpProtec9, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee44$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              validate('stytch.cryptoWallets.authenticate').isString('signature', options.signature).isString('crypto_wallet_address', options.crypto_wallet_address).isString('crypto_wallet_type', options.crypto_wallet_type).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context44.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec9 = _context44.sent;
              dfp_telemetry_id = _yield$this$dfpProtec9.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec9.captcha_token;
              _context44.next = 8;
              return this._apiNetworkClient.retriableFetchSDK({
                url: '/crypto_wallets/authenticate',
                method: 'POST',
                body: {
                  session_duration_minutes: options.session_duration_minutes,
                  crypto_wallet_address: options.crypto_wallet_address,
                  crypto_wallet_type: options.crypto_wallet_type,
                  signature: options.signature,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context44.sent;
              this._subscriptionService.updateSession(resp);
              return _context44.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context44.stop();
          }
        }, _callee44, this);
      }));
    }
  }]);
}();
var HeadlessTOTPClient = /*#__PURE__*/function () {
  function HeadlessTOTPClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessTOTPClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(HeadlessTOTPClient, [{
    key: "create",
    value: function create(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee45$(_context45) {
          while (1) switch (_context45.prev = _context45.next) {
            case 0:
              validate('stytch.totps.create').isNumber('expiration_minutes', options.expiration_minutes);
              _context45.next = 3;
              return this._networkClient.fetchSDK({
                url: '/totps',
                method: 'POST',
                body: {
                  expiration_minutes: options.expiration_minutes
                }
              });
            case 3:
              resp = _context45.sent;
              this._subscriptionService.updateUser(resp.__user);
              return _context45.abrupt("return", omitUser(resp));
            case 6:
            case "end":
              return _context45.stop();
          }
        }, _callee45, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {
        var _yield$this$dfpProtec0, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee46$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              validate('stytch.totps.authenticate').isNumber('session_duration_minutes', options.session_duration_minutes).isString('totp_code', options.totp_code);
              _context46.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec0 = _context46.sent;
              dfp_telemetry_id = _yield$this$dfpProtec0.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec0.captcha_token;
              _context46.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/totps/authenticate',
                method: 'POST',
                body: {
                  session_duration_minutes: options.session_duration_minutes,
                  totp_code: options.totp_code,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context46.sent;
              this._subscriptionService.updateSession(resp);
              return _context46.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context46.stop();
          }
        }, _callee46, this);
      }));
    }
  }, {
    key: "recoveryCodes",
    value: function recoveryCodes() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
        return _regeneratorRuntime().wrap(function _callee47$(_context47) {
          while (1) switch (_context47.prev = _context47.next) {
            case 0:
              return _context47.abrupt("return", this._networkClient.fetchSDK({
                url: '/totps/recovery_codes',
                method: 'POST'
              }));
            case 1:
            case "end":
              return _context47.stop();
          }
        }, _callee47, this);
      }));
    }
  }, {
    key: "recover",
    value: function recover(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
        var _yield$this$dfpProtec1, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee48$(_context48) {
          while (1) switch (_context48.prev = _context48.next) {
            case 0:
              validate('stytch.totps.recover').isNumber('session_duration_minutes', options.session_duration_minutes).isString('recovery_code', options.recovery_code);
              _context48.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec1 = _context48.sent;
              dfp_telemetry_id = _yield$this$dfpProtec1.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec1.captcha_token;
              _context48.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/totps/recover',
                method: 'POST',
                body: {
                  session_duration_minutes: options.session_duration_minutes,
                  recovery_code: options.recovery_code,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context48.sent;
              this._subscriptionService.updateSession(resp);
              return _context48.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context48.stop();
          }
        }, _callee48, this);
      }));
    }
  }]);
}(); // src/webauthn-json/base64url.ts
function base64urlToBuffer(baseurl64String) {
  var padding = "==".slice(0, (4 - baseurl64String.length % 4) % 4);
  var base64String = baseurl64String.replace(/-/g, "+").replace(/_/g, "/") + padding;
  var str = atob(base64String);
  var buffer = new ArrayBuffer(str.length);
  var byteView = new Uint8Array(buffer);
  for (var _i = 0; _i < str.length; _i++) {
    byteView[_i] = str.charCodeAt(_i);
  }
  return buffer;
}
function bufferToBase64url(buffer) {
  var byteView = new Uint8Array(buffer);
  var str = "";
  var _iterator2 = _createForOfIteratorHelper(byteView),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var charCode = _step2.value;
      str += String.fromCharCode(charCode);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  var base64String = btoa(str);
  var base64urlString = base64String.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
  return base64urlString;
}
// src/webauthn-json/convert.ts
var copyValue = "copy";
var convertValue = "convert";
function convert(conversionFn, schema2, input) {
  if (schema2 === copyValue) {
    return input;
  }
  if (schema2 === convertValue) {
    return conversionFn(input);
  }
  if (schema2 instanceof Array) {
    return input.map(function (v) {
      return convert(conversionFn, schema2[0], v);
    });
  }
  if (schema2 instanceof Object) {
    var output = {};
    for (var _i2 = 0, _Object$entries = Object.entries(schema2); _i2 < _Object$entries.length; _i2++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
        key = _Object$entries$_i[0],
        schemaField = _Object$entries$_i[1];
      if (schemaField.derive) {
        var v = schemaField.derive(input);
        if (v !== void 0) {
          input[key] = v;
        }
      }
      if (!(key in input)) {
        if (schemaField.required) {
          throw new Error("Missing key: ".concat(key));
        }
        continue;
      }
      if (input[key] == null) {
        output[key] = null;
        continue;
      }
      output[key] = convert(conversionFn, schemaField.schema, input[key]);
    }
    return output;
  }
}
function derived(schema2, derive) {
  return {
    required: true,
    schema: schema2,
    derive: derive
  };
}
function required(schema2) {
  return {
    required: true,
    schema: schema2
  };
}
function optional(schema2) {
  return {
    required: false,
    schema: schema2
  };
}
// src/webauthn-json/basic/schema.ts
var publicKeyCredentialDescriptorSchema = {
  type: required(copyValue),
  id: required(convertValue),
  transports: optional(copyValue)
};
var simplifiedExtensionsSchema = {
  appid: optional(copyValue),
  appidExclude: optional(copyValue),
  credProps: optional(copyValue)
};
var simplifiedClientExtensionResultsSchema = {
  appid: optional(copyValue),
  appidExclude: optional(copyValue),
  credProps: optional(copyValue)
};
var credentialCreationOptions = {
  publicKey: required({
    rp: required(copyValue),
    user: required({
      id: required(convertValue),
      name: required(copyValue),
      displayName: required(copyValue)
    }),
    challenge: required(convertValue),
    pubKeyCredParams: required(copyValue),
    timeout: optional(copyValue),
    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),
    authenticatorSelection: optional(copyValue),
    attestation: optional(copyValue),
    extensions: optional(simplifiedExtensionsSchema)
  }),
  signal: optional(copyValue)
};
var publicKeyCredentialWithAttestation = {
  type: required(copyValue),
  id: required(copyValue),
  rawId: required(convertValue),
  authenticatorAttachment: optional(copyValue),
  response: required({
    clientDataJSON: required(convertValue),
    attestationObject: required(convertValue),
    transports: derived(copyValue, function (response) {
      var _a;
      return ((_a = response.getTransports) == null ? void 0 : _a.call(response)) || [];
    })
  }),
  clientExtensionResults: derived(simplifiedClientExtensionResultsSchema, function (pkc) {
    return pkc.getClientExtensionResults();
  })
};
var credentialRequestOptions = {
  mediation: optional(copyValue),
  publicKey: required({
    challenge: required(convertValue),
    timeout: optional(copyValue),
    rpId: optional(copyValue),
    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),
    userVerification: optional(copyValue),
    extensions: optional(simplifiedExtensionsSchema)
  }),
  signal: optional(copyValue)
};
var publicKeyCredentialWithAssertion = {
  type: required(copyValue),
  id: required(copyValue),
  rawId: required(convertValue),
  authenticatorAttachment: optional(copyValue),
  response: required({
    clientDataJSON: required(convertValue),
    authenticatorData: required(convertValue),
    signature: required(convertValue),
    userHandle: required(convertValue)
  }),
  clientExtensionResults: derived(simplifiedClientExtensionResultsSchema, function (pkc) {
    return pkc.getClientExtensionResults();
  })
};
// src/webauthn-json/basic/api.ts
function createRequestFromJSON(requestJSON) {
  return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);
}
function createResponseToJSON(credential) {
  return convert(bufferToBase64url, publicKeyCredentialWithAttestation, credential);
}
function create(requestJSON) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
    var credential;
    return _regeneratorRuntime().wrap(function _callee49$(_context49) {
      while (1) switch (_context49.prev = _context49.next) {
        case 0:
          _context49.next = 2;
          return navigator.credentials.create(createRequestFromJSON(requestJSON));
        case 2:
          credential = _context49.sent;
          return _context49.abrupt("return", createResponseToJSON(credential));
        case 4:
        case "end":
          return _context49.stop();
      }
    }, _callee49);
  }));
}
function getRequestFromJSON(requestJSON) {
  return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);
}
function getResponseToJSON(credential) {
  return convert(bufferToBase64url, publicKeyCredentialWithAssertion, credential);
}
function get(requestJSON) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
    var credential;
    return _regeneratorRuntime().wrap(function _callee50$(_context50) {
      while (1) switch (_context50.prev = _context50.next) {
        case 0:
          _context50.next = 2;
          return navigator.credentials.get(getRequestFromJSON(requestJSON));
        case 2:
          credential = _context50.sent;
          return _context50.abrupt("return", getResponseToJSON(credential));
        case 4:
        case "end":
          return _context50.stop();
      }
    }, _callee50);
  }));
}
var HeadlessWebAuthnClient = /*#__PURE__*/function () {
  function HeadlessWebAuthnClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessWebAuthnClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.checkEligibleInputs = function () {
      // Check for an <input> with "webauthn" in its `autocomplete` attribute
      var eligibleInputs = document.querySelectorAll("input[autocomplete*='webauthn']");
      // WebAuthn autofill requires at least one valid input
      if (eligibleInputs.length < 1) {
        // eslint-disable-next-line no-console
        console.error('No <input> with `"webauthn"` in its `autocomplete` attribute was detected');
        return false;
      }
      return true;
    };
  }
  return _createClass(HeadlessWebAuthnClient, [{
    key: "register",
    value: function register(options) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
        var startResp, publicKeyCredentialCreationOptions, publicKey, credential, resp;
        return _regeneratorRuntime().wrap(function _callee51$(_context51) {
          while (1) switch (_context51.prev = _context51.next) {
            case 0:
              validate('stytch.webauthn.register').isOptionalString('domain', options === null || options === void 0 ? void 0 : options.domain).isOptionalString('authenticator_type', options === null || options === void 0 ? void 0 : options.authenticator_type).isOptionalBoolean('is_passkey', options === null || options === void 0 ? void 0 : options.is_passkey).isOptionalNumber('session_duration_minutes', options === null || options === void 0 ? void 0 : options.session_duration_minutes).isOptionalString('override_id', options === null || options === void 0 ? void 0 : options.override_id).isOptionalString('override_name', options === null || options === void 0 ? void 0 : options.override_name).isOptionalString('override_display_name', options === null || options === void 0 ? void 0 : options.override_display_name).isOptionalBoolean('use_base64_url_encoding', options === null || options === void 0 ? void 0 : options.use_base64_url_encoding);
              _context51.next = 3;
              return this._networkClient.fetchSDK({
                url: '/webauthn/register/start',
                method: 'POST',
                body: {
                  domain: (_a = options === null || options === void 0 ? void 0 : options.domain) !== null && _a !== void 0 ? _a : window.location.hostname,
                  authenticator_type: (_b = options === null || options === void 0 ? void 0 : options.authenticator_type) !== null && _b !== void 0 ? _b : undefined,
                  return_passkey_credential_options: options === null || options === void 0 ? void 0 : options.is_passkey,
                  override_id: options === null || options === void 0 ? void 0 : options.override_id,
                  override_name: options === null || options === void 0 ? void 0 : options.override_name,
                  override_display_name: options === null || options === void 0 ? void 0 : options.override_display_name,
                  user_agent: navigator.userAgent,
                  use_base64_url_encoding: options === null || options === void 0 ? void 0 : options.use_base64_url_encoding
                }
              });
            case 3:
              startResp = _context51.sent;
              publicKeyCredentialCreationOptions = startResp.public_key_credential_creation_options;
              publicKey = JSON.parse(publicKeyCredentialCreationOptions);
              _context51.next = 8;
              return create({
                publicKey: publicKey
              });
            case 8:
              credential = _context51.sent;
              _context51.next = 11;
              return this._networkClient.fetchSDK({
                url: '/webauthn/register',
                method: 'POST',
                body: {
                  public_key_credential: JSON.stringify(credential),
                  session_duration_minutes: options === null || options === void 0 ? void 0 : options.session_duration_minutes
                }
              });
            case 11:
              resp = _context51.sent;
              this._subscriptionService.updateSession(resp);
              return _context51.abrupt("return", omitUser(resp));
            case 14:
            case "end":
              return _context51.stop();
          }
        }, _callee51, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
        var _yield$this$dfpProtec10, dfp_telemetry_id, captcha_token, isLoggedIn, endpoint, startResp, publicKeyCredentialRequestOptions, abortController, credReqOptions, conditionalMediationCredReqOption, credential, authenticationData;
        return _regeneratorRuntime().wrap(function _callee52$(_context52) {
          while (1) switch (_context52.prev = _context52.next) {
            case 0:
              validate('stytch.webauthn.authenticate').isOptionalString('domain', options.domain).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalBoolean('is_passkey', options.is_passkey).isOptionalObject('signal', options.signal);
              _context52.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec10 = _context52.sent;
              dfp_telemetry_id = _yield$this$dfpProtec10.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec10.captcha_token;
              if (!options.conditional_mediation) {
                _context52.next = 14;
                break;
              }
              _context52.next = 9;
              return this.browserSupportsAutofill();
            case 9:
              if (_context52.sent) {
                _context52.next = 12;
                break;
              }
              // eslint-disable-next-line no-console
              console.error('Browser does not support WebAuthn autofill');
              return _context52.abrupt("return", null);
            case 12:
              if (this.checkEligibleInputs()) {
                _context52.next = 14;
                break;
              }
              return _context52.abrupt("return", null);
            case 14:
              isLoggedIn = !!this._subscriptionService.getSession();
              endpoint = isLoggedIn ? '/webauthn/authenticate/start/secondary' : '/webauthn/authenticate/start/primary';
              _context52.next = 18;
              return this._networkClient.fetchSDK({
                url: endpoint,
                method: 'POST',
                body: {
                  domain: (_a = options.domain) !== null && _a !== void 0 ? _a : window.location.hostname,
                  return_passkey_credential_options: options === null || options === void 0 ? void 0 : options.is_passkey
                }
              });
            case 18:
              startResp = _context52.sent;
              publicKeyCredentialRequestOptions = startResp.public_key_credential_request_options;
              abortController = new AbortController();
              credReqOptions = {
                publicKey: JSON.parse(publicKeyCredentialRequestOptions),
                signal: (_b = options.signal) !== null && _b !== void 0 ? _b : abortController.signal
              };
              conditionalMediationCredReqOption = Object.assign(Object.assign({}, credReqOptions), {
                mediation: 'conditional'
              });
              _context52.next = 25;
              return get(options.conditional_mediation ? conditionalMediationCredReqOption : credReqOptions);
            case 25:
              credential = _context52.sent;
              _context52.next = 28;
              return this._networkClient.retriableFetchSDK({
                url: '/webauthn/authenticate',
                method: 'POST',
                body: {
                  public_key_credential: JSON.stringify(credential),
                  session_duration_minutes: options.session_duration_minutes,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 28:
              authenticationData = _context52.sent;
              this._subscriptionService.updateSession(authenticationData);
              return _context52.abrupt("return", omitUser(authenticationData));
            case 31:
            case "end":
              return _context52.stop();
          }
        }, _callee52, this);
      }));
    }
  }, {
    key: "update",
    value: function update(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {
        var url;
        return _regeneratorRuntime().wrap(function _callee53$(_context53) {
          while (1) switch (_context53.prev = _context53.next) {
            case 0:
              url = '/webauthn/update/' + options.webauthn_registration_id;
              _context53.next = 3;
              return this._networkClient.fetchSDK({
                url: url,
                method: 'PUT',
                body: {
                  name: options.name
                }
              });
            case 3:
              return _context53.abrupt("return", _context53.sent);
            case 4:
            case "end":
              return _context53.stop();
          }
        }, _callee53, this);
      }));
    }
  }, {
    key: "browserSupportsAutofill",
    value: function browserSupportsAutofill() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
        return _regeneratorRuntime().wrap(function _callee54$(_context54) {
          while (1) switch (_context54.prev = _context54.next) {
            case 0:
              if (!(window.PublicKeyCredential && window.PublicKeyCredential.isConditionalMediationAvailable)) {
                _context54.next = 4;
                break;
              }
              _context54.next = 3;
              return window.PublicKeyCredential.isConditionalMediationAvailable();
            case 3:
              return _context54.abrupt("return", _context54.sent);
            case 4:
              return _context54.abrupt("return", false);
            case 5:
            case "end":
              return _context54.stop();
          }
        }, _callee54);
      }));
    }
  }]);
}();
var DefaultDynamicConfig$2 = Promise.resolve({
  pkceRequiredForPasswordResets: false
});
var HeadlessPasswordClient = /*#__PURE__*/function () {
  function HeadlessPasswordClient(_networkClient, _subscriptionService, _pkceManager) {
    var _config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DefaultDynamicConfig$2;
    var dfpProtectedAuth = arguments.length > 4 ? arguments[4] : undefined;
    _classCallCheck(this, HeadlessPasswordClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(HeadlessPasswordClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
        var _yield$this$_config4, pkceRequiredForPasswordResets, keyPair;
        return _regeneratorRuntime().wrap(function _callee55$(_context55) {
          while (1) switch (_context55.prev = _context55.next) {
            case 0:
              _context55.next = 2;
              return this._config;
            case 2:
              _yield$this$_config4 = _context55.sent;
              pkceRequiredForPasswordResets = _yield$this$_config4.pkceRequiredForPasswordResets;
              if (pkceRequiredForPasswordResets) {
                _context55.next = 6;
                break;
              }
              return _context55.abrupt("return", undefined);
            case 6:
              _context55.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context55.sent;
              if (!keyPair) {
                _context55.next = 11;
                break;
              }
              return _context55.abrupt("return", keyPair.code_challenge);
            case 11:
              _context55.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context55.sent;
              return _context55.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context55.stop();
          }
        }, _callee55, this);
      }));
    }
  }, {
    key: "create",
    value: function create(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {
        var _yield$this$dfpProtec11, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee56$(_context56) {
          while (1) switch (_context56.prev = _context56.next) {
            case 0:
              validate('stytch.passwords.create').isString('password', options.password).isString('email', options.email).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context56.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec11 = _context56.sent;
              dfp_telemetry_id = _yield$this$dfpProtec11.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec11.captcha_token;
              _context56.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/passwords',
                method: 'POST',
                body: {
                  email: options.email,
                  password: options.password,
                  session_duration_minutes: options.session_duration_minutes,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context56.sent;
              this._subscriptionService.updateSession(resp);
              return _context56.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context56.stop();
          }
        }, _callee56, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee57() {
        var _yield$this$dfpProtec12, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee57$(_context57) {
          while (1) switch (_context57.prev = _context57.next) {
            case 0:
              validate('stytch.passwords.authenticate').isString('password', options.password).isString('email', options.email).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context57.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec12 = _context57.sent;
              dfp_telemetry_id = _yield$this$dfpProtec12.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec12.captcha_token;
              _context57.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/passwords/authenticate',
                method: 'POST',
                body: {
                  email: options.email,
                  password: options.password,
                  session_duration_minutes: options.session_duration_minutes,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context57.sent;
              this._subscriptionService.updateSession(resp);
              return _context57.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context57.stop();
          }
        }, _callee57, this);
      }));
    }
  }, {
    key: "resetByEmailStart",
    value: function resetByEmailStart(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {
        var code_challenge, _yield$this$dfpProtec13, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee58$(_context58) {
          while (1) switch (_context58.prev = _context58.next) {
            case 0:
              validate('stytch.passwords.resetByEmailStart').isString('email', options.email).isOptionalString('login_redirect_url', options.login_redirect_url).isOptionalString('reset_password_redirect_url', options.reset_password_redirect_url).isOptionalString('reset_password_template_id', options.reset_password_template_id).isOptionalNumber('reset_password_expiration_minutes', options.reset_password_expiration_minutes).isOptionalString('locale', options.locale);
              _context58.next = 3;
              return this.getCodeChallenge();
            case 3:
              code_challenge = _context58.sent;
              _context58.next = 6;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 6:
              _yield$this$dfpProtec13 = _context58.sent;
              dfp_telemetry_id = _yield$this$dfpProtec13.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec13.captcha_token;
              return _context58.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/passwords/email/reset/start',
                method: 'POST',
                body: {
                  email: options.email,
                  login_redirect_url: options.login_redirect_url,
                  reset_password_redirect_url: options.reset_password_redirect_url,
                  reset_password_expiration_minutes: options.reset_password_expiration_minutes,
                  reset_password_template_id: options.reset_password_template_id,
                  locale: options.locale,
                  code_challenge: code_challenge,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 10:
            case "end":
              return _context58.stop();
          }
        }, _callee58, this);
      }));
    }
  }, {
    key: "resetByEmail",
    value: function resetByEmail(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
        var _yield$this$dfpProtec14, dfp_telemetry_id, captcha_token, pkPair, code_verifier, resp;
        return _regeneratorRuntime().wrap(function _callee59$(_context59) {
          while (1) switch (_context59.prev = _context59.next) {
            case 0:
              validate('stytch.passwords.resetByEmail').isString('token', options.token).isString('password', options.password).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context59.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec14 = _context59.sent;
              dfp_telemetry_id = _yield$this$dfpProtec14.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec14.captcha_token;
              _context59.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              pkPair = _context59.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context59.next = 12;
              return this._networkClient.retriableFetchSDK({
                url: '/passwords/email/reset',
                method: 'POST',
                body: {
                  token: options.token,
                  password: options.password,
                  session_duration_minutes: options.session_duration_minutes,
                  captcha_token: captcha_token,
                  code_verifier: code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 12:
              resp = _context59.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context59.abrupt("return", omitUser(resp));
            case 16:
            case "end":
              return _context59.stop();
          }
        }, _callee59, this);
      }));
    }
  }, {
    key: "resetByExistingPassword",
    value: function resetByExistingPassword(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
        var _yield$this$dfpProtec15, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee60$(_context60) {
          while (1) switch (_context60.prev = _context60.next) {
            case 0:
              validate('stytch.passwords.resetByExistingPassword').isString('email', options.email).isString('existing_password', options.existing_password).isString('new_password', options.new_password).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context60.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec15 = _context60.sent;
              dfp_telemetry_id = _yield$this$dfpProtec15.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec15.captcha_token;
              _context60.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/passwords/existing_password/reset',
                method: 'POST',
                body: {
                  email: options.email,
                  existing_password: options.existing_password,
                  new_password: options.new_password,
                  session_duration_minutes: options.session_duration_minutes,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context60.sent;
              this._subscriptionService.updateSession(resp);
              return _context60.abrupt("return", omitUser(resp));
            case 11:
            case "end":
              return _context60.stop();
          }
        }, _callee60, this);
      }));
    }
  }, {
    key: "resetBySession",
    value: function resetBySession(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
        var _yield$this$dfpProtec16, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee61$(_context61) {
          while (1) switch (_context61.prev = _context61.next) {
            case 0:
              validate('stytch.passwords.resetBySession').isString('password', options.password);
              _context61.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec16 = _context61.sent;
              dfp_telemetry_id = _yield$this$dfpProtec16.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec16.captcha_token;
              _context61.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/passwords/session/reset',
                method: 'POST',
                body: {
                  password: options.password,
                  session_duration_minutes: options.session_duration_minutes,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context61.sent;
              this._subscriptionService.updateSession(resp);
              return _context61.abrupt("return", resp);
            case 11:
            case "end":
              return _context61.stop();
          }
        }, _callee61, this);
      }));
    }
  }, {
    key: "strengthCheck",
    value: function strengthCheck(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
        return _regeneratorRuntime().wrap(function _callee62$(_context62) {
          while (1) switch (_context62.prev = _context62.next) {
            case 0:
              validate('stytch.passwords.strengthCheck').isOptionalString('email', options.email).isString('password', options.password);
              return _context62.abrupt("return", this._networkClient.fetchSDK({
                url: '/passwords/strength_check',
                method: 'POST',
                body: {
                  email: options.email,
                  password: options.password
                }
              }));
            case 2:
            case "end":
              return _context62.stop();
          }
        }, _callee62, this);
      }));
    }
  }]);
}();
var HeadlessImpersonationClient = /*#__PURE__*/_createClass(function HeadlessImpersonationClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
  var _this9 = this;
  _classCallCheck(this, HeadlessImpersonationClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.authenticate = function (data) {
    return __awaiter(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
      var _yield$this$dfpProtec17, dfp_telemetry_id, captcha_token, resp;
      return _regeneratorRuntime().wrap(function _callee63$(_context63) {
        while (1) switch (_context63.prev = _context63.next) {
          case 0:
            validate('stytch.impersonation.authenticate').isString('impersonation_token', data.impersonation_token);
            _context63.next = 3;
            return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
          case 3:
            _yield$this$dfpProtec17 = _context63.sent;
            dfp_telemetry_id = _yield$this$dfpProtec17.dfp_telemetry_id;
            captcha_token = _yield$this$dfpProtec17.captcha_token;
            _context63.next = 8;
            return this._networkClient.retriableFetchSDK({
              url: '/impersonation/authenticate',
              body: Object.assign(Object.assign({}, data), {
                dfp_telemetry_id: dfp_telemetry_id,
                captcha_token: captcha_token
              }),
              method: 'POST',
              retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
            });
          case 8:
            resp = _context63.sent;
            this._subscriptionService.updateSession(resp);
            return _context63.abrupt("return", resp);
          case 11:
          case "end":
            return _context63.stop();
        }
      }, _callee63, this);
    }));
  };
});
var WILDCARD_ACTION = '*';
/**
 * RBACPolicy represents an instance of a parsed Stytch RBAC policy object
 * It contains methods for computing outcomes for various permissions questions
 */
var RBACPolicy = /*#__PURE__*/function () {
  function RBACPolicy(roles, resources) {
    var _this0 = this;
    _classCallCheck(this, RBACPolicy);
    this.roles = roles;
    this.resources = resources;
    this.rolesByID = {};
    roles.forEach(function (role) {
      return _this0.rolesByID[role.role_id] = role;
    });
  }
  return _createClass(RBACPolicy, [{
    key: "callerIsAuthorized",
    value:
    /**
     * isAuthorized returns whether or not a user with a specific set of roles can perform a desired action
     * @example
     *  const canDoIt = policy.callerIsAuthorized(roles, 'files', 'create')
     *  console.log(canDoIt) // true
     */
    function callerIsAuthorized(memberRoles, resourceId, action) {
      var _this1 = this;
      return !!memberRoles.map(function (roleId) {
        return _this1.rolesByID[roleId];
      })
      // Defense in depth: filter out null/undefined in case memberRoles contains a role that doesn't match the policy
      // This may happen if the member is loaded _before_ a fresh RBAC policy is loaded
      .filter(function (v) {
        return v;
      }).flatMap(function (role) {
        return role.permissions;
      }).filter(function (permission) {
        return permission.resource_id === resourceId;
      }).find(function (permission) {
        return permission.actions.includes(action) || permission.actions.includes(WILDCARD_ACTION);
      });
    }
    /**
     * allPermissions generates a map that allows quick lookup of all the permissions available to the user
     * @example
     *   const perms = policy.allPermissions(roles)
     *   console.log(perms.files.create) // true
     *   console.log(perms.files.delete) // false
     */
  }, {
    key: "allPermissionsForCaller",
    value: function allPermissionsForCaller(memberRoles) {
      var _this10 = this;
      var allPermsMap = Object.create(null);
      this.resources.forEach(function (resource) {
        allPermsMap[resource.resource_id] = {};
        resource.actions.forEach(function (action) {
          allPermsMap[resource.resource_id][action] = _this10.callerIsAuthorized(memberRoles, resource.resource_id, action);
        });
      });
      return allPermsMap;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(input) {
      return new RBACPolicy(input.roles, input.resources);
    }
  }]);
}();
var HeadlessRBACClient = /*#__PURE__*/function () {
  function HeadlessRBACClient(cachedConfig, dynamicConfig, _subscriptionService) {
    var _this11 = this;
    _classCallCheck(this, HeadlessRBACClient);
    this._subscriptionService = _subscriptionService;
    this.isAuthorizedSync = function (resourceId, action) {
      var _a;
      return !!((_a = _this11.cachedPolicy) === null || _a === void 0 ? void 0 : _a.callerIsAuthorized(_this11.roleIds(), resourceId, action));
    };
    this.isAuthorized = function (resourceId, action) {
      return _this11.policyPromise.then(function (policy) {
        return policy.callerIsAuthorized(_this11.roleIds(), resourceId, action);
      });
    };
    this.cachedPolicy = cachedConfig.rbacPolicy ? RBACPolicy.fromJSON(cachedConfig.rbacPolicy) : null;
    this.policyPromise = dynamicConfig.then(function (data) {
      if (!data.rbacPolicy) {
        logger.error('Unable to retrieve RBAC policy from servers. Assuming caller has no permissions.');
        return new RBACPolicy([], []);
      }
      // Update the existing policy too, so isAuthorizedSync will be up-to-date
      _this11.cachedPolicy = RBACPolicy.fromJSON(data.rbacPolicy);
      return _this11.cachedPolicy;
    });
  }
  return _createClass(HeadlessRBACClient, [{
    key: "allPermissions",
    value: function allPermissions() {
      var _this12 = this;
      return this.policyPromise.then(function (policy) {
        return policy.allPermissionsForCaller(_this12.roleIds());
      });
    }
  }, {
    key: "roleIds",
    value: function roleIds() {
      var _a;
      var user = this._subscriptionService.getUser();
      if (!user) {
        return [];
      }
      // Although user.roles is guaranteed to exist for fresh data, there is a chance
      // that the user stored in localstorage clientside comes from before roles were added to
      // the API response - in which case user.roles will be undefined and this will crash
      // TODO: [AUTH-2294] We can safely remove this ~3mos after RBAC is released
      return (_a = user.roles) !== null && _a !== void 0 ? _a : [];
    }
  }]);
}();
var HeadlessIDPClient = /*#__PURE__*/_createClass(function HeadlessIDPClient(_networkClient) {
  var _this13 = this;
  _classCallCheck(this, HeadlessIDPClient);
  this._networkClient = _networkClient;
  this.oauthAuthorizeStart = function (data) {
    return __awaiter(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
      return _regeneratorRuntime().wrap(function _callee64$(_context64) {
        while (1) switch (_context64.prev = _context64.next) {
          case 0:
            return _context64.abrupt("return", this._networkClient.fetchSDK({
              url: '/idp/oauth/authorize/start',
              method: 'POST',
              body: data
            }));
          case 1:
          case "end":
            return _context64.stop();
        }
      }, _callee64, this);
    }));
  };
  this.oauthAuthorizeSubmit = function (data) {
    return __awaiter(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
      return _regeneratorRuntime().wrap(function _callee65$(_context65) {
        while (1) switch (_context65.prev = _context65.next) {
          case 0:
            return _context65.abrupt("return", this._networkClient.fetchSDK({
              url: '/idp/oauth/authorize/submit',
              method: 'POST',
              body: data
            }));
          case 1:
          case "end":
            return _context65.stop();
        }
      }, _callee65, this);
    }));
  };
  this.oauthLogoutStart = function (data) {
    return __awaiter(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
      return _regeneratorRuntime().wrap(function _callee66$(_context66) {
        while (1) switch (_context66.prev = _context66.next) {
          case 0:
            _context66.next = 2;
            return this._networkClient.fetchSDK({
              url: "/oauth/logout/start",
              method: 'POST',
              body: data
            });
          case 2:
            return _context66.abrupt("return", _context66.sent);
          case 3:
          case "end":
            return _context66.stop();
        }
      }, _callee66, this);
    }));
  };
});
var DefaultDynamicConfig$1 = Promise.resolve({
  pkceRequiredForEmailMagicLinks: false
});
var HeadlessB2BMagicLinksClient = /*#__PURE__*/function () {
  function HeadlessB2BMagicLinksClient(_networkClient, _subscriptionService, _pkceManager, _passwordResetPKCEManager) {
    var _this14 = this;
    var _config = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DefaultDynamicConfig$1;
    var dfpProtectedAuth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DisabledDFPProtectedAuthProvider();
    _classCallCheck(this, HeadlessB2BMagicLinksClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._passwordResetPKCEManager = _passwordResetPKCEManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.email = {
      invite: function invite(data) {
        return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
          return _regeneratorRuntime().wrap(function _callee67$(_context67) {
            while (1) switch (_context67.prev = _context67.next) {
              case 0:
                validate('stytch.magicLinks.email.invite').isString('email_address', data.email_address).isOptionalString('invite_redirect_url', data.invite_redirect_url).isOptionalString('invite_template_id', data.invite_template_id).isOptionalString('name', data.name).isOptionalString('locale', data.locale).isOptionalStringArray('roles', data.roles).isOptionalNumber('invite_expiration_minutes', data.invite_expiration_minutes);
                return _context67.abrupt("return", this._networkClient.fetchSDK({
                  url: '/b2b/magic_links/email/invite',
                  body: data,
                  method: 'POST'
                }));
              case 2:
              case "end":
                return _context67.stop();
            }
          }, _callee67, this);
        }));
      },
      loginOrSignup: function loginOrSignup(data) {
        return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
          var pkce_code_challenge, requestBody;
          return _regeneratorRuntime().wrap(function _callee68$(_context68) {
            while (1) switch (_context68.prev = _context68.next) {
              case 0:
                validate('stytch.magicLinks.email.loginOrSignup').isString('email_address', data.email_address).isString('organization_id', data.organization_id).isOptionalString('login_redirect_url', data.login_redirect_url).isOptionalString('login_template_id', data.login_template_id).isOptionalString('signup_redirect_url', data.signup_redirect_url).isOptionalString('signup_template_id', data.signup_template_id).isOptionalString('locale', data.locale).isOptionalNumber('login_expiration_minutes', data.login_expiration_minutes).isOptionalNumber('signup_expiration_minutes', data.signup_expiration_minutes);
                _context68.next = 3;
                return this.getCodeChallenge();
              case 3:
                pkce_code_challenge = _context68.sent;
                requestBody = Object.assign(Object.assign({}, data), {
                  pkce_code_challenge: pkce_code_challenge
                });
                return _context68.abrupt("return", this._networkClient.fetchSDK({
                  url: '/b2b/magic_links/email/login_or_signup',
                  body: requestBody,
                  method: 'POST'
                }));
              case 6:
              case "end":
                return _context68.stop();
            }
          }, _callee68, this);
        }));
      },
      discovery: {
        send: function send(data) {
          return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
            var _yield$this$dfpProtec18, dfp_telemetry_id, captcha_token, pkce_code_challenge, requestBody;
            return _regeneratorRuntime().wrap(function _callee69$(_context69) {
              while (1) switch (_context69.prev = _context69.next) {
                case 0:
                  validate('stytch.magicLinks.email.discovery.send').isString('email_address', data.email_address).isOptionalString('discovery_redirect_url', data.discovery_redirect_url).isOptionalString('login_template_id', data.login_template_id).isOptionalString('locale', data.locale).isOptionalNumber('discovery_expiration_minutes', data.discovery_expiration_minutes);
                  _context69.next = 3;
                  return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
                case 3:
                  _yield$this$dfpProtec18 = _context69.sent;
                  dfp_telemetry_id = _yield$this$dfpProtec18.dfp_telemetry_id;
                  captcha_token = _yield$this$dfpProtec18.captcha_token;
                  _context69.next = 8;
                  return this.getCodeChallenge();
                case 8:
                  pkce_code_challenge = _context69.sent;
                  requestBody = Object.assign(Object.assign({}, data), {
                    pkce_code_challenge: pkce_code_challenge,
                    dfp_telemetry_id: dfp_telemetry_id,
                    captcha_token: captcha_token
                  });
                  return _context69.abrupt("return", this._networkClient.retriableFetchSDK({
                    url: '/b2b/magic_links/email/discovery/send',
                    body: requestBody,
                    method: 'POST',
                    retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                  }));
                case 11:
                case "end":
                  return _context69.stop();
              }
            }, _callee69, this);
          }));
        }
      }
    };
    this.authenticate = function (data) {
      return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
        var passwordResetPKPair, resp;
        return _regeneratorRuntime().wrap(function _callee70$(_context70) {
          while (1) switch (_context70.prev = _context70.next) {
            case 0:
              validate('stytch.magicLinks.authenticate').isString('magic_links_token', data.magic_links_token).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              // When a user resets their password with PKCE turned on, they create a pkPair in the 'passwords' namespace.
              // However, when the user gets the reset password email, they have the option to log in without a password.
              // This redirects them to the magic link authenticate flow, which automatically looks for the pkce code_verifier
              // in the 'magic_links' namespace, breaking the flow. Unfortunately we won't know for sure in the eml authenticate call
              // whether or not the user is coming from a password reset flow. To handle this, we have to try to authenticate with
              // both the 'passwords' and 'magic_links' code_verifiers.
              _context70.next = 3;
              return this._passwordResetPKCEManager.getPKPair();
            case 3:
              passwordResetPKPair = _context70.sent;
              resp = null;
              if (!(passwordResetPKPair === null || passwordResetPKPair === void 0 ? void 0 : passwordResetPKPair.code_verifier)) {
                _context70.next = 19;
                break;
              }
              _context70.prev = 6;
              _context70.next = 9;
              return this.handlePKCEForAuthenticate(this._passwordResetPKCEManager, data);
            case 9:
              resp = _context70.sent;
              _context70.next = 19;
              break;
            case 12:
              _context70.prev = 12;
              _context70.t0 = _context70["catch"](6);
              if (!_context70.t0.message.includes('pkce')) {
                _context70.next = 18;
                break;
              }
              // If pkce-related error, fall back to magic links code_verifier
              // eslint-disable-next-line no-console
              console.log('Authenticate with passwords pkce namespace failed. Falling back to authenticate with magic_links namespace.');
              _context70.next = 19;
              break;
            case 18:
              throw _context70.t0;
            case 19:
              if (resp) {
                _context70.next = 23;
                break;
              }
              _context70.next = 22;
              return this.handlePKCEForAuthenticate(this._pkceManager, data);
            case 22:
              resp = _context70.sent;
            case 23:
              this._subscriptionService.updateSession(resp);
              return _context70.abrupt("return", resp);
            case 25:
            case "end":
              return _context70.stop();
          }
        }, _callee70, this, [[6, 12]]);
      }));
    };
    this.discovery = {
      authenticate: function authenticate(data) {
        return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
          var pkPair, _yield$this$dfpProtec19, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee71$(_context71) {
            while (1) switch (_context71.prev = _context71.next) {
              case 0:
                validate('stytch.magicLinks.discovery.authenticate').isString('discovery_magic_links_token', data.discovery_magic_links_token);
                _context71.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context71.sent;
                _context71.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec19 = _context71.sent;
                dfp_telemetry_id = _yield$this$dfpProtec19.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec19.captcha_token;
                requestBody = Object.assign({
                  pkce_code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context71.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/magic_links/discovery/authenticate',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context71.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateSession(resp);
                return _context71.abrupt("return", resp);
              case 16:
              case "end":
                return _context71.stop();
            }
          }, _callee71, this);
        }));
      }
    };
  }
  return _createClass(HeadlessB2BMagicLinksClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee72() {
        var _yield$this$_config5, pkceRequiredForEmailMagicLinks, keyPair;
        return _regeneratorRuntime().wrap(function _callee72$(_context72) {
          while (1) switch (_context72.prev = _context72.next) {
            case 0:
              _context72.next = 2;
              return this._config;
            case 2:
              _yield$this$_config5 = _context72.sent;
              pkceRequiredForEmailMagicLinks = _yield$this$_config5.pkceRequiredForEmailMagicLinks;
              if (pkceRequiredForEmailMagicLinks) {
                _context72.next = 6;
                break;
              }
              return _context72.abrupt("return", undefined);
            case 6:
              _context72.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context72.sent;
              if (!keyPair) {
                _context72.next = 11;
                break;
              }
              return _context72.abrupt("return", keyPair.code_challenge);
            case 11:
              _context72.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context72.sent;
              return _context72.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context72.stop();
          }
        }, _callee72, this);
      }));
    }
  }, {
    key: "handlePKCEForAuthenticate",
    value: function handlePKCEForAuthenticate(pkceManager, data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee73() {
        var pkPair, _yield$this$dfpProtec20, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee73$(_context73) {
          while (1) switch (_context73.prev = _context73.next) {
            case 0:
              _context73.next = 2;
              return pkceManager.getPKPair();
            case 2:
              pkPair = _context73.sent;
              _context73.next = 5;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 5:
              _yield$this$dfpProtec20 = _context73.sent;
              dfp_telemetry_id = _yield$this$dfpProtec20.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec20.captcha_token;
              _context73.t0 = Object;
              _context73.t1 = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context73.t2 = dfp_telemetry_id;
              _context73.t3 = captcha_token;
              _context73.next = 14;
              return this._subscriptionService.getIntermediateSessionToken();
            case 14:
              _context73.t4 = _context73.sent;
              if (_context73.t4) {
                _context73.next = 17;
                break;
              }
              _context73.t4 = undefined;
            case 17:
              _context73.t5 = _context73.t4;
              _context73.t6 = {
                pkce_code_verifier: _context73.t1,
                dfp_telemetry_id: _context73.t2,
                captcha_token: _context73.t3,
                intermediate_session_token: _context73.t5
              };
              _context73.t7 = data;
              requestBody = _context73.t0.assign.call(_context73.t0, _context73.t6, _context73.t7);
              _context73.next = 23;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/magic_links/authenticate',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 23:
              resp = _context73.sent;
              pkceManager.clearPKPair();
              return _context73.abrupt("return", resp);
            case 26:
            case "end":
              return _context73.stop();
          }
        }, _callee73, this);
      }));
    }
  }]);
}();
var HeadlessB2BSelfClient = /*#__PURE__*/_createClass(function HeadlessB2BSelfClient(_networkClient, _apiNetworkClient, _subscriptionService) {
  var _this15 = this;
  _classCallCheck(this, HeadlessB2BSelfClient);
  this._networkClient = _networkClient;
  this._apiNetworkClient = _apiNetworkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee74$(_context74) {
        while (1) switch (_context74.prev = _context74.next) {
          case 0:
            _context74.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/me",
              method: 'GET'
            });
          case 2:
            resp = _context74.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context74.abrupt("return", resp.member);
          case 5:
          case "end":
            return _context74.stop();
        }
      }, _callee74, this);
    }));
  };
  this.getSync = function () {
    return _this15._subscriptionService.getMember();
  };
  this.getInfo = function () {
    return {
      member: _this15.getSync(),
      fromCache: _this15._subscriptionService.getFromCache()
    };
  };
  this.onChange = function (callback) {
    return _this15._subscriptionService.subscribeToState(function (state) {
      var _a;
      return callback((_a = state === null || state === void 0 ? void 0 : state.member) !== null && _a !== void 0 ? _a : null);
    });
  };
  this.update = function (data) {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee75$(_context75) {
        while (1) switch (_context75.prev = _context75.next) {
          case 0:
            validate('stytch.self.update').isOptionalString('name', data.name).isOptionalObject('untrusted_metadata', data.untrusted_metadata).isOptionalBoolean('mfa_enrolled', data.mfa_enrolled).isOptionalString('mfa_phone_number', data.mfa_phone_number).isOptionalString('default_mfa_method', data.default_mfa_method);
            _context75.next = 3;
            return this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/update',
              body: data,
              method: 'PUT'
            });
          case 3:
            resp = _context75.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context75.abrupt("return", resp);
          case 6:
          case "end":
            return _context75.stop();
        }
      }, _callee75, this);
    }));
  };
  this.deleteMFAPhoneNumber = function () {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee76$(_context76) {
        while (1) switch (_context76.prev = _context76.next) {
          case 0:
            _context76.next = 2;
            return this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/deletePhoneNumber',
              method: 'DELETE'
            });
          case 2:
            resp = _context76.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context76.abrupt("return", resp);
          case 5:
          case "end":
            return _context76.stop();
        }
      }, _callee76, this);
    }));
  };
  this.deleteMFATOTP = function () {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee77() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee77$(_context77) {
        while (1) switch (_context77.prev = _context77.next) {
          case 0:
            _context77.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/deleteTOTP",
              method: 'DELETE'
            });
          case 2:
            resp = _context77.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context77.abrupt("return", resp);
          case 5:
          case "end":
            return _context77.stop();
        }
      }, _callee77, this);
    }));
  };
  this.deletePassword = function (passwordId) {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee78() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee78$(_context78) {
        while (1) switch (_context78.prev = _context78.next) {
          case 0:
            _context78.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/passwords/".concat(passwordId),
              method: 'DELETE'
            });
          case 2:
            resp = _context78.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context78.abrupt("return", resp);
          case 5:
          case "end":
            return _context78.stop();
        }
      }, _callee78, this);
    }));
  };
  this.unlinkRetiredEmail = function (data) {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee79() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee79$(_context79) {
        while (1) switch (_context79.prev = _context79.next) {
          case 0:
            _context79.next = 2;
            return this._apiNetworkClient.fetchSDK({
              url: '/b2b/organizations/members/unlink_retired_email',
              method: 'POST',
              body: data
            });
          case 2:
            resp = _context79.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context79.abrupt("return", resp);
          case 5:
          case "end":
            return _context79.stop();
        }
      }, _callee79, this);
    }));
  };
  this.startEmailUpdate = function (data) {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee80() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee80$(_context80) {
        while (1) switch (_context80.prev = _context80.next) {
          case 0:
            _context80.next = 2;
            return this._apiNetworkClient.fetchSDK({
              url: '/b2b/organizations/members/start_email_update',
              method: 'POST',
              body: data
            });
          case 2:
            resp = _context80.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context80.abrupt("return", resp);
          case 5:
          case "end":
            return _context80.stop();
        }
      }, _callee80, this);
    }));
  };
  this.getConnectedApps = function () {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {
      return _regeneratorRuntime().wrap(function _callee81$(_context81) {
        while (1) switch (_context81.prev = _context81.next) {
          case 0:
            return _context81.abrupt("return", this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/connected_apps',
              method: 'GET'
            }));
          case 1:
          case "end":
            return _context81.stop();
        }
      }, _callee81, this);
    }));
  };
  this.revokeConnectedApp = function (data) {
    return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {
      return _regeneratorRuntime().wrap(function _callee82$(_context82) {
        while (1) switch (_context82.prev = _context82.next) {
          case 0:
            return _context82.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/connected_apps/".concat(data.connected_app_id, "/revoke"),
              method: 'POST'
            }));
          case 1:
          case "end":
            return _context82.stop();
        }
      }, _callee82, this);
    }));
  };
});
var HeadlessB2BSSOClient = /*#__PURE__*/function () {
  function HeadlessB2BSSOClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config, dfpProtectedAuth) {
    var _this16 = this;
    _classCallCheck(this, HeadlessB2BSSOClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.saml = {
      createConnection: function createConnection(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee83() {
          return _regeneratorRuntime().wrap(function _callee83$(_context83) {
            while (1) switch (_context83.prev = _context83.next) {
              case 0:
                _context83.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/saml',
                  method: 'POST',
                  body: data
                });
              case 2:
                return _context83.abrupt("return", _context83.sent);
              case 3:
              case "end":
                return _context83.stop();
            }
          }, _callee83, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee84() {
          return _regeneratorRuntime().wrap(function _callee84$(_context84) {
            while (1) switch (_context84.prev = _context84.next) {
              case 0:
                _context84.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context84.abrupt("return", _context84.sent);
              case 3:
              case "end":
                return _context84.stop();
            }
          }, _callee84, this);
        }));
      },
      updateConnectionByURL: function updateConnectionByURL(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee85() {
          return _regeneratorRuntime().wrap(function _callee85$(_context85) {
            while (1) switch (_context85.prev = _context85.next) {
              case 0:
                _context85.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/url"),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context85.abrupt("return", _context85.sent);
              case 3:
              case "end":
                return _context85.stop();
            }
          }, _callee85, this);
        }));
      },
      deleteVerificationCertificate: function deleteVerificationCertificate(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee86() {
          return _regeneratorRuntime().wrap(function _callee86$(_context86) {
            while (1) switch (_context86.prev = _context86.next) {
              case 0:
                _context86.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/verification_certificates/").concat(data.certificate_id),
                  method: 'DELETE'
                });
              case 2:
                return _context86.abrupt("return", _context86.sent);
              case 3:
              case "end":
                return _context86.stop();
            }
          }, _callee86, this);
        }));
      },
      deleteEncryptionPrivateKey: function deleteEncryptionPrivateKey(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee87() {
          return _regeneratorRuntime().wrap(function _callee87$(_context87) {
            while (1) switch (_context87.prev = _context87.next) {
              case 0:
                _context87.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/encryption_private_key/").concat(data.private_key_id),
                  method: 'DELETE'
                });
              case 2:
                return _context87.abrupt("return", _context87.sent);
              case 3:
              case "end":
                return _context87.stop();
            }
          }, _callee87, this);
        }));
      }
    };
    this.oidc = {
      createConnection: function createConnection(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee88() {
          return _regeneratorRuntime().wrap(function _callee88$(_context88) {
            while (1) switch (_context88.prev = _context88.next) {
              case 0:
                _context88.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/oidc',
                  method: 'POST',
                  body: data
                });
              case 2:
                return _context88.abrupt("return", _context88.sent);
              case 3:
              case "end":
                return _context88.stop();
            }
          }, _callee88, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee89() {
          return _regeneratorRuntime().wrap(function _callee89$(_context89) {
            while (1) switch (_context89.prev = _context89.next) {
              case 0:
                _context89.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/oidc/".concat(data.connection_id),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context89.abrupt("return", _context89.sent);
              case 3:
              case "end":
                return _context89.stop();
            }
          }, _callee89, this);
        }));
      }
    };
    this.external = {
      createConnection: function createConnection(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee90() {
          return _regeneratorRuntime().wrap(function _callee90$(_context90) {
            while (1) switch (_context90.prev = _context90.next) {
              case 0:
                _context90.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/external',
                  method: 'POST',
                  body: data
                });
              case 2:
                return _context90.abrupt("return", _context90.sent);
              case 3:
              case "end":
                return _context90.stop();
            }
          }, _callee90, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee91() {
          return _regeneratorRuntime().wrap(function _callee91$(_context91) {
            while (1) switch (_context91.prev = _context91.next) {
              case 0:
                _context91.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/external/".concat(data.connection_id),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context91.abrupt("return", _context91.sent);
              case 3:
              case "end":
                return _context91.stop();
            }
          }, _callee91, this);
        }));
      }
    };
  }
  return _createClass(HeadlessB2BSSOClient, [{
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee92() {
        var keyPair, _yield$this$dfpProtec21, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee92$(_context92) {
          while (1) switch (_context92.prev = _context92.next) {
            case 0:
              validate('stytch.sso.authenticate').isString('sso_token', options.sso_token).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context92.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context92.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for SSO flow.\n' + 'Consider using stytch.sso.start() to add PKCE to your SSO flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context92.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec21 = _context92.sent;
              dfp_telemetry_id = _yield$this$dfpProtec21.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec21.captcha_token;
              _context92.t0 = this._networkClient;
              _context92.t1 = Object;
              _context92.t2 = Object.assign({
                pkce_code_verifier: keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier
              }, options);
              _context92.t3 = dfp_telemetry_id;
              _context92.t4 = captcha_token;
              _context92.next = 17;
              return this._subscriptionService.getIntermediateSessionToken();
            case 17:
              _context92.t5 = _context92.sent;
              if (_context92.t5) {
                _context92.next = 20;
                break;
              }
              _context92.t5 = undefined;
            case 20:
              _context92.t6 = _context92.t5;
              _context92.t7 = {
                dfp_telemetry_id: _context92.t3,
                captcha_token: _context92.t4,
                intermediate_session_token: _context92.t6
              };
              _context92.t8 = _context92.t1.assign.call(_context92.t1, _context92.t2, _context92.t7);
              _context92.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context92.t10 = {
                url: '/b2b/sso/authenticate',
                method: 'POST',
                body: _context92.t8,
                retryCallback: _context92.t9
              };
              _context92.next = 27;
              return _context92.t0.retriableFetchSDK.call(_context92.t0, _context92.t10);
            case 27:
              resp = _context92.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context92.abrupt("return", resp);
            case 31:
            case "end":
              return _context92.stop();
          }
        }, _callee92, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {
        return _regeneratorRuntime().wrap(function _callee93$(_context93) {
          while (1) switch (_context93.prev = _context93.next) {
            case 0:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context93.next = 2;
                break;
              }
              return _context93.abrupt("return", this._config.testAPIURL);
            case 2:
              return _context93.abrupt("return", this._config.liveAPIURL);
            case 3:
            case "end":
              return _context93.stop();
          }
        }, _callee93, this);
      }));
    }
  }, {
    key: "start",
    value: function start(_ref7) {
      var connection_id = _ref7.connection_id,
        login_redirect_url = _ref7.login_redirect_url,
        signup_redirect_url = _ref7.signup_redirect_url;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee94() {
        var _yield$this$_dynamicC3, pkceRequiredForSso, baseURL, startUrl, keyPair;
        return _regeneratorRuntime().wrap(function _callee94$(_context94) {
          while (1) switch (_context94.prev = _context94.next) {
            case 0:
              _context94.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC3 = _context94.sent;
              pkceRequiredForSso = _yield$this$_dynamicC3.pkceRequiredForSso;
              _context94.next = 6;
              return this.getBaseApiUrl();
            case 6:
              baseURL = _context94.sent;
              startUrl = new URL("".concat(baseURL, "/v1/public/sso/start"));
              startUrl.searchParams.set('public_token', this._config.publicToken);
              startUrl.searchParams.set('connection_id', connection_id);
              if (!pkceRequiredForSso) {
                _context94.next = 17;
                break;
              }
              _context94.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context94.sent;
              startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
              _context94.next = 18;
              break;
            case 17:
              this._pkceManager.clearPKPair();
            case 18:
              login_redirect_url && startUrl.searchParams.set('login_redirect_url', login_redirect_url);
              signup_redirect_url && startUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
              window.location.href = startUrl.toString();
            case 21:
            case "end":
              return _context94.stop();
          }
        }, _callee94, this);
      }));
    }
  }, {
    key: "getConnections",
    value: function getConnections() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {
        return _regeneratorRuntime().wrap(function _callee95$(_context95) {
          while (1) switch (_context95.prev = _context95.next) {
            case 0:
              _context95.next = 2;
              return this._networkClient.fetchSDK({
                url: '/b2b/sso',
                method: 'GET'
              });
            case 2:
              return _context95.abrupt("return", _context95.sent);
            case 3:
            case "end":
              return _context95.stop();
          }
        }, _callee95, this);
      }));
    }
  }, {
    key: "discoverConnections",
    value: function discoverConnections(emailAddress) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
        return _regeneratorRuntime().wrap(function _callee96$(_context96) {
          while (1) switch (_context96.prev = _context96.next) {
            case 0:
              _context96.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/sso/discovery/connections?email_address=".concat(encodeURIComponent(emailAddress)),
                method: 'GET'
              });
            case 2:
              return _context96.abrupt("return", _context96.sent);
            case 3:
            case "end":
              return _context96.stop();
          }
        }, _callee96, this);
      }));
    }
  }, {
    key: "deleteConnection",
    value: function deleteConnection(connectionId) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
        return _regeneratorRuntime().wrap(function _callee97$(_context97) {
          while (1) switch (_context97.prev = _context97.next) {
            case 0:
              return _context97.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/sso/".concat(connectionId),
                method: 'DELETE'
              }));
            case 1:
            case "end":
              return _context97.stop();
          }
        }, _callee97, this);
      }));
    }
  }]);
}();
var HeadlessB2BSCIMClient = /*#__PURE__*/function () {
  function HeadlessB2BSCIMClient(_networkClient, _subscriptionService) {
    _classCallCheck(this, HeadlessB2BSCIMClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
  }
  return _createClass(HeadlessB2BSCIMClient, [{
    key: "createConnection",
    value: function createConnection(data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee98() {
        return _regeneratorRuntime().wrap(function _callee98$(_context98) {
          while (1) switch (_context98.prev = _context98.next) {
            case 0:
              validate('stytch.scim.createConnection').isOptionalString('display_name', data.display_name).isOptionalString('identity_provider', data.identity_provider);
              _context98.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim',
                method: 'POST',
                body: data
              });
            case 3:
              return _context98.abrupt("return", _context98.sent);
            case 4:
            case "end":
              return _context98.stop();
          }
        }, _callee98, this);
      }));
    }
  }, {
    key: "updateConnection",
    value: function updateConnection(data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee99() {
        return _regeneratorRuntime().wrap(function _callee99$(_context99) {
          while (1) switch (_context99.prev = _context99.next) {
            case 0:
              validate('stytch.scim.updateConnection').isString('connection_id', data.connection_id).isOptionalString('display_name', data.display_name).isOptionalString('identity_provider', data.identity_provider);
              _context99.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/".concat(data.connection_id),
                method: 'PUT',
                body: data
              });
            case 3:
              return _context99.abrupt("return", _context99.sent);
            case 4:
            case "end":
              return _context99.stop();
          }
        }, _callee99, this);
      }));
    }
  }, {
    key: "deleteConnection",
    value: function deleteConnection(connectionId) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {
        return _regeneratorRuntime().wrap(function _callee100$(_context100) {
          while (1) switch (_context100.prev = _context100.next) {
            case 0:
              validate('stytch.scim.deleteConnection').isString('connection_id', connectionId);
              _context100.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/".concat(connectionId),
                method: 'DELETE'
              });
            case 3:
              return _context100.abrupt("return", _context100.sent);
            case 4:
            case "end":
              return _context100.stop();
          }
        }, _callee100, this);
      }));
    }
  }, {
    key: "getConnection",
    value: function getConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee101() {
        return _regeneratorRuntime().wrap(function _callee101$(_context101) {
          while (1) switch (_context101.prev = _context101.next) {
            case 0:
              _context101.next = 2;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim',
                method: 'GET'
              });
            case 2:
              return _context101.abrupt("return", _context101.sent);
            case 3:
            case "end":
              return _context101.stop();
          }
        }, _callee101, this);
      }));
    }
  }, {
    key: "getConnectionGroups",
    value: function getConnectionGroups(data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee102() {
        return _regeneratorRuntime().wrap(function _callee102$(_context102) {
          while (1) switch (_context102.prev = _context102.next) {
            case 0:
              validate('stytch.scim.getConnectionGroups').isOptionalNumber('limit', data.limit).isOptionalString('cursor', data.cursor);
              _context102.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim/groups',
                method: 'POST',
                body: data
              });
            case 3:
              return _context102.abrupt("return", _context102.sent);
            case 4:
            case "end":
              return _context102.stop();
          }
        }, _callee102, this);
      }));
    }
  }, {
    key: "rotateStart",
    value: function rotateStart(connectionId) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee103() {
        return _regeneratorRuntime().wrap(function _callee103$(_context103) {
          while (1) switch (_context103.prev = _context103.next) {
            case 0:
              validate('stytch.scim.rotateStart').isString('connectionId', connectionId);
              _context103.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/start",
                method: 'POST',
                body: {
                  connection_id: connectionId
                }
              });
            case 3:
              return _context103.abrupt("return", _context103.sent);
            case 4:
            case "end":
              return _context103.stop();
          }
        }, _callee103, this);
      }));
    }
  }, {
    key: "rotateComplete",
    value: function rotateComplete(connectionId) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee104() {
        return _regeneratorRuntime().wrap(function _callee104$(_context104) {
          while (1) switch (_context104.prev = _context104.next) {
            case 0:
              validate('stytch.scim.rotateComplete').isString('connectionId', connectionId);
              _context104.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/complete",
                method: 'POST',
                body: {
                  connection_id: connectionId
                }
              });
            case 3:
              return _context104.abrupt("return", _context104.sent);
            case 4:
            case "end":
              return _context104.stop();
          }
        }, _callee104, this);
      }));
    }
  }, {
    key: "rotateCancel",
    value: function rotateCancel(connectionId) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee105() {
        return _regeneratorRuntime().wrap(function _callee105$(_context105) {
          while (1) switch (_context105.prev = _context105.next) {
            case 0:
              validate('stytch.scim.rotateCancel').isString('connectionId', connectionId);
              _context105.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/cancel",
                method: 'POST',
                body: {
                  connection_id: connectionId
                }
              });
            case 3:
              return _context105.abrupt("return", _context105.sent);
            case 4:
            case "end":
              return _context105.stop();
          }
        }, _callee105, this);
      }));
    }
  }]);
}();
var HeadlessB2BOrganizationClient = /*#__PURE__*/_createClass(function HeadlessB2BOrganizationClient(_networkClient, _apiNetworkClient, _subscriptionService) {
  var _this17 = this;
  _classCallCheck(this, HeadlessB2BOrganizationClient);
  this._networkClient = _networkClient;
  this._apiNetworkClient = _apiNetworkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee106() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee106$(_context106) {
        while (1) switch (_context106.prev = _context106.next) {
          case 0:
            _context106.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              method: 'GET'
            });
          case 2:
            resp = _context106.sent;
            this._subscriptionService.updateOrganization(resp.organization);
            return _context106.abrupt("return", resp.organization);
          case 5:
          case "end":
            return _context106.stop();
        }
      }, _callee106, this);
    }));
  };
  this.getSync = function () {
    return _this17._subscriptionService.getOrganization();
  };
  this.getInfo = function () {
    return {
      organization: _this17.getSync(),
      fromCache: _this17._subscriptionService.getFromCache()
    };
  };
  this.onChange = function (callback) {
    return _this17._subscriptionService.subscribeToState(function (state) {
      var _a;
      return callback((_a = state === null || state === void 0 ? void 0 : state.organization) !== null && _a !== void 0 ? _a : null);
    });
  };
  this.update = function (data) {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee107() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee107$(_context107) {
        while (1) switch (_context107.prev = _context107.next) {
          case 0:
            _context107.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              method: 'PUT',
              body: data
            });
          case 2:
            resp = _context107.sent;
            this._subscriptionService.updateOrganization(resp.organization);
            return _context107.abrupt("return", resp);
          case 5:
          case "end":
            return _context107.stop();
        }
      }, _callee107, this);
    }));
  };
  this["delete"] = function () {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee108() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee108$(_context108) {
        while (1) switch (_context108.prev = _context108.next) {
          case 0:
            _context108.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              method: 'DELETE'
            });
          case 2:
            resp = _context108.sent;
            this._subscriptionService.destroyState();
            return _context108.abrupt("return", resp);
          case 5:
          case "end":
            return _context108.stop();
        }
      }, _callee108, this);
    }));
  };
  this.getBySlug = function (data) {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee109() {
      return _regeneratorRuntime().wrap(function _callee109$(_context109) {
        while (1) switch (_context109.prev = _context109.next) {
          case 0:
            validate('stytch.organization.getBySlug').isString('organization_slug', data.organization_slug);
            return _context109.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/search",
              method: 'POST',
              body: data
            }));
          case 2:
          case "end":
            return _context109.stop();
        }
      }, _callee109, this);
    }));
  };
  this.getConnectedApps = function () {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee110() {
      return _regeneratorRuntime().wrap(function _callee110$(_context110) {
        while (1) switch (_context110.prev = _context110.next) {
          case 0:
            return _context110.abrupt("return", this._networkClient.fetchSDK({
              url: '/b2b/organizations/connected_apps',
              method: 'GET'
            }));
          case 1:
          case "end":
            return _context110.stop();
        }
      }, _callee110, this);
    }));
  };
  this.getConnectedApp = function (data) {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee111() {
      return _regeneratorRuntime().wrap(function _callee111$(_context111) {
        while (1) switch (_context111.prev = _context111.next) {
          case 0:
            return _context111.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/connected_apps/".concat(data.connected_app_id),
              method: 'GET'
            }));
          case 1:
          case "end":
            return _context111.stop();
        }
      }, _callee111, this);
    }));
  };
  this.members = {
    create: function create(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee112() {
        return _regeneratorRuntime().wrap(function _callee112$(_context112) {
          while (1) switch (_context112.prev = _context112.next) {
            case 0:
              return _context112.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members",
                method: 'POST',
                body: data
              }));
            case 1:
            case "end":
              return _context112.stop();
          }
        }, _callee112, this);
      }));
    },
    search: function search(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee113() {
        return _regeneratorRuntime().wrap(function _callee113$(_context113) {
          while (1) switch (_context113.prev = _context113.next) {
            case 0:
              return _context113.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/me/members/search",
                method: 'POST',
                body: data
              }));
            case 1:
            case "end":
              return _context113.stop();
          }
        }, _callee113, this);
      }));
    },
    update: function update(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee114() {
        var response;
        return _regeneratorRuntime().wrap(function _callee114$(_context114) {
          while (1) switch (_context114.prev = _context114.next) {
            case 0:
              _context114.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(data.member_id),
                method: 'PUT',
                body: data
              });
            case 2:
              response = _context114.sent;
              this.updateMemberIfSelf(response);
              return _context114.abrupt("return", response);
            case 5:
            case "end":
              return _context114.stop();
          }
        }, _callee114, this);
      }));
    },
    deletePassword: function deletePassword(passwordId) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee115() {
        var response;
        return _regeneratorRuntime().wrap(function _callee115$(_context115) {
          while (1) switch (_context115.prev = _context115.next) {
            case 0:
              _context115.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/passwords/".concat(passwordId),
                method: 'DELETE'
              });
            case 2:
              response = _context115.sent;
              this.updateMemberIfSelf(response);
              return _context115.abrupt("return", response);
            case 5:
            case "end":
              return _context115.stop();
          }
        }, _callee115, this);
      }));
    },
    deleteMFAPhoneNumber: function deleteMFAPhoneNumber(memberId) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee116() {
        var response;
        return _regeneratorRuntime().wrap(function _callee116$(_context116) {
          while (1) switch (_context116.prev = _context116.next) {
            case 0:
              _context116.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/mfa_phone_numbers/".concat(memberId),
                method: 'DELETE'
              });
            case 2:
              response = _context116.sent;
              this.updateMemberIfSelf(response);
              return _context116.abrupt("return", response);
            case 5:
            case "end":
              return _context116.stop();
          }
        }, _callee116, this);
      }));
    },
    deleteMFATOTP: function deleteMFATOTP(memberId) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee117() {
        var response;
        return _regeneratorRuntime().wrap(function _callee117$(_context117) {
          while (1) switch (_context117.prev = _context117.next) {
            case 0:
              _context117.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/totp/".concat(memberId),
                method: 'DELETE'
              });
            case 2:
              response = _context117.sent;
              this.updateMemberIfSelf(response);
              return _context117.abrupt("return", response);
            case 5:
            case "end":
              return _context117.stop();
          }
        }, _callee117, this);
      }));
    },
    "delete": function _delete(memberId) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee118() {
        var _a, response;
        return _regeneratorRuntime().wrap(function _callee118$(_context118) {
          while (1) switch (_context118.prev = _context118.next) {
            case 0:
              _context118.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(memberId),
                method: 'DELETE'
              });
            case 2:
              response = _context118.sent;
              if (memberId === ((_a = this._subscriptionService.getMember()) === null || _a === void 0 ? void 0 : _a.member_id)) {
                this._subscriptionService.destroyState();
              }
              return _context118.abrupt("return", response);
            case 5:
            case "end":
              return _context118.stop();
          }
        }, _callee118, this);
      }));
    },
    reactivate: function reactivate(memberId) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee119() {
        return _regeneratorRuntime().wrap(function _callee119$(_context119) {
          while (1) switch (_context119.prev = _context119.next) {
            case 0:
              return _context119.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(memberId, "/reactivate"),
                method: 'PUT'
              }));
            case 1:
            case "end":
              return _context119.stop();
          }
        }, _callee119, this);
      }));
    },
    unlinkRetiredEmail: function unlinkRetiredEmail(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee120() {
        var member_id, body, response;
        return _regeneratorRuntime().wrap(function _callee120$(_context120) {
          while (1) switch (_context120.prev = _context120.next) {
            case 0:
              member_id = data.member_id, body = __rest(data, ["member_id"]);
              _context120.next = 3;
              return this._apiNetworkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(member_id, "/unlink_retired_email"),
                method: 'POST',
                body: body
              });
            case 3:
              response = _context120.sent;
              this.updateMemberIfSelf(response);
              return _context120.abrupt("return", response);
            case 6:
            case "end":
              return _context120.stop();
          }
        }, _callee120, this);
      }));
    },
    startEmailUpdate: function startEmailUpdate(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee121() {
        var member_id, body, response;
        return _regeneratorRuntime().wrap(function _callee121$(_context121) {
          while (1) switch (_context121.prev = _context121.next) {
            case 0:
              member_id = data.member_id, body = __rest(data, ["member_id"]);
              _context121.next = 3;
              return this._apiNetworkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(member_id, "/start_email_update"),
                method: 'POST',
                body: body
              });
            case 3:
              response = _context121.sent;
              this.updateMemberIfSelf(response);
              return _context121.abrupt("return", response);
            case 6:
            case "end":
              return _context121.stop();
          }
        }, _callee121, this);
      }));
    },
    getConnectedApps: function getConnectedApps(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee122() {
        return _regeneratorRuntime().wrap(function _callee122$(_context122) {
          while (1) switch (_context122.prev = _context122.next) {
            case 0:
              return _context122.abrupt("return", this._networkClient.fetchSDK({
                url: "b2b/organizations/members/".concat(data.member_id, "/connected_apps"),
                method: 'GET'
              }));
            case 1:
            case "end":
              return _context122.stop();
          }
        }, _callee122, this);
      }));
    },
    revokeConnectedApp: function revokeConnectedApp(data) {
      return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee123() {
        return _regeneratorRuntime().wrap(function _callee123$(_context123) {
          while (1) switch (_context123.prev = _context123.next) {
            case 0:
              return _context123.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(data.member_id, "/connected_apps/").concat(data.connected_app_id, "/revoke"),
                method: 'POST'
              }));
            case 1:
            case "end":
              return _context123.stop();
          }
        }, _callee123, this);
      }));
    }
  };
  this.updateMemberIfSelf = function (response) {
    var _a;
    if (response.member_id === ((_a = _this17._subscriptionService.getMember()) === null || _a === void 0 ? void 0 : _a.member_id)) {
      _this17._subscriptionService.updateMember(response.member);
    }
  };
});
var HeadlessB2BOAuthClient = /*#__PURE__*/function () {
  function HeadlessB2BOAuthClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config, dfpProtectedAuth) {
    var _this18 = this;
    _classCallCheck(this, HeadlessB2BOAuthClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.discovery = {
      authenticate: function authenticate(data) {
        return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee124() {
          var pkPair, _yield$this$dfpProtec22, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee124$(_context124) {
            while (1) switch (_context124.prev = _context124.next) {
              case 0:
                validate('stytch.oauth.discovery.authenticate').isString('discovery_oauth_token', data.discovery_oauth_token);
                _context124.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context124.sent;
                _context124.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec22 = _context124.sent;
                dfp_telemetry_id = _yield$this$dfpProtec22.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec22.captcha_token;
                requestBody = Object.assign({
                  pkce_code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context124.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/oauth/discovery/authenticate',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context124.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateSession(resp);
                return _context124.abrupt("return", resp);
              case 16:
              case "end":
                return _context124.stop();
            }
          }, _callee124, this);
        }));
      }
    };
    this.google = {
      start: this.startOAuthFlow(ui.B2BOAuthProviders.Google),
      discovery: {
        start: this.startDiscoveryOAuthFlow(ui.B2BOAuthProviders.Google)
      }
    };
    this.microsoft = {
      start: this.startOAuthFlow(ui.B2BOAuthProviders.Microsoft),
      discovery: {
        start: this.startDiscoveryOAuthFlow(ui.B2BOAuthProviders.Microsoft)
      }
    };
    this.hubspot = {
      start: this.startOAuthFlow(ui.B2BOAuthProviders.HubSpot),
      discovery: {
        start: this.startDiscoveryOAuthFlow(ui.B2BOAuthProviders.HubSpot)
      }
    };
    this.slack = {
      start: this.startOAuthFlow(ui.B2BOAuthProviders.Slack),
      discovery: {
        start: this.startDiscoveryOAuthFlow(ui.B2BOAuthProviders.Slack)
      }
    };
    this.github = {
      start: this.startOAuthFlow(ui.B2BOAuthProviders.GitHub),
      discovery: {
        start: this.startDiscoveryOAuthFlow(ui.B2BOAuthProviders.GitHub)
      }
    };
  }
  return _createClass(HeadlessB2BOAuthClient, [{
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee125() {
        var keyPair, _yield$this$dfpProtec23, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee125$(_context125) {
          while (1) switch (_context125.prev = _context125.next) {
            case 0:
              validate('stytch.oauth.authenticate').isString('oauth_token', options.oauth_token).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context125.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context125.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for OAuth flow.\n' + 'Consider using stytch.oauth.$provider.start() to add PKCE to your OAuth flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context125.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec23 = _context125.sent;
              dfp_telemetry_id = _yield$this$dfpProtec23.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec23.captcha_token;
              _context125.t0 = this._networkClient;
              _context125.t1 = Object;
              _context125.t2 = keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier;
              _context125.t3 = dfp_telemetry_id;
              _context125.t4 = captcha_token;
              _context125.next = 17;
              return this._subscriptionService.getIntermediateSessionToken();
            case 17:
              _context125.t5 = _context125.sent;
              if (_context125.t5) {
                _context125.next = 20;
                break;
              }
              _context125.t5 = undefined;
            case 20:
              _context125.t6 = _context125.t5;
              _context125.t7 = {
                pkce_code_verifier: _context125.t2,
                dfp_telemetry_id: _context125.t3,
                captcha_token: _context125.t4,
                intermediate_session_token: _context125.t6
              };
              _context125.t8 = options;
              _context125.t9 = _context125.t1.assign.call(_context125.t1, _context125.t7, _context125.t8);
              _context125.t10 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context125.t11 = {
                url: '/b2b/oauth/authenticate',
                method: 'POST',
                body: _context125.t9,
                retryCallback: _context125.t10
              };
              _context125.next = 28;
              return _context125.t0.retriableFetchSDK.call(_context125.t0, _context125.t11);
            case 28:
              resp = _context125.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context125.abrupt("return", resp);
            case 32:
            case "end":
              return _context125.stop();
          }
        }, _callee125, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee126() {
        var _yield$this$_dynamicC4, cnameDomain;
        return _regeneratorRuntime().wrap(function _callee126$(_context126) {
          while (1) switch (_context126.prev = _context126.next) {
            case 0:
              _context126.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC4 = _context126.sent;
              cnameDomain = _yield$this$_dynamicC4.cnameDomain;
              if (!cnameDomain) {
                _context126.next = 6;
                break;
              }
              return _context126.abrupt("return", "https://".concat(cnameDomain));
            case 6:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context126.next = 8;
                break;
              }
              return _context126.abrupt("return", this._config.testAPIURL);
            case 8:
              return _context126.abrupt("return", this._config.liveAPIURL);
            case 9:
            case "end":
              return _context126.stop();
          }
        }, _callee126, this);
      }));
    }
  }, {
    key: "startOAuthFlow",
    value: function startOAuthFlow(providerType) {
      var _this19 = this;
      return function (_ref8) {
        var organization_id = _ref8.organization_id,
          organization_slug = _ref8.organization_slug,
          login_redirect_url = _ref8.login_redirect_url,
          signup_redirect_url = _ref8.signup_redirect_url,
          custom_scopes = _ref8.custom_scopes,
          provider_params = _ref8.provider_params;
        return __awaiter(_this19, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee127() {
          var _yield$this$_dynamicC5, pkceRequiredForOAuth, baseURL, startUrl, key, keyPair;
          return _regeneratorRuntime().wrap(function _callee127$(_context127) {
            while (1) switch (_context127.prev = _context127.next) {
              case 0:
                _context127.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC5 = _context127.sent;
                pkceRequiredForOAuth = _yield$this$_dynamicC5.pkceRequiredForOAuth;
                _context127.next = 6;
                return this.getBaseApiUrl();
              case 6:
                baseURL = _context127.sent;
                startUrl = new URL("".concat(baseURL, "/v1/b2b/public/oauth/").concat(providerType, "/start"));
                startUrl.searchParams.set('public_token', this._config.publicToken);
                if (organization_id && organization_id != '') {
                  startUrl.searchParams.set('organization_id', organization_id);
                }
                if (organization_slug && organization_slug != '') {
                  startUrl.searchParams.set('slug', organization_slug);
                }
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  startUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    startUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                if (!pkceRequiredForOAuth) {
                  _context127.next = 20;
                  break;
                }
                _context127.next = 16;
                return this._pkceManager.startPKCETransaction();
              case 16:
                keyPair = _context127.sent;
                startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
                _context127.next = 21;
                break;
              case 20:
                this._pkceManager.clearPKPair();
              case 21:
                login_redirect_url && startUrl.searchParams.set('login_redirect_url', login_redirect_url);
                signup_redirect_url && startUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
                window.location.href = startUrl.toString();
              case 24:
              case "end":
                return _context127.stop();
            }
          }, _callee127, this);
        }));
      };
    }
  }, {
    key: "startDiscoveryOAuthFlow",
    value: function startDiscoveryOAuthFlow(providerType) {
      var _this20 = this;
      return function (_ref9) {
        var discovery_redirect_url = _ref9.discovery_redirect_url,
          custom_scopes = _ref9.custom_scopes,
          provider_params = _ref9.provider_params;
        return __awaiter(_this20, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee128() {
          var _yield$this$_dynamicC6, pkceRequiredForOAuth, baseURL, startUrl, key, keyPair;
          return _regeneratorRuntime().wrap(function _callee128$(_context128) {
            while (1) switch (_context128.prev = _context128.next) {
              case 0:
                _context128.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC6 = _context128.sent;
                pkceRequiredForOAuth = _yield$this$_dynamicC6.pkceRequiredForOAuth;
                _context128.next = 6;
                return this.getBaseApiUrl();
              case 6:
                baseURL = _context128.sent;
                startUrl = new URL("".concat(baseURL, "/v1/b2b/public/oauth/").concat(providerType, "/discovery/start"));
                startUrl.searchParams.set('public_token', this._config.publicToken);
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  startUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    startUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                if (!pkceRequiredForOAuth) {
                  _context128.next = 18;
                  break;
                }
                _context128.next = 14;
                return this._pkceManager.startPKCETransaction();
              case 14:
                keyPair = _context128.sent;
                startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
                _context128.next = 19;
                break;
              case 18:
                this._pkceManager.clearPKPair();
              case 19:
                discovery_redirect_url && startUrl.searchParams.set('discovery_redirect_url', discovery_redirect_url);
                window.location.href = startUrl.toString();
              case 21:
              case "end":
                return _context128.stop();
            }
          }, _callee128, this);
        }));
      };
    }
  }]);
}();
var HeadlessB2BSessionClient = /*#__PURE__*/function () {
  function HeadlessB2BSessionClient(_networkClient, _subscriptionService) {
    var _this21 = this;
    _classCallCheck(this, HeadlessB2BSessionClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.getSync = function () {
      return _this21._subscriptionService.getSession();
    };
    this.getInfo = function () {
      return {
        session: _this21.getSync(),
        fromCache: _this21._subscriptionService.getFromCache()
      };
    };
    this.onChange = function (callback) {
      return _this21._subscriptionService.subscribeToState(function (state) {
        var _a;
        return callback((_a = state === null || state === void 0 ? void 0 : state.session) !== null && _a !== void 0 ? _a : null);
      });
    };
    this.revoke = function (options) {
      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee129() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee129$(_context129) {
          while (1) switch (_context129.prev = _context129.next) {
            case 0:
              _context129.prev = 0;
              _context129.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/sessions/revoke",
                method: 'POST'
              });
            case 3:
              resp = _context129.sent;
              this._subscriptionService.destroyState();
              return _context129.abrupt("return", resp);
            case 8:
              _context129.prev = 8;
              _context129.t0 = _context129["catch"](0);
              if (!!(options === null || options === void 0 ? void 0 : options.forceClear)) {
                this._subscriptionService.destroyState();
              } else if (ui.UNRECOVERABLE_ERROR_TYPES.includes(_context129.t0.error_type)) {
                this._subscriptionService.destroyState();
              }
              throw _context129.t0;
            case 12:
            case "end":
              return _context129.stop();
          }
        }, _callee129, this, [[0, 8]]);
      }));
    };
    this.revokeForMember = function (options) {
      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee130() {
        return _regeneratorRuntime().wrap(function _callee130$(_context130) {
          while (1) switch (_context130.prev = _context130.next) {
            case 0:
              validate('stytch.session.revokeForMember').isString('member_id', options.member_id);
              _context130.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/sessions/revoke/".concat(options.member_id),
                method: 'POST'
              });
            case 3:
              return _context130.abrupt("return", _context130.sent);
            case 4:
            case "end":
              return _context130.stop();
          }
        }, _callee130, this);
      }));
    };
    this.authenticate = function (options) {
      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee131() {
        var _this22 = this;
        var initialSession, isSessionStale, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee131$(_context131) {
          while (1) switch (_context131.prev = _context131.next) {
            case 0:
              initialSession = this._subscriptionService.getSession();
              isSessionStale = function isSessionStale() {
                var _a;
                return (initialSession === null || initialSession === void 0 ? void 0 : initialSession.member_session_id) !== ((_a = _this22._subscriptionService.getSession()) === null || _a === void 0 ? void 0 : _a.member_session_id);
              };
              _context131.prev = 2;
              requestBody = {
                session_duration_minutes: options === null || options === void 0 ? void 0 : options.session_duration_minutes
              };
              _context131.next = 6;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/authenticate',
                body: requestBody,
                method: 'POST'
              });
            case 6:
              resp = _context131.sent;
              if (!isSessionStale()) {
                _context131.next = 9;
                break;
              }
              return _context131.abrupt("return", this.authenticate(options));
            case 9:
              this._subscriptionService.updateSession(resp);
              return _context131.abrupt("return", resp);
            case 13:
              _context131.prev = 13;
              _context131.t0 = _context131["catch"](2);
              if (!isSessionStale()) {
                _context131.next = 17;
                break;
              }
              return _context131.abrupt("return", this.authenticate(options));
            case 17:
              if (ui.UNRECOVERABLE_ERROR_TYPES.includes(_context131.t0.error_type)) {
                this._subscriptionService.destroySession();
              }
              throw _context131.t0;
            case 19:
            case "end":
              return _context131.stop();
          }
        }, _callee131, this, [[2, 13]]);
      }));
    };
    this.exchange = function (data) {
      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee132() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee132$(_context132) {
          while (1) switch (_context132.prev = _context132.next) {
            case 0:
              validate('stytch.session.exchange').isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context132.prev = 1;
              _context132.next = 4;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/exchange',
                body: data,
                method: 'POST'
              });
            case 4:
              resp = _context132.sent;
              this._subscriptionService.updateSession(resp);
              return _context132.abrupt("return", resp);
            case 9:
              _context132.prev = 9;
              _context132.t0 = _context132["catch"](1);
              throw _context132.t0;
            case 12:
            case "end":
              return _context132.stop();
          }
        }, _callee132, this, [[1, 9]]);
      }));
    };
    this.exchangeAccessToken = function (data) {
      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee133() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee133$(_context133) {
          while (1) switch (_context133.prev = _context133.next) {
            case 0:
              validate('stytch.session.exchange').isString('organization_id', data.access_token).isNumber('session_duration_minutes', data.session_duration_minutes);
              _context133.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/exchange_access_token',
                body: data,
                method: 'POST'
              });
            case 3:
              resp = _context133.sent;
              this._subscriptionService.updateSession(resp);
              return _context133.abrupt("return", resp);
            case 6:
            case "end":
              return _context133.stop();
          }
        }, _callee133, this);
      }));
    };
    this.attest = function (data) {
      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee134() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee134$(_context134) {
          while (1) switch (_context134.prev = _context134.next) {
            case 0:
              validate('stytch.session.attest').isOptionalString('organization_id', data.organization_id).isString('profile_id', data.profile_id).isString('token', data.token).isOptionalNumber('session_duration_minutes', data.session_duration_minutes);
              _context134.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/attest',
                body: data,
                method: 'POST'
              });
            case 3:
              resp = _context134.sent;
              this._subscriptionService.updateSession(resp);
              return _context134.abrupt("return", resp);
            case 6:
            case "end":
              return _context134.stop();
          }
        }, _callee134, this);
      }));
    };
  }
  return _createClass(HeadlessB2BSessionClient, [{
    key: "getTokens",
    value: function getTokens() {
      return this._subscriptionService.getTokens();
    }
  }, {
    key: "updateSession",
    value: function updateSession(tokens) {
      var _a;
      validate('stytch.session.updateSession').isString('session_token', tokens.session_token).isOptionalString('session_jwt', (_a = tokens.session_jwt) !== null && _a !== void 0 ? _a : undefined);
      this._subscriptionService.updateTokens(tokens);
    }
  }]);
}();
var HeadlessB2BDiscoveryClient = /*#__PURE__*/_createClass(function HeadlessB2BDiscoveryClient(_networkClient, _subscriptionService) {
  var _this23 = this;
  _classCallCheck(this, HeadlessB2BDiscoveryClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.organizations = {
    list: function list() {
      return __awaiter(_this23, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee135() {
        return _regeneratorRuntime().wrap(function _callee135$(_context135) {
          while (1) switch (_context135.prev = _context135.next) {
            case 0:
              _context135.t0 = this._networkClient;
              _context135.next = 3;
              return this._subscriptionService.getIntermediateSessionToken();
            case 3:
              _context135.t1 = _context135.sent;
              if (_context135.t1) {
                _context135.next = 6;
                break;
              }
              _context135.t1 = undefined;
            case 6:
              _context135.t2 = _context135.t1;
              _context135.t3 = {
                intermediate_session_token: _context135.t2
              };
              _context135.t4 = {
                url: '/b2b/discovery/organizations',
                body: _context135.t3,
                method: 'POST'
              };
              return _context135.abrupt("return", _context135.t0.fetchSDK.call(_context135.t0, _context135.t4));
            case 10:
            case "end":
              return _context135.stop();
          }
        }, _callee135, this);
      }));
    },
    create: function create(data) {
      return __awaiter(_this23, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee136() {
        var requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee136$(_context136) {
          while (1) switch (_context136.prev = _context136.next) {
            case 0:
              validate('stytch.discovery.organizations.create').isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('organization_name', data.organization_name).isOptionalString('organization_slug', data.organization_slug).isOptionalString('organization_logo_url', data.organization_logo_url).isOptionalString('sso_jit_provisioning', data.sso_jit_provisioning).isOptionalStringArray('email_allowed_domains', data.email_allowed_domains).isOptionalString('email_invites', data.email_invites).isOptionalString('auth_methods', data.auth_methods).isOptionalStringArray('allowed_auth_methods', data.allowed_auth_methods).isOptionalString('mfa_policy', data.mfa_policy);
              _context136.t0 = Object;
              _context136.t1 = Object.assign({}, data);
              _context136.next = 5;
              return this._subscriptionService.getIntermediateSessionToken();
            case 5:
              _context136.t2 = _context136.sent;
              if (_context136.t2) {
                _context136.next = 8;
                break;
              }
              _context136.t2 = undefined;
            case 8:
              _context136.t3 = _context136.t2;
              _context136.t4 = {
                intermediate_session_token: _context136.t3
              };
              requestBody = _context136.t0.assign.call(_context136.t0, _context136.t1, _context136.t4);
              _context136.next = 13;
              return this._networkClient.fetchSDK({
                url: '/b2b/discovery/organizations/create',
                body: requestBody,
                method: 'POST'
              });
            case 13:
              resp = _context136.sent;
              this._subscriptionService.updateSession(resp);
              return _context136.abrupt("return", resp);
            case 16:
            case "end":
              return _context136.stop();
          }
        }, _callee136, this);
      }));
    }
  };
  this.intermediateSessions = {
    exchange: function exchange(data) {
      return __awaiter(_this23, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee137() {
        var requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee137$(_context137) {
          while (1) switch (_context137.prev = _context137.next) {
            case 0:
              validate('stytch.discovery.intermediateSessions.exchange').isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context137.t0 = Object;
              _context137.t1 = Object.assign({}, data);
              _context137.next = 5;
              return this._subscriptionService.getIntermediateSessionToken();
            case 5:
              _context137.t2 = _context137.sent;
              if (_context137.t2) {
                _context137.next = 8;
                break;
              }
              _context137.t2 = undefined;
            case 8:
              _context137.t3 = _context137.t2;
              _context137.t4 = {
                intermediate_session_token: _context137.t3
              };
              requestBody = _context137.t0.assign.call(_context137.t0, _context137.t1, _context137.t4);
              _context137.next = 13;
              return this._networkClient.fetchSDK({
                url: '/b2b/discovery/intermediate_sessions/exchange',
                body: requestBody,
                method: 'POST'
              });
            case 13:
              resp = _context137.sent;
              this._subscriptionService.updateSession(resp);
              return _context137.abrupt("return", resp);
            case 16:
            case "end":
              return _context137.stop();
          }
        }, _callee137, this);
      }));
    }
  };
});
var DefaultDynamicConfig = Promise.resolve({
  pkceRequiredForPasswordResets: false
});
var HeadlessB2BPasswordsClient = /*#__PURE__*/function () {
  function HeadlessB2BPasswordsClient(_networkClient, _subscriptionService, _pkceManager) {
    var _this24 = this;
    var _config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DefaultDynamicConfig;
    var dfpProtectedAuth = arguments.length > 4 ? arguments[4] : undefined;
    _classCallCheck(this, HeadlessB2BPasswordsClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.discovery = {
      resetByEmailStart: function resetByEmailStart(options) {
        return __awaiter(_this24, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee138() {
          var pkce_code_challenge, _yield$this$dfpProtec24, dfp_telemetry_id, captcha_token;
          return _regeneratorRuntime().wrap(function _callee138$(_context138) {
            while (1) switch (_context138.prev = _context138.next) {
              case 0:
                validate('stytch.passwords.discovery.resetByEmailStart').isString('email', options.email_address).isOptionalString('login_redirect_url', options.discovery_redirect_url).isOptionalString('reset_password_redirect_url', options.reset_password_redirect_url).isOptionalString('reset_password_template_id', options.reset_password_template_id).isOptionalNumber('reset_password_expiration_minutes', options.reset_password_expiration_minutes).isOptionalString('verify_email_template_id', options.verify_email_template_id).isOptionalString('locale', options.locale);
                _context138.next = 3;
                return this.getCodeChallenge();
              case 3:
                pkce_code_challenge = _context138.sent;
                _context138.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec24 = _context138.sent;
                dfp_telemetry_id = _yield$this$dfpProtec24.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec24.captcha_token;
                return _context138.abrupt("return", this._networkClient.retriableFetchSDK({
                  url: '/b2b/passwords/discovery/reset/start',
                  method: 'POST',
                  body: {
                    email_address: options.email_address,
                    discovery_redirect_url: options.discovery_redirect_url,
                    reset_password_redirect_url: options.reset_password_redirect_url,
                    reset_password_expiration_minutes: options.reset_password_expiration_minutes,
                    reset_password_template_id: options.reset_password_template_id,
                    verify_email_template_id: options.verify_email_template_id,
                    locale: options.locale,
                    pkce_code_challenge: pkce_code_challenge,
                    captcha_token: captcha_token,
                    dfp_telemetry_id: dfp_telemetry_id
                  },
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                }));
              case 10:
              case "end":
                return _context138.stop();
            }
          }, _callee138, this);
        }));
      },
      resetByEmail: function resetByEmail(options) {
        return __awaiter(_this24, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee139() {
          var _yield$this$dfpProtec25, dfp_telemetry_id, captcha_token, pkPair, pkce_code_verifier, resp;
          return _regeneratorRuntime().wrap(function _callee139$(_context139) {
            while (1) switch (_context139.prev = _context139.next) {
              case 0:
                validate('stytch.passwords.discovery.resetByEmail').isString('password_reset_token', options.password_reset_token).isString('password', options.password);
                _context139.next = 3;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 3:
                _yield$this$dfpProtec25 = _context139.sent;
                dfp_telemetry_id = _yield$this$dfpProtec25.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec25.captcha_token;
                _context139.next = 8;
                return this._pkceManager.getPKPair();
              case 8:
                pkPair = _context139.sent;
                pkce_code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
                _context139.t0 = this._networkClient;
                _context139.t1 = options.password_reset_token;
                _context139.t2 = options.password;
                _context139.t3 = captcha_token;
                _context139.t4 = dfp_telemetry_id;
                _context139.t5 = pkce_code_verifier;
                _context139.next = 18;
                return this._subscriptionService.getIntermediateSessionToken();
              case 18:
                _context139.t6 = _context139.sent;
                if (_context139.t6) {
                  _context139.next = 21;
                  break;
                }
                _context139.t6 = undefined;
              case 21:
                _context139.t7 = _context139.t6;
                _context139.t8 = {
                  password_reset_token: _context139.t1,
                  password: _context139.t2,
                  captcha_token: _context139.t3,
                  dfp_telemetry_id: _context139.t4,
                  pkce_code_verifier: _context139.t5,
                  intermediate_session_token: _context139.t7
                };
                _context139.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
                _context139.t10 = {
                  url: '/b2b/passwords/discovery/reset',
                  method: 'POST',
                  body: _context139.t8,
                  retryCallback: _context139.t9
                };
                _context139.next = 27;
                return _context139.t0.retriableFetchSDK.call(_context139.t0, _context139.t10);
              case 27:
                resp = _context139.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateSession(resp);
                return _context139.abrupt("return", resp);
              case 31:
              case "end":
                return _context139.stop();
            }
          }, _callee139, this);
        }));
      },
      authenticate: function authenticate(options) {
        return __awaiter(_this24, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee140() {
          var pkPair, code_verifier, _yield$this$dfpProtec26, dfp_telemetry_id, captcha_token, resp;
          return _regeneratorRuntime().wrap(function _callee140$(_context140) {
            while (1) switch (_context140.prev = _context140.next) {
              case 0:
                validate('stytch.passwords.discovery.authenticate').isString('password', options.password).isString('email_address', options.email_address);
                _context140.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context140.sent;
                code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
                _context140.next = 7;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 7:
                _yield$this$dfpProtec26 = _context140.sent;
                dfp_telemetry_id = _yield$this$dfpProtec26.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec26.captcha_token;
                _context140.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/passwords/discovery/authenticate',
                  method: 'POST',
                  body: {
                    email_address: options.email_address,
                    password: options.password,
                    captcha_token: captcha_token,
                    dfp_telemetry_id: dfp_telemetry_id,
                    code_verifier: code_verifier
                  },
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context140.sent;
                this._subscriptionService.updateSession(resp);
                return _context140.abrupt("return", resp);
              case 15:
              case "end":
                return _context140.stop();
            }
          }, _callee140, this);
        }));
      }
    };
  }
  return _createClass(HeadlessB2BPasswordsClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee141() {
        var _yield$this$_config6, pkceRequiredForPasswordResets, keyPair;
        return _regeneratorRuntime().wrap(function _callee141$(_context141) {
          while (1) switch (_context141.prev = _context141.next) {
            case 0:
              _context141.next = 2;
              return this._config;
            case 2:
              _yield$this$_config6 = _context141.sent;
              pkceRequiredForPasswordResets = _yield$this$_config6.pkceRequiredForPasswordResets;
              if (pkceRequiredForPasswordResets) {
                _context141.next = 6;
                break;
              }
              return _context141.abrupt("return", undefined);
            case 6:
              _context141.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context141.sent;
              if (!keyPair) {
                _context141.next = 11;
                break;
              }
              return _context141.abrupt("return", keyPair.code_challenge);
            case 11:
              _context141.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context141.sent;
              return _context141.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context141.stop();
          }
        }, _callee141, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee142() {
        var pkPair, code_verifier, _yield$this$dfpProtec27, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee142$(_context142) {
          while (1) switch (_context142.prev = _context142.next) {
            case 0:
              validate('stytch.passwords.authenticate').isString('org_id', options.organization_id).isString('password', options.password).isString('email_address', options.email_address).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context142.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              pkPair = _context142.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context142.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec27 = _context142.sent;
              dfp_telemetry_id = _yield$this$dfpProtec27.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec27.captcha_token;
              _context142.t0 = this._networkClient;
              _context142.t1 = options.organization_id;
              _context142.t2 = options.email_address;
              _context142.t3 = options.password;
              _context142.t4 = options.session_duration_minutes;
              _context142.t5 = options.locale;
              _context142.t6 = captcha_token;
              _context142.t7 = dfp_telemetry_id;
              _context142.t8 = code_verifier;
              _context142.next = 21;
              return this._subscriptionService.getIntermediateSessionToken();
            case 21:
              _context142.t9 = _context142.sent;
              if (_context142.t9) {
                _context142.next = 24;
                break;
              }
              _context142.t9 = undefined;
            case 24:
              _context142.t10 = _context142.t9;
              _context142.t11 = {
                organization_id: _context142.t1,
                email_address: _context142.t2,
                password: _context142.t3,
                session_duration_minutes: _context142.t4,
                locale: _context142.t5,
                captcha_token: _context142.t6,
                dfp_telemetry_id: _context142.t7,
                code_verifier: _context142.t8,
                intermediate_session_token: _context142.t10
              };
              _context142.t12 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context142.t13 = {
                url: '/b2b/passwords/authenticate',
                method: 'POST',
                body: _context142.t11,
                retryCallback: _context142.t12
              };
              _context142.next = 30;
              return _context142.t0.retriableFetchSDK.call(_context142.t0, _context142.t13);
            case 30:
              resp = _context142.sent;
              this._subscriptionService.updateSession(resp);
              return _context142.abrupt("return", resp);
            case 33:
            case "end":
              return _context142.stop();
          }
        }, _callee142, this);
      }));
    }
  }, {
    key: "resetByEmailStart",
    value: function resetByEmailStart(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee143() {
        var code_challenge, _yield$this$dfpProtec28, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee143$(_context143) {
          while (1) switch (_context143.prev = _context143.next) {
            case 0:
              validate('stytch.passwords.resetByEmailStart').isString('email', options.email_address).isOptionalString('login_redirect_url', options.login_redirect_url).isOptionalString('reset_password_redirect_url', options.reset_password_redirect_url).isOptionalString('reset_password_template_id', options.reset_password_template_id).isOptionalNumber('reset_password_expiration_minutes', options.reset_password_expiration_minutes).isOptionalString('verify_email_template_id', options.verify_email_template_id).isOptionalString('locale', options.locale);
              _context143.next = 3;
              return this.getCodeChallenge();
            case 3:
              code_challenge = _context143.sent;
              _context143.next = 6;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 6:
              _yield$this$dfpProtec28 = _context143.sent;
              dfp_telemetry_id = _yield$this$dfpProtec28.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec28.captcha_token;
              return _context143.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/email/reset/start',
                method: 'POST',
                body: {
                  organization_id: options.organization_id,
                  email_address: options.email_address,
                  login_redirect_url: options.login_redirect_url,
                  reset_password_redirect_url: options.reset_password_redirect_url,
                  reset_password_expiration_minutes: options.reset_password_expiration_minutes,
                  reset_password_template_id: options.reset_password_template_id,
                  verify_email_template_id: options.verify_email_template_id,
                  locale: options.locale,
                  code_challenge: code_challenge,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 10:
            case "end":
              return _context143.stop();
          }
        }, _callee143, this);
      }));
    }
  }, {
    key: "resetByEmail",
    value: function resetByEmail(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee144() {
        var _yield$this$dfpProtec29, dfp_telemetry_id, captcha_token, pkPair, code_verifier, resp;
        return _regeneratorRuntime().wrap(function _callee144$(_context144) {
          while (1) switch (_context144.prev = _context144.next) {
            case 0:
              validate('stytch.passwords.resetByEmail').isString('password_reset_token', options.password_reset_token).isString('password', options.password).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context144.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec29 = _context144.sent;
              dfp_telemetry_id = _yield$this$dfpProtec29.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec29.captcha_token;
              _context144.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              pkPair = _context144.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context144.t0 = this._networkClient;
              _context144.t1 = options.password_reset_token;
              _context144.t2 = options.password;
              _context144.t3 = options.session_duration_minutes;
              _context144.t4 = options.locale;
              _context144.t5 = captcha_token;
              _context144.t6 = dfp_telemetry_id;
              _context144.t7 = code_verifier;
              _context144.next = 20;
              return this._subscriptionService.getIntermediateSessionToken();
            case 20:
              _context144.t8 = _context144.sent;
              if (_context144.t8) {
                _context144.next = 23;
                break;
              }
              _context144.t8 = undefined;
            case 23:
              _context144.t9 = _context144.t8;
              _context144.t10 = {
                password_reset_token: _context144.t1,
                password: _context144.t2,
                session_duration_minutes: _context144.t3,
                locale: _context144.t4,
                captcha_token: _context144.t5,
                dfp_telemetry_id: _context144.t6,
                code_verifier: _context144.t7,
                intermediate_session_token: _context144.t9
              };
              _context144.t11 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context144.t12 = {
                url: '/b2b/passwords/email/reset',
                method: 'POST',
                body: _context144.t10,
                retryCallback: _context144.t11
              };
              _context144.next = 29;
              return _context144.t0.retriableFetchSDK.call(_context144.t0, _context144.t12);
            case 29:
              resp = _context144.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context144.abrupt("return", resp);
            case 33:
            case "end":
              return _context144.stop();
          }
        }, _callee144, this);
      }));
    }
  }, {
    key: "resetByExistingPassword",
    value: function resetByExistingPassword(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee145() {
        var _yield$this$dfpProtec30, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee145$(_context145) {
          while (1) switch (_context145.prev = _context145.next) {
            case 0:
              validate('stytch.passwords.resetByExistingPassword').isString('email', options.email_address).isString('existing_password', options.existing_password).isString('new_password', options.new_password).isOptionalString('locale', options.locale).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context145.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec30 = _context145.sent;
              dfp_telemetry_id = _yield$this$dfpProtec30.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec30.captcha_token;
              _context145.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/existing_password/reset',
                method: 'POST',
                body: {
                  organization_id: options.organization_id,
                  email_address: options.email_address,
                  existing_password: options.existing_password,
                  new_password: options.new_password,
                  locale: options.locale,
                  session_duration_minutes: options.session_duration_minutes,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context145.sent;
              this._subscriptionService.updateSession(resp);
              return _context145.abrupt("return", resp);
            case 11:
            case "end":
              return _context145.stop();
          }
        }, _callee145, this);
      }));
    }
  }, {
    key: "resetBySession",
    value: function resetBySession(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee146() {
        var _yield$this$dfpProtec31, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee146$(_context146) {
          while (1) switch (_context146.prev = _context146.next) {
            case 0:
              validate('stytch.passwords.resetBySession').isString('password', options.password);
              _context146.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec31 = _context146.sent;
              dfp_telemetry_id = _yield$this$dfpProtec31.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec31.captcha_token;
              _context146.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/session/reset',
                method: 'POST',
                body: {
                  password: options.password,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context146.sent;
              this._subscriptionService.updateSession(resp);
              return _context146.abrupt("return", resp);
            case 11:
            case "end":
              return _context146.stop();
          }
        }, _callee146, this);
      }));
    }
  }, {
    key: "strengthCheck",
    value: function strengthCheck(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee147() {
        return _regeneratorRuntime().wrap(function _callee147$(_context147) {
          while (1) switch (_context147.prev = _context147.next) {
            case 0:
              validate('stytch.passwords.strengthCheck').isOptionalString('email', options.email_address).isString('password', options.password);
              return _context147.abrupt("return", this._networkClient.fetchSDK({
                url: '/b2b/passwords/strength_check',
                method: 'POST',
                body: {
                  email_address: options.email_address,
                  password: options.password
                }
              }));
            case 2:
            case "end":
              return _context147.stop();
          }
        }, _callee147, this);
      }));
    }
  }]);
}();
var HeadlessB2BOTPsClient = /*#__PURE__*/_createClass(function HeadlessB2BOTPsClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
  var _this25 = this;
  _classCallCheck(this, HeadlessB2BOTPsClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.sms = {
    send: function send(data) {
      return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee148() {
        var _yield$this$dfpProtec32, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee148$(_context148) {
          while (1) switch (_context148.prev = _context148.next) {
            case 0:
              validate('stytch.otps.sms.send').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isOptionalString('mfa_phone_number', data.mfa_phone_number).isOptionalString('locale', data.locale);
              _context148.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec32 = _context148.sent;
              dfp_telemetry_id = _yield$this$dfpProtec32.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec32.captcha_token;
              _context148.t0 = this._networkClient;
              _context148.t1 = Object;
              _context148.t2 = Object.assign({}, data);
              _context148.t3 = dfp_telemetry_id;
              _context148.t4 = captcha_token;
              _context148.next = 13;
              return this._subscriptionService.getIntermediateSessionToken();
            case 13:
              _context148.t5 = _context148.sent;
              if (_context148.t5) {
                _context148.next = 16;
                break;
              }
              _context148.t5 = undefined;
            case 16:
              _context148.t6 = _context148.t5;
              _context148.t7 = {
                dfp_telemetry_id: _context148.t3,
                captcha_token: _context148.t4,
                intermediate_session_token: _context148.t6
              };
              _context148.t8 = _context148.t1.assign.call(_context148.t1, _context148.t2, _context148.t7);
              _context148.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context148.t10 = {
                url: '/b2b/otps/sms/send',
                body: _context148.t8,
                method: 'POST',
                retryCallback: _context148.t9
              };
              return _context148.abrupt("return", _context148.t0.retriableFetchSDK.call(_context148.t0, _context148.t10));
            case 22:
            case "end":
              return _context148.stop();
          }
        }, _callee148, this);
      }));
    },
    authenticate: function authenticate(data) {
      return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee149() {
        var _yield$this$dfpProtec33, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee149$(_context149) {
          while (1) switch (_context149.prev = _context149.next) {
            case 0:
              validate('stytch.otps.sms.authenticate').isNumber('session_duration_minutes', data.session_duration_minutes).isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('code', data.code).isOptionalString('set_mfa_enrollment', data.set_mfa_enrollment);
              _context149.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec33 = _context149.sent;
              dfp_telemetry_id = _yield$this$dfpProtec33.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec33.captcha_token;
              _context149.t0 = Object;
              _context149.t1 = Object.assign({}, data);
              _context149.t2 = dfp_telemetry_id;
              _context149.t3 = captcha_token;
              _context149.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context149.t4 = _context149.sent;
              if (_context149.t4) {
                _context149.next = 15;
                break;
              }
              _context149.t4 = undefined;
            case 15:
              _context149.t5 = _context149.t4;
              _context149.t6 = {
                dfp_telemetry_id: _context149.t2,
                captcha_token: _context149.t3,
                intermediate_session_token: _context149.t5
              };
              requestBody = _context149.t0.assign.call(_context149.t0, _context149.t1, _context149.t6);
              _context149.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/otps/sms/authenticate',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context149.sent;
              this._subscriptionService.updateSession(resp);
              return _context149.abrupt("return", resp);
            case 23:
            case "end":
              return _context149.stop();
          }
        }, _callee149, this);
      }));
    }
  };
  this.email = {
    loginOrSignup: function loginOrSignup(data) {
      return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee150() {
        var _yield$this$dfpProtec34, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee150$(_context150) {
          while (1) switch (_context150.prev = _context150.next) {
            case 0:
              validate('stytch.otps.email.loginOrSignup').isString('organization_id', data.organization_id).isString('email_address', data.email_address).isOptionalString('login_template_id', data.login_template_id).isOptionalString('signup_template_id', data.signup_template_id).isOptionalString('locale', data.locale).isOptionalNumber('login_expiration_minutes', data.login_expiration_minutes).isOptionalNumber('signup_expiration_minutes', data.signup_expiration_minutes);
              _context150.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec34 = _context150.sent;
              dfp_telemetry_id = _yield$this$dfpProtec34.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec34.captcha_token;
              return _context150.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/otps/email/login_or_signup',
                body: Object.assign(Object.assign({}, data), {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }),
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 7:
            case "end":
              return _context150.stop();
          }
        }, _callee150, this);
      }));
    },
    authenticate: function authenticate(data) {
      return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee151() {
        var _yield$this$dfpProtec35, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee151$(_context151) {
          while (1) switch (_context151.prev = _context151.next) {
            case 0:
              validate('stytch.otps.email.authenticate').isString('code', data.code).isString('email_address', data.email_address).isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context151.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec35 = _context151.sent;
              dfp_telemetry_id = _yield$this$dfpProtec35.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec35.captcha_token;
              _context151.t0 = this._networkClient;
              _context151.t1 = Object;
              _context151.t2 = Object.assign({}, data);
              _context151.next = 11;
              return this._subscriptionService.getIntermediateSessionToken();
            case 11:
              _context151.t3 = _context151.sent;
              if (_context151.t3) {
                _context151.next = 14;
                break;
              }
              _context151.t3 = undefined;
            case 14:
              _context151.t4 = _context151.t3;
              _context151.t5 = dfp_telemetry_id;
              _context151.t6 = captcha_token;
              _context151.t7 = {
                intermediate_session_token: _context151.t4,
                dfp_telemetry_id: _context151.t5,
                captcha_token: _context151.t6
              };
              _context151.t8 = _context151.t1.assign.call(_context151.t1, _context151.t2, _context151.t7);
              _context151.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context151.t10 = {
                url: '/b2b/otps/email/authenticate',
                body: _context151.t8,
                method: 'POST',
                retryCallback: _context151.t9
              };
              _context151.next = 23;
              return _context151.t0.retriableFetchSDK.call(_context151.t0, _context151.t10);
            case 23:
              resp = _context151.sent;
              this._subscriptionService.updateSession(resp);
              return _context151.abrupt("return", resp);
            case 26:
            case "end":
              return _context151.stop();
          }
        }, _callee151, this);
      }));
    },
    discovery: {
      send: function send(data) {
        return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee152() {
          var _yield$this$dfpProtec36, dfp_telemetry_id, captcha_token, requestBody;
          return _regeneratorRuntime().wrap(function _callee152$(_context152) {
            while (1) switch (_context152.prev = _context152.next) {
              case 0:
                validate('stytch.otps.email.discovery.send').isString('email_address', data.email_address).isOptionalString('login_template_id', data.login_template_id).isOptionalString('locale', data.locale).isOptionalNumber('discovery_expiration_minutes', data.discovery_expiration_minutes);
                _context152.next = 3;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 3:
                _yield$this$dfpProtec36 = _context152.sent;
                dfp_telemetry_id = _yield$this$dfpProtec36.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec36.captcha_token;
                requestBody = Object.assign(Object.assign({}, data), {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                });
                return _context152.abrupt("return", this._networkClient.retriableFetchSDK({
                  url: '/b2b/otps/email/discovery/send',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                }));
              case 8:
              case "end":
                return _context152.stop();
            }
          }, _callee152, this);
        }));
      },
      authenticate: function authenticate(data) {
        return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee153() {
          var _yield$this$dfpProtec37, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee153$(_context153) {
            while (1) switch (_context153.prev = _context153.next) {
              case 0:
                validate('stytch.otps.email.discovery.authenticate').isString('code', data.code).isString('email_address', data.email_address);
                _context153.next = 3;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 3:
                _yield$this$dfpProtec37 = _context153.sent;
                dfp_telemetry_id = _yield$this$dfpProtec37.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec37.captcha_token;
                requestBody = Object.assign({
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context153.next = 9;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/otps/email/discovery/authenticate',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 9:
                resp = _context153.sent;
                this._subscriptionService.updateSession(resp);
                return _context153.abrupt("return", resp);
              case 12:
              case "end":
                return _context153.stop();
            }
          }, _callee153, this);
        }));
      }
    }
  };
});
var HeadlessB2BTOTPsClient = /*#__PURE__*/function () {
  function HeadlessB2BTOTPsClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessB2BTOTPsClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(HeadlessB2BTOTPsClient, [{
    key: "create",
    value: function create(data) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee154() {
        var _yield$this$dfpProtec38, dfp_telemetry_id, captcha_token, response;
        return _regeneratorRuntime().wrap(function _callee154$(_context154) {
          while (1) switch (_context154.prev = _context154.next) {
            case 0:
              validate('stytch.totp.create').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isOptionalNumber('expiration_minutes', data.expiration_minutes);
              _context154.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec38 = _context154.sent;
              dfp_telemetry_id = _yield$this$dfpProtec38.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec38.captcha_token;
              _context154.t0 = this._networkClient;
              _context154.t1 = Object;
              _context154.t2 = Object.assign({}, data);
              _context154.t3 = dfp_telemetry_id;
              _context154.t4 = captcha_token;
              _context154.next = 13;
              return this._subscriptionService.getIntermediateSessionToken();
            case 13:
              _context154.t5 = _context154.sent;
              if (_context154.t5) {
                _context154.next = 16;
                break;
              }
              _context154.t5 = undefined;
            case 16:
              _context154.t6 = _context154.t5;
              _context154.t7 = {
                dfp_telemetry_id: _context154.t3,
                captcha_token: _context154.t4,
                intermediate_session_token: _context154.t6
              };
              _context154.t8 = _context154.t1.assign.call(_context154.t1, _context154.t2, _context154.t7);
              _context154.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context154.t10 = {
                url: '/b2b/totp',
                body: _context154.t8,
                method: 'POST',
                retryCallback: _context154.t9
              };
              _context154.next = 23;
              return _context154.t0.retriableFetchSDK.call(_context154.t0, _context154.t10);
            case 23:
              response = _context154.sent;
              if (response.member_id === ((_a = this._subscriptionService.getMember()) === null || _a === void 0 ? void 0 : _a.member_id)) {
                this._subscriptionService.updateMember(response.member);
              }
              return _context154.abrupt("return", response);
            case 26:
            case "end":
              return _context154.stop();
          }
        }, _callee154, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee155() {
        var _yield$this$dfpProtec39, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee155$(_context155) {
          while (1) switch (_context155.prev = _context155.next) {
            case 0:
              validate('stytch.totp.authenticate').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('code', data.code).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('set_mfa_enrollment', data.set_mfa_enrollment).isOptionalBoolean('set_default_mfa', data.set_default_mfa);
              _context155.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec39 = _context155.sent;
              dfp_telemetry_id = _yield$this$dfpProtec39.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec39.captcha_token;
              _context155.t0 = Object;
              _context155.t1 = Object.assign({}, data);
              _context155.t2 = dfp_telemetry_id;
              _context155.t3 = captcha_token;
              _context155.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context155.t4 = _context155.sent;
              if (_context155.t4) {
                _context155.next = 15;
                break;
              }
              _context155.t4 = undefined;
            case 15:
              _context155.t5 = _context155.t4;
              _context155.t6 = {
                dfp_telemetry_id: _context155.t2,
                captcha_token: _context155.t3,
                intermediate_session_token: _context155.t5
              };
              requestBody = _context155.t0.assign.call(_context155.t0, _context155.t1, _context155.t6);
              _context155.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/totp/authenticate',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context155.sent;
              this._subscriptionService.updateSession(resp);
              return _context155.abrupt("return", resp);
            case 23:
            case "end":
              return _context155.stop();
          }
        }, _callee155, this);
      }));
    }
  }]);
}();
var HeadlessB2BRecoveryCodesClient = /*#__PURE__*/function () {
  function HeadlessB2BRecoveryCodesClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessB2BRecoveryCodesClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(HeadlessB2BRecoveryCodesClient, [{
    key: "recover",
    value: function recover(data) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee156() {
        var _yield$this$dfpProtec40, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee156$(_context156) {
          while (1) switch (_context156.prev = _context156.next) {
            case 0:
              validate('stytch.recoveryCodes.recover').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('recovery_code', data.recovery_code).isNumber('session_duration_minutes', data.session_duration_minutes);
              _context156.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec40 = _context156.sent;
              dfp_telemetry_id = _yield$this$dfpProtec40.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec40.captcha_token;
              _context156.t0 = Object;
              _context156.t1 = Object.assign({}, data);
              _context156.t2 = dfp_telemetry_id;
              _context156.t3 = captcha_token;
              _context156.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context156.t4 = _context156.sent;
              if (_context156.t4) {
                _context156.next = 15;
                break;
              }
              _context156.t4 = undefined;
            case 15:
              _context156.t5 = _context156.t4;
              _context156.t6 = {
                dfp_telemetry_id: _context156.t2,
                captcha_token: _context156.t3,
                intermediate_session_token: _context156.t5
              };
              requestBody = _context156.t0.assign.call(_context156.t0, _context156.t1, _context156.t6);
              _context156.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/recovery_codes/recover',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context156.sent;
              this._subscriptionService.updateSession(resp);
              return _context156.abrupt("return", resp);
            case 23:
            case "end":
              return _context156.stop();
          }
        }, _callee156, this);
      }));
    }
  }, {
    key: "rotate",
    value: function rotate() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee157() {
        var _yield$this$dfpProtec41, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee157$(_context157) {
          while (1) switch (_context157.prev = _context157.next) {
            case 0:
              _context157.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec41 = _context157.sent;
              dfp_telemetry_id = _yield$this$dfpProtec41.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec41.captcha_token;
              return _context157.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/recovery_codes/rotate',
                body: {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                },
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 6:
            case "end":
              return _context157.stop();
          }
        }, _callee157, this);
      }));
    }
  }, {
    key: "get",
    value: function get() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee158() {
        return _regeneratorRuntime().wrap(function _callee158$(_context158) {
          while (1) switch (_context158.prev = _context158.next) {
            case 0:
              return _context158.abrupt("return", this._networkClient.fetchSDK({
                url: '/b2b/recovery_codes',
                method: 'GET'
              }));
            case 1:
            case "end":
              return _context158.stop();
          }
        }, _callee158, this);
      }));
    }
  }]);
}();
var HeadlessB2BRBACClient = /*#__PURE__*/function () {
  function HeadlessB2BRBACClient(cachedConfig, dynamicConfig, _subscriptionService) {
    var _this26 = this;
    _classCallCheck(this, HeadlessB2BRBACClient);
    this._subscriptionService = _subscriptionService;
    this.isAuthorizedSync = function (resourceId, action) {
      var _a;
      return !!((_a = _this26.cachedPolicy) === null || _a === void 0 ? void 0 : _a.callerIsAuthorized(_this26.roleIds(), resourceId, action));
    };
    this.isAuthorized = function (resourceId, action) {
      return _this26.policyPromise.then(function (policy) {
        return policy.callerIsAuthorized(_this26.roleIds(), resourceId, action);
      });
    };
    this.cachedPolicy = cachedConfig.rbacPolicy ? RBACPolicy.fromJSON(cachedConfig.rbacPolicy) : null;
    this.policyPromise = dynamicConfig.then(function (data) {
      if (!data.rbacPolicy) {
        logger.error('Unable to retrieve RBAC policy from servers. Assuming caller has no permissions.');
        return new RBACPolicy([], []);
      }
      // Update the existing policy too, so isAuthorizedSync will be up-to-date
      _this26.cachedPolicy = RBACPolicy.fromJSON(data.rbacPolicy);
      return _this26.cachedPolicy;
    });
  }
  return _createClass(HeadlessB2BRBACClient, [{
    key: "allPermissions",
    value: function allPermissions() {
      var _this27 = this;
      return this.policyPromise.then(function (policy) {
        return policy.allPermissionsForCaller(_this27.roleIds());
      });
    }
  }, {
    key: "roleIds",
    value: function roleIds() {
      var _a;
      var session = this._subscriptionService.getSession();
      if (!session) {
        return [];
      }
      // Although session.roles is guaranteed to exist for fresh data, there is a minuscule chance
      // that the member session stored in localstorage clientside comes from before roles were added to
      // the API response - in which case session.roles will be undefined and this will crash
      // TODO: [AUTH-2294] We can safely remove this ~3mos after RBAC is released
      return (_a = session.roles) !== null && _a !== void 0 ? _a : [];
    }
  }]);
}();
var HeadlessB2BImpersonationClient = /*#__PURE__*/_createClass(function HeadlessB2BImpersonationClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
  var _this28 = this;
  _classCallCheck(this, HeadlessB2BImpersonationClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.authenticate = function (data) {
    return __awaiter(_this28, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee159() {
      var _yield$this$dfpProtec42, dfp_telemetry_id, captcha_token, resp;
      return _regeneratorRuntime().wrap(function _callee159$(_context159) {
        while (1) switch (_context159.prev = _context159.next) {
          case 0:
            validate('stytch.impersonation.authenticate').isString('impersonation_token', data.impersonation_token);
            _context159.next = 3;
            return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
          case 3:
            _yield$this$dfpProtec42 = _context159.sent;
            dfp_telemetry_id = _yield$this$dfpProtec42.dfp_telemetry_id;
            captcha_token = _yield$this$dfpProtec42.captcha_token;
            _context159.next = 8;
            return this._networkClient.retriableFetchSDK({
              url: '/b2b/impersonation/authenticate',
              body: Object.assign(Object.assign({}, data), {
                dfp_telemetry_id: dfp_telemetry_id,
                captcha_token: captcha_token
              }),
              method: 'POST',
              retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
            });
          case 8:
            resp = _context159.sent;
            this._subscriptionService.updateSession(resp);
            return _context159.abrupt("return", resp);
          case 11:
          case "end":
            return _context159.stop();
        }
      }, _callee159, this);
    }));
  };
});
var HeadlessB2BIDPClient = /*#__PURE__*/_createClass(function HeadlessB2BIDPClient(_networkClient) {
  var _this29 = this;
  _classCallCheck(this, HeadlessB2BIDPClient);
  this._networkClient = _networkClient;
  /**
   * Initiates a request for authorization of a Connected App to access a Member's account.
   *
   * Call this endpoint using the query parameters from an OAuth Authorization request. This endpoint validates various fields (scope, client_id, redirect_uri, prompt, etc...) are correct and returns relevant information for rendering an OAuth Consent Screen.
   *
   * @example
   * const response = await stytch.idp.oauthAuthorizeStart({
   *   client_id: 'client_123',
   *   redirect_uri: 'https://example.com/callback',
   *   scope: 'openid email profile',
   * });
   */
  this.oauthAuthorizeStart = function (data) {
    return __awaiter(_this29, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee160() {
      return _regeneratorRuntime().wrap(function _callee160$(_context160) {
        while (1) switch (_context160.prev = _context160.next) {
          case 0:
            return _context160.abrupt("return", this._networkClient.fetchSDK({
              url: '/idp/b2b/oauth/authorize/start',
              method: 'POST',
              body: data
            }));
          case 1:
          case "end":
            return _context160.stop();
        }
      }, _callee160, this);
    }));
  };
  /**
   * Completes a request for authorization of a Connected App to access a Member's account.
   *
   * Call this endpoint using the query parameters from an OAuth Authorization request, after previously validating those parameters using the Preflight Check API. Note that this endpoint takes in a few additional parameters the preflight check does not- state, nonce, and code_challenge.
   *
   * If the authorization was successful, the redirect_uri will contain a valid authorization_code embedded as a query parameter. If the authorization was unsuccessful, the redirect_uri will contain an OAuth2.1 error_code. In both cases, redirect the Member to the location for the response to be consumed by the Connected App.
   *
   * Exactly one of the following must be provided to identify the Member granting authorization:
   * organization_id + member_id
   * session_token
   * session_jwt
   *
   * If a session_token or session_jwt is passed, the OAuth Authorization will be linked to the Member's session for tracking purposes. One of these fields must be used if the Connected App intends to complete the Exchange Access Token flow.
   *
   * @example
   * const response = await stytch.idp.oauthAuthorizeSubmit({
   *   client_id: 'client_123',
   *   redirect_uri: 'https://example.com/callback',
   *   scope: 'openid email profile',
   * });
   */
  this.oauthAuthorizeSubmit = function (data) {
    return __awaiter(_this29, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee161() {
      return _regeneratorRuntime().wrap(function _callee161$(_context161) {
        while (1) switch (_context161.prev = _context161.next) {
          case 0:
            return _context161.abrupt("return", this._networkClient.fetchSDK({
              url: '/idp/b2b/oauth/authorize/submit',
              method: 'POST',
              body: data
            }));
          case 1:
          case "end":
            return _context161.stop();
        }
      }, _callee161, this);
    }));
  };
  this.oauthLogoutStart = function (data) {
    return __awaiter(_this29, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee162() {
      return _regeneratorRuntime().wrap(function _callee162$(_context162) {
        while (1) switch (_context162.prev = _context162.next) {
          case 0:
            _context162.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/oauth/logout/start",
              method: 'POST',
              body: data
            });
          case 2:
            return _context162.abrupt("return", _context162.sent);
          case 3:
          case "end":
            return _context162.stop();
        }
      }, _callee162, this);
    }));
  };
});
var IframeHostClient = /*#__PURE__*/function () {
  function IframeHostClient(iframeURL) {
    _classCallCheck(this, IframeHostClient);
    this.iframeURL = iframeURL;
    this.createIframe();
  }
  return _createClass(IframeHostClient, [{
    key: "createIframe",
    value: function createIframe() {
      var existingIframe = document.querySelector("[src~=\"".concat(this.iframeURL, "\"]"));
      /* If an iframe does not exist yet, create one */
      if (!existingIframe) {
        existingIframe = document.createElement('iframe');
        existingIframe.src = this.iframeURL;
        existingIframe.style.position = 'absolute';
        existingIframe.style.width = '0';
        existingIframe.style.height = '0';
        existingIframe.style.border = '0';
        document.body.appendChild(existingIframe);
      } else {
        logger.warn(MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING);
      }
      /**
       * [NASTY BUG]
       * If we postMessage to an iframe that is _not yet loaded_, chrome will give a cryptic error message
       * Failed to execute 'postMessage' on 'DOMWindow':
       *   The target origin provided ('https://js.stytch.com') does not match the recipient window's origin ('http://localhost:3000').
       * There is no builtin way to determine if an iframe is already loaded,
       * so we set a dataset attr in our onload handler and use that to determine loading state
       */
      if (existingIframe.dataset.loaded === 'true') {
        this.frame = Promise.resolve(existingIframe);
        return;
      }
      this.frame = new Promise(function (resolve) {
        existingIframe.addEventListener('load', function () {
          existingIframe.dataset.loaded = 'true';
          resolve(existingIframe);
        }, {
          once: true
        });
      });
    }
  }, {
    key: "call",
    value: function call(method, args) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee163() {
        var _this30 = this;
        var frame, channel;
        return _regeneratorRuntime().wrap(function _callee163$(_context163) {
          while (1) switch (_context163.prev = _context163.next) {
            case 0:
              _context163.next = 2;
              return this.frame;
            case 2:
              frame = _context163.sent;
              channel = new MessageChannel();
              return _context163.abrupt("return", new Promise(function (resolve, reject) {
                var _a;
                channel.port1.onmessage = function (event) {
                  var resp = event.data;
                  channel.port1.close();
                  if (resp.success) {
                    resolve(resp.payload);
                  } else {
                    reject(ErrorMarshaller.unmarshall(resp.error));
                  }
                };
                var message = {
                  method: method,
                  args: args
                };
                (_a = frame.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, _this30.iframeURL, [channel.port2]);
              }));
            case 5:
            case "end":
              return _context163.stop();
          }
        }, _callee163, this);
      }));
    }
  }]);
}();
var SearchDataManager = /*#__PURE__*/function () {
  function SearchDataManager(_networkClient, dfpProtectedAuth) {
    _classCallCheck(this, SearchDataManager);
    this._networkClient = _networkClient;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(SearchDataManager, [{
    key: "searchUser",
    value: function searchUser(email) {
      var _this31 = this;
      return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha().then(function (_ref0) {
        var dfp_telemetry_id = _ref0.dfp_telemetry_id,
          captcha_token = _ref0.captcha_token;
        return _this31._networkClient.fetchSDK({
          url: "/users/search",
          method: 'POST',
          body: {
            email: email,
            dfp_telemetry_id: dfp_telemetry_id,
            captcha_token: captcha_token
          }
        });
      });
    }
  }, {
    key: "searchMember",
    value: function searchMember(email, organization_id) {
      return this._networkClient.fetchSDK({
        url: "/b2b/organizations/members/search",
        method: 'POST',
        body: {
          email_address: email,
          organization_id: organization_id
        }
      });
    }
  }]);
}(); // We should try refreshing the session if there exists a cached session in
// state that might be stale. Otherwise, we know there is no session, so there's
// no need.
var shouldTryRefresh = function shouldTryRefresh(state) {
  return !!(state === null || state === void 0 ? void 0 : state.session);
};
var SessionManagerRegistry = /*#__PURE__*/function () {
  function SessionManagerRegistry() {
    _classCallCheck(this, SessionManagerRegistry);
    this.hasWarned = false;
    this.registry = new Map();
  }
  return _createClass(SessionManagerRegistry, [{
    key: "register",
    value: function register(key, sessionManager) {
      var otherManager = this.registry.get(key);
      // If there appears to be another registered session manager, issue a
      // warning and cancel its background refresh in favor the newer registration
      if (otherManager && otherManager !== sessionManager) {
        if (!this.hasWarned) {
          logger.warn(MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING);
          this.hasWarned = true;
        }
        otherManager.cancelBackgroundRefresh();
      }
      this.registry.set(key, sessionManager);
    }
  }, {
    key: "unregister",
    value: function unregister(publicToken, sessionManager) {
      var otherManager = this.registry.get(publicToken);
      if (otherManager && otherManager === sessionManager) {
        this.registry["delete"](publicToken);
      }
    }
  }]);
}();
var SessionManager = /*#__PURE__*/function () {
  function SessionManager(_subscriptionService, _headlessSessionClient, _publicToken) {
    var _this32 = this;
    _classCallCheck(this, SessionManager);
    this._subscriptionService = _subscriptionService;
    this._headlessSessionClient = _headlessSessionClient;
    this._publicToken = _publicToken;
    /**
     * We need to listen to a few types of events:
     * - If the user logs in via invoking a .authenticate() call, we should start the background worker
     * - If the user steps up their authentication via another .authenticate call(), we should restart the background worker
     * - If the user logs out, we should terminate the worker
     * - We should ignore session changes that we ourselves caused - so if we already have a timeout, leave it be!
     */
    this._onDataChange = function (state) {
      if (shouldTryRefresh(state)) {
        _this32.scheduleBackgroundRefresh();
      } else {
        _this32.cancelBackgroundRefresh();
      }
    };
    // In cases where we cannot get a satisfactory request:
    // - Stytch is hard-down
    // - The user's network is disconnected for an extended period of time
    // we will continue to retry every 4 minutes ad infinum
    this._reauthenticateWithBackoff = function () {
      return __awaiter(_this32, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee164() {
        var count;
        return _regeneratorRuntime().wrap(function _callee164$(_context164) {
          while (1) switch (_context164.prev = _context164.next) {
            case 0:
              count = 0;
            case 1:
              if (!true) {
                _context164.next = 17;
                break;
              }
              _context164.prev = 2;
              _context164.next = 5;
              return this._headlessSessionClient.authenticate();
            case 5:
              return _context164.abrupt("return", _context164.sent);
            case 8:
              _context164.prev = 8;
              _context164.t0 = _context164["catch"](2);
              if (!SessionManager.isUnrecoverableError(_context164.t0)) {
                _context164.next = 12;
                break;
              }
              return _context164.abrupt("return", Promise.reject(_context164.t0));
            case 12:
              count++;
              _context164.next = 15;
              return new Promise(function (done) {
                return setTimeout(done, SessionManager.timeoutForAttempt(count));
              });
            case 15:
              _context164.next = 1;
              break;
            case 17:
            case "end":
              return _context164.stop();
          }
        }, _callee164, this, [[2, 8]]);
      }));
    };
    this.timeout = null;
    this._subscriptionService.subscribeToState(this._onDataChange);
  }
  /**
   * The core logic of the session refresh recursive trampoline
   * - Refreshes the currently issued session
   * - Schedules a future refresh if successful
   */
  return _createClass(SessionManager, [{
    key: "register",
    value: function register() {
      SessionManager.registry.register(this._publicToken, this);
    }
  }, {
    key: "unregister",
    value: function unregister() {
      SessionManager.registry.unregister(this._publicToken, this);
    }
  }, {
    key: "performBackgroundRefresh",
    value: function performBackgroundRefresh() {
      var _this33 = this;
      logger.debug('performing background refresh at ', Date.now());
      this._reauthenticateWithBackoff().then(function () {
        _this33.scheduleBackgroundRefresh();
      })["catch"](function (error) {
        logger.warn('Session background refresh failed. Signalling to app that user is logged out.', {
          error: error
        });
        _this33._subscriptionService.destroySession();
      });
    }
  }, {
    key: "scheduleBackgroundRefresh",
    value: function scheduleBackgroundRefresh() {
      var _this34 = this;
      /* Highlander rules - there can only ever be one */
      this.cancelBackgroundRefresh();
      this.register();
      logger.debug('Scheduling bg refresh', Date.now());
      this.timeout = setTimeout(function () {
        _this34.performBackgroundRefresh();
      }, SessionManager.REFRESH_INTERVAL_MS);
    }
  }, {
    key: "cancelBackgroundRefresh",
    value: function cancelBackgroundRefresh() {
      if (this.timeout !== null) {
        this.unregister();
        logger.debug('Cancelling bg refresh', Date.now());
        clearTimeout(this.timeout);
        this.timeout = null;
      }
    }
    // We start with a backoff of 2000ms and increase exponentially to ~4 minutes (+/- 175 ms for jitter)
    // A short backoff initially helps increase the chance that we refresh the session before the JWT expires
  }], [{
    key: "timeoutForAttempt",
    value: function timeoutForAttempt(count) {
      count = Math.min(count, 7);
      var jitter = Math.floor(Math.random() * 350) - 175;
      var delayMS = 2000 * Math.pow(2, count);
      return jitter + delayMS;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  }, {
    key: "isUnrecoverableError",
    value: function isUnrecoverableError(error) {
      return ui.UNRECOVERABLE_ERROR_TYPES.includes(error.error_type);
    }
  }]);
}(); // Three minutes
SessionManager.REFRESH_INTERVAL_MS = 1000 * 60 * 3;
SessionManager.registry = new SessionManagerRegistry();
var StateChangeClient = /*#__PURE__*/_createClass(function StateChangeClient(_subscriptionService, emptyState) {
  var _this35 = this;
  _classCallCheck(this, StateChangeClient);
  this._subscriptionService = _subscriptionService;
  this.emptyState = emptyState;
  this.onStateChange = function (callback) {
    return _this35._subscriptionService.subscribeToState(function (state) {
      callback(state !== null && state !== void 0 ? state : _this35.emptyState);
    });
  };
});
var LOCAL_STORAGE_KEY_PREFIX = 'stytch_sdk_state_';
var getLocalStorageKey = function getLocalStorageKey(publicToken) {
  return "".concat(LOCAL_STORAGE_KEY_PREFIX).concat(publicToken);
};
var SubscriptionDataLayer = /*#__PURE__*/function () {
  function SubscriptionDataLayer(_publicToken, _storageClient) {
    var _this36 = this;
    _classCallCheck(this, SubscriptionDataLayer);
    this._publicToken = _publicToken;
    this._storageClient = _storageClient;
    this.syncFromLocalStorage = function () {
      return __awaiter(_this36, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee165() {
        var _this37 = this;
        return _regeneratorRuntime().wrap(function _callee165$(_context165) {
          while (1) switch (_context165.prev = _context165.next) {
            case 0:
              return _context165.abrupt("return", this._storageClient.getData(getLocalStorageKey(this._publicToken)).then(function (localData) {
                if (!localData) {
                  return null;
                }
                var parsedState;
                try {
                  parsedState = JSON.parse(localData);
                } catch (e) {
                  // Overwrite the bad data
                  _this37._storageClient.clearData(getLocalStorageKey(_this37._publicToken));
                  // this.removeSessionCookie();
                  return null;
                }
                var _parsedState = parsedState,
                  state = _parsedState.state,
                  session_token = _parsedState.session_token,
                  session_jwt = _parsedState.session_jwt,
                  intermediate_session_token = _parsedState.intermediate_session_token;
                _this37.state = state;
                _this37.session_token = session_token;
                _this37.session_jwt = session_jwt;
                _this37.intermediate_session_token = intermediate_session_token;
                return {
                  state: state,
                  session_token: session_token,
                  session_jwt: session_jwt,
                  intermediate_session_token: intermediate_session_token
                };
              })["catch"](function () {
                return null;
              }));
            case 1:
            case "end":
              return _context165.stop();
          }
        }, _callee165, this);
      }));
    };
    this.state = null;
    this.session_token = null;
    this.session_jwt = null;
    this.intermediate_session_token = null;
    this.intermediate_session_token_expiration = null;
    this.subscriptions = {};
  }
  return _createClass(SubscriptionDataLayer, [{
    key: "syncToLocalStorage",
    value: function syncToLocalStorage() {
      this._storageClient.setData(getLocalStorageKey(this._publicToken), JSON.stringify({
        state: this.state,
        session_token: this.session_token,
        session_jwt: this.session_jwt,
        intermediate_session_token: this.intermediate_session_token
      }));
    }
  }]);
}();
var addSubscriber = function addSubscriber(collection, subscriber) {
  var uniqueId = Math.random().toString(36).slice(-10);
  collection[uniqueId] = subscriber;
  return function () {
    return delete collection[uniqueId];
  };
};
var notifySubscribers = function notifySubscribers(collection, value) {
  Object.values(collection).forEach(function (cb) {
    return cb(value);
  });
};
var SubscriptionService = /*#__PURE__*/function () {
  function SubscriptionService(publicToken, storageClient) {
    _classCallCheck(this, SubscriptionService);
    var _a;
    /**
     * Whether the state was retrieved from the cache and is awaiting a refresh
     */
    this.fromCache = true;
    // TODO: Generalize this for Mobile and Web based SDKs
    this._datalayer = new SubscriptionDataLayer(publicToken, storageClient);
    var session = (_a = this._datalayer.state) === null || _a === void 0 ? void 0 : _a.session;
    if (session && Date.parse(session.expires_at) < Date.now()) {
      this.destroyState();
      return;
    }
  }
  return _createClass(SubscriptionService, [{
    key: "syncFromDeviceStorage",
    value: function syncFromDeviceStorage(onCompleteCallback) {
      var _this38 = this;
      this._datalayer.syncFromLocalStorage().then(function (res) {
        var _a;
        if (!res) {
          _this38.setCacheRefreshed();
        } else if (((_a = res.state) === null || _a === void 0 ? void 0 : _a.session) && Date.parse(res.state.session.expires_at) < Date.now()) {
          _this38.destroyState();
        } else {
          // If we retrieved a possibly valid session, indicate whether we
          // intend to refresh it (via a background refresh)
          _this38.updateStateAndTokens(res, shouldTryRefresh(res.state));
        }
      })["finally"](function () {
        onCompleteCallback();
      });
    }
  }, {
    key: "getState",
    value: function getState() {
      return this._datalayer.state;
    }
  }, {
    key: "getTokens",
    value: function getTokens() {
      if (!(typeof this._datalayer.session_token === 'string') || !(typeof this._datalayer.session_jwt === 'string')) {
        return null;
      }
      return {
        session_token: this._datalayer.session_token,
        session_jwt: this._datalayer.session_jwt
      };
    }
  }, {
    key: "removeIST",
    value: function removeIST() {
      this._datalayer.intermediate_session_token = null;
      this._datalayer.intermediate_session_token_expiration = null;
    }
  }, {
    key: "removeSessionTokens",
    value: function removeSessionTokens() {
      this._datalayer.session_jwt = null;
      this._datalayer.session_token = null;
    }
  }, {
    key: "getIntermediateSessionToken",
    value: function getIntermediateSessionToken() {
      if (this._datalayer.intermediate_session_token_expiration && Date.now() > this._datalayer.intermediate_session_token_expiration) {
        this.removeIST();
      }
      return this._datalayer.intermediate_session_token;
    }
  }, {
    key: "destroyState",
    value: function destroyState() {
      this.updateStateAndTokens({
        state: null,
        session_token: null,
        session_jwt: null,
        intermediate_session_token: null
      });
    }
  }, {
    key: "destroySession",
    value: function destroySession() {
      this.updateStateAndTokens({
        state: null,
        session_token: null,
        session_jwt: null,
        intermediate_session_token: this.getIntermediateSessionToken()
      });
    }
  }, {
    key: "_updateStateAndTokensInternal",
    value: function _updateStateAndTokensInternal(stateDiff, fromCache) {
      var state = stateDiff.state,
        session_token = stateDiff.session_token,
        session_jwt = stateDiff.session_jwt,
        intermediate_session_token = stateDiff.intermediate_session_token;
      var newData = state == null ? null : Object.assign(Object.assign({}, this._datalayer.state), state);
      this._datalayer.state = newData;
      if (newData) {
        this._datalayer.session_token = session_token;
        this._datalayer.session_jwt = session_jwt;
        this.removeIST();
      } else if (intermediate_session_token) {
        this.removeSessionTokens();
        this._datalayer.intermediate_session_token = intermediate_session_token;
        // ISTs are only valid for 10 minutes
        this._datalayer.intermediate_session_token_expiration = Date.now() + 10 * 60 * 1000;
      } else {
        this.removeSessionTokens();
        this.removeIST();
      }
      if (!fromCache) {
        this.setCacheRefreshed();
      }
      notifySubscribers(this._datalayer.subscriptions, newData);
    }
  }, {
    key: "updateStateAndTokens",
    value: function updateStateAndTokens(stateDiff) {
      var fromCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this._updateStateAndTokensInternal(stateDiff, fromCache);
      this._datalayer.syncToLocalStorage();
    }
  }, {
    key: "updateState",
    value: function updateState(state) {
      var newState = state ? Object.assign(Object.assign({}, this._datalayer.state), state) : null;
      this._datalayer.state = newState;
      this.setCacheRefreshed();
      notifySubscribers(this._datalayer.subscriptions, newState);
      // Delay notifying other tabs until after we have refreshed ourselves
      this._datalayer.syncToLocalStorage();
    }
  }, {
    key: "updateTokens",
    value: function updateTokens(tokens) {
      var _a;
      this._datalayer.session_token = tokens.session_token;
      this._datalayer.session_jwt = (_a = tokens.session_jwt) !== null && _a !== void 0 ? _a : null;
      this._datalayer.syncToLocalStorage();
    }
  }, {
    key: "subscribeToState",
    value: function subscribeToState(callback) {
      return addSubscriber(this._datalayer.subscriptions, callback);
    }
  }, {
    key: "getFromCache",
    value: function getFromCache() {
      return this.fromCache;
    }
  }, {
    key: "setCacheRefreshed",
    value: function setCacheRefreshed() {
      this.fromCache = false;
    }
  }]);
}();
var ConsumerSubscriptionService = /*#__PURE__*/function (_SubscriptionService) {
  function ConsumerSubscriptionService() {
    var _this39;
    _classCallCheck(this, ConsumerSubscriptionService);
    _this39 = _callSuper(this, ConsumerSubscriptionService, arguments);
    _this39.updateSession = function (resp) {
      // This is a bit of a hack to get the type inference to work. In practice,
      // opaque tokens are only a concern on web.
      var session = resp.session,
        user = resp.user,
        session_jwt = resp.session_jwt,
        session_token = resp.session_token;
      _this39.updateStateAndTokens({
        state: {
          session: session,
          user: user
        },
        session_jwt: session_jwt,
        session_token: session_token,
        intermediate_session_token: null
      });
    };
    _this39.updateUser = function (user) {
      return _this39.updateState({
        user: user
      });
    };
    _this39.getUser = function () {
      var _a, _b;
      return (_b = (_a = _this39.getState()) === null || _a === void 0 ? void 0 : _a.user) !== null && _b !== void 0 ? _b : null;
    };
    _this39.getSession = function () {
      var _a, _b;
      return (_b = (_a = _this39.getState()) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : null;
    };
    return _this39;
  }
  _inherits(ConsumerSubscriptionService, _SubscriptionService);
  return _createClass(ConsumerSubscriptionService);
}(SubscriptionService);
var B2BSubscriptionService = /*#__PURE__*/function (_SubscriptionService2) {
  function B2BSubscriptionService() {
    var _this40;
    _classCallCheck(this, B2BSubscriptionService);
    _this40 = _callSuper(this, B2BSubscriptionService, arguments);
    _this40.updateSession = function (originalResp) {
      // This is a bit of a hack to get the type inference to work. In practice,
      // opaque tokens are only a concern on web.
      var resp = originalResp;
      if ('member_session' in resp && resp.member_session) {
        _this40.updateStateAndTokens({
          state: {
            session: resp.member_session,
            member: resp.member,
            organization: resp.organization
          },
          session_token: resp.session_token,
          session_jwt: resp.session_jwt,
          intermediate_session_token: null
        });
      } else {
        _this40.updateStateAndTokens({
          state: null,
          session_token: null,
          session_jwt: null,
          intermediate_session_token: resp.intermediate_session_token
        });
      }
    };
    _this40.updateMember = function (member) {
      return _this40.updateState({
        member: member
      });
    };
    _this40.getMember = function () {
      var _a, _b;
      return (_b = (_a = _this40.getState()) === null || _a === void 0 ? void 0 : _a.member) !== null && _b !== void 0 ? _b : null;
    };
    _this40.updateOrganization = function (organization) {
      return _this40.updateState({
        organization: organization
      });
    };
    _this40.getOrganization = function () {
      var _a, _b;
      return (_b = (_a = _this40.getState()) === null || _a === void 0 ? void 0 : _a.organization) !== null && _b !== void 0 ? _b : null;
    };
    _this40.getSession = function () {
      var _a, _b;
      return (_b = (_a = _this40.getState()) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : null;
    };
    return _this40;
  }
  _inherits(B2BSubscriptionService, _SubscriptionService2);
  return _createClass(B2BSubscriptionService);
}(SubscriptionService);
var VERTICAL_B2B = 'B2B';
var VERTICAL_CONSUMER = 'CONSUMER';
var createDeepEqual = function createDeepEqual() {
  var _ref1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref1$KEYS_TO_EXCLUDE = _ref1.KEYS_TO_EXCLUDE,
    KEYS_TO_EXCLUDE = _ref1$KEYS_TO_EXCLUDE === void 0 ? [] : _ref1$KEYS_TO_EXCLUDE;
  // If comparing functions, this may need some work. Not sure the
  // best path for this: compare instance (what it currently does),
  // stringify and compare, etc.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var _deepEqual = function deepEqual(a, b) {
    // Ensures type is the same
    if (_typeof(a) !== _typeof(b)) return false;
    // arrays, null, and objects all have type 'object'
    if (a === null || b === null) return a === b;
    if (_typeof(a) === 'object') {
      if (Object.keys(a).length !== Object.keys(b).length || Object.keys(a).some(function (k) {
        return !(k in b);
      })) return false;
      return Object.entries(a).filter(function (_ref10) {
        var _ref11 = _slicedToArray(_ref10, 1),
          k = _ref11[0];
        return !KEYS_TO_EXCLUDE.includes(k);
      }).every(function (_ref12) {
        var _ref13 = _slicedToArray(_ref12, 2),
          k = _ref13[0],
          v = _ref13[1];
        return _deepEqual(v, b[k]);
      });
    }
    // boolean, string, number, undefined
    return a === b;
  };
  return _deepEqual;
};
exports.B2BSubscriptionService = B2BSubscriptionService;
exports.CLIENTSIDE_SERVICES_IFRAME_URL = CLIENTSIDE_SERVICES_IFRAME_URL;
exports.COUNTRIES_LIST = COUNTRIES_LIST;
exports.ConsumerSubscriptionService = ConsumerSubscriptionService;
exports.DEFAULT_INTERVAL_DURATION_MS = DEFAULT_INTERVAL_DURATION_MS;
exports.DEFAULT_MAX_BATCH_SIZE = DEFAULT_MAX_BATCH_SIZE;
exports.DEFAULT_OTP_EXPIRATION_MINUTES = DEFAULT_OTP_EXPIRATION_MINUTES;
exports.DEFAULT_SESSION_DURATION_MINUTES = DEFAULT_SESSION_DURATION_MINUTES;
exports.DFPProtectedAuthProvider = DFPProtectedAuthProvider;
exports.DisabledDFPProtectedAuthProvider = DisabledDFPProtectedAuthProvider;
exports.ErrorMarshaller = ErrorMarshaller;
exports.EventLogger = EventLogger;
exports.GOOGLE_ONE_TAP_HOST = GOOGLE_ONE_TAP_HOST;
exports.GOOGLE_ONE_TAP_SCRIPT_URL = GOOGLE_ONE_TAP_SCRIPT_URL;
exports.HeadlessB2BDiscoveryClient = HeadlessB2BDiscoveryClient;
exports.HeadlessB2BIDPClient = HeadlessB2BIDPClient;
exports.HeadlessB2BImpersonationClient = HeadlessB2BImpersonationClient;
exports.HeadlessB2BMagicLinksClient = HeadlessB2BMagicLinksClient;
exports.HeadlessB2BOAuthClient = HeadlessB2BOAuthClient;
exports.HeadlessB2BOTPsClient = HeadlessB2BOTPsClient;
exports.HeadlessB2BOrganizationClient = HeadlessB2BOrganizationClient;
exports.HeadlessB2BPasswordsClient = HeadlessB2BPasswordsClient;
exports.HeadlessB2BRBACClient = HeadlessB2BRBACClient;
exports.HeadlessB2BRecoveryCodesClient = HeadlessB2BRecoveryCodesClient;
exports.HeadlessB2BSCIMClient = HeadlessB2BSCIMClient;
exports.HeadlessB2BSSOClient = HeadlessB2BSSOClient;
exports.HeadlessB2BSelfClient = HeadlessB2BSelfClient;
exports.HeadlessB2BSessionClient = HeadlessB2BSessionClient;
exports.HeadlessB2BTOTPsClient = HeadlessB2BTOTPsClient;
exports.HeadlessCryptoWalletClient = HeadlessCryptoWalletClient;
exports.HeadlessIDPClient = HeadlessIDPClient;
exports.HeadlessImpersonationClient = HeadlessImpersonationClient;
exports.HeadlessMagicLinksClient = HeadlessMagicLinksClient;
exports.HeadlessOAuthClient = HeadlessOAuthClient;
exports.HeadlessOTPClient = HeadlessOTPClient;
exports.HeadlessPasswordClient = HeadlessPasswordClient;
exports.HeadlessRBACClient = HeadlessRBACClient;
exports.HeadlessSessionClient = HeadlessSessionClient;
exports.HeadlessTOTPClient = HeadlessTOTPClient;
exports.HeadlessUserClient = HeadlessUserClient;
exports.HeadlessWebAuthnClient = HeadlessWebAuthnClient;
exports.IframeHostClient = IframeHostClient;
exports.LIVE_API_URL = LIVE_API_URL;
exports.MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING = MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING;
exports.POWERED_BY_STYTCH_IMG_URL = POWERED_BY_STYTCH_IMG_URL;
exports.RBACPolicy = RBACPolicy;
exports.RetriableError = RetriableError;
exports.STYTCH_DFP_BACKEND_URL = STYTCH_DFP_BACKEND_URL;
exports.STYTCH_DFP_CDN_URL = STYTCH_DFP_CDN_URL;
exports.STYTCH_SESSION_COOKIE = STYTCH_SESSION_COOKIE;
exports.STYTCH_SESSION_JWT_COOKIE = STYTCH_SESSION_JWT_COOKIE;
exports.SearchDataManager = SearchDataManager;
exports.SessionManager = SessionManager;
exports.StateChangeClient = StateChangeClient;
exports.SubscriptionDataLayer = SubscriptionDataLayer;
exports.SubscriptionService = SubscriptionService;
exports.TEST_API_URL = TEST_API_URL;
exports.VERTICAL_B2B = VERTICAL_B2B;
exports.VERTICAL_CONSUMER = VERTICAL_CONSUMER;
exports.WILDCARD_ACTION = WILDCARD_ACTION;
exports.baseFetchSDK = baseFetchSDK;
exports.baseSubmitFormSDK = baseSubmitFormSDK;
exports.checkB2BNotSSR = checkB2BNotSSR;
exports.checkNotSSR = checkNotSSR;
exports.checkPublicToken = checkPublicToken;
exports.createAppSessionId = createAppSessionId;
exports.createDeepEqual = createDeepEqual;
exports.createEventId = createEventId;
exports.createPersistentId = createPersistentId;
exports.getDFPBackendURL = getDFPBackendURL;
exports.getDFPCdnURL = getDFPCdnURL;
exports.getLiveApiURL = getLiveApiURL;
exports.getTestApiURL = getTestApiURL;
exports.isEmailMethod = isEmailMethod;
exports.isPhoneMethod = isPhoneMethod;
exports.isTestPublicToken = isTestPublicToken;
exports.loadESModule = loadESModule;
exports.logger = logger;
exports.normalizePromiseLike = normalizePromiseLike;
exports.omitUser = omitUser;
exports.removeResponseCommon = removeResponseCommon;
exports.retriableFetchSDK = retriableFetchSDK;
exports.validate = validate;
