import { HeadlessB2BIDPClient, StateChangeRegisterFunction } from '@stytch/core';
import { StytchProjectConfigurationInput, IHeadlessB2BOAuthClient, IHeadlessB2BMagicLinksClient, IHeadlessB2BSessionClient, IHeadlessB2BMemberClient, IHeadlessB2BSelfClient, IHeadlessB2BOrganizationClient, IHeadlessB2BSSOClient, IHeadlessB2BDiscoveryClient, IHeadlessB2BPasswordClient, IHeadlessB2BOTPsClient, IHeadlessB2BTOTPsClient, IHeadlessB2BRecoveryCodesClient, IHeadlessB2BRBACClient, IHeadlessB2BSCIMClient, IHeadlessB2BImpersonationClient, B2BState, StytchClientOptions } from '@stytch/core/public';
export * from '@stytch/core/public';
import { O as OneTapRenderResult } from '../OneTapClient-zVI7LxJ6.js';
import 'google-one-tap';

type B2BGoogleOneTapDiscoveryOAuthOptions = {
    /**
     * The URL that Stytch redirects to after the Google One Tap discovery flow is completed.
     * This should be a URL that verifies the request by querying Stytch's /oauth/discovery/authenticate endpoint.
     * If this value is not passed, the default discovery redirect URL that you set in your Dashboard is used.
     * If you have not set a default discovery redirect URL, an error is returned.
     */
    discovery_redirect_url?: string;
    /**
     * Controls whether clicking outside the One Tap prompt dismisses the prompt.
     * Defaults to true.
     */
    cancel_on_tap_outside?: boolean;
};
type B2BGoogleOneTapOAuthOptions = {
    /**
     * The ID of the organization that the end user is logging in to.
     */
    organization_id: string;
    /**
     * The URL that Stytch redirects to after the Google One Tap flow is completed for a member who already exists.
     * This should be a URL that verifies the request by querying Stytch's /oauth/authenticate endpoint.
     * If this value is not passed, the default login redirect URL that you set in your Dashboard is used.
     * If you have not set a default login redirect URL, an error is returned.
     */
    login_redirect_url?: string;
    /**
     * The URL that Stytch redirects to after the Google One Tap flow is completed for a member who does not yet exist.
     * This should be a URL that verifies the request by querying Stytch's /oauth/authenticate endpoint.
     * If this value is not passed, the default signup redirect URL that you set in your Dashboard is used.
     * If you have not set a default signup redirect URL, an error is returned.
     */
    signup_redirect_url?: string;
    /**
     * Controls whether clicking outside the One Tap prompt dismisses the prompt.
     * Defaults to true.
     */
    cancel_on_tap_outside?: boolean;
};
interface IB2BGoogleOneTapOAuthProvider {
    discovery: {
        /**
         * Start a discovery OAuth flow by showing the Google one tap prompt in the top right corner of the user's browser.
         * You can configure this to be started by a user action (i.e Button click) or on load/render.
         * @example
         * const showGoogleOneTap = useCallback(()=> {
         *   stytch.oauth.googleOneTap.discovery.start({
         *     discovery_redirect_url: 'https://example.com/oauth/callback',
         *   })
         * }, [stytch]);
         * return (
         *   <Button onClick={showGoogleOneTap}> Show Google one tap </Button>
         * );
         *
         * @param options - A {@link B2BGoogleOneTapDiscoveryOAuthOptions} object
         *
         * @returns A {@link OneTapRenderResult} object. The result object includes if the one-tap prompt
         * was rendered, and a reason if it couldn't be rendered.
         *
         * @throws An Error if the one tap client cannot be created.
         */
        start(options?: B2BGoogleOneTapDiscoveryOAuthOptions): Promise<OneTapRenderResult>;
    };
    /**
     * Start an OAuth flow by showing the Google one tap prompt in the top right corner of the user's browser.
     * You can configure this to be started by a user action (i.e Button click) or on load/render.
     * @example
     * const showGoogleOneTap = useCallback(()=> {
     *   stytch.oauth.googleOneTap.start({
     *     organization_id: 'organization-test-123',
     *   })
     * }, [stytch]);
     * return (
     *   <Button onClick={showGoogleOneTap}> Show Google one tap </Button>
     * );
     *
     * @param options - A {@link B2BGoogleOneTapOAuthOptions} object
     *
     * @returns A {@link OneTapRenderResult} object. The result object includes if the one-tap prompt
     * was rendered, and a reason if it couldn't be rendered.
     *
     * @throws An Error if the one tap client cannot be created.
     */
    start(options?: B2BGoogleOneTapOAuthOptions): Promise<OneTapRenderResult>;
}
interface IWebB2BOAuthClient<TProjectConfiguration extends StytchProjectConfigurationInput> extends IHeadlessB2BOAuthClient<TProjectConfiguration> {
    googleOneTap: IB2BGoogleOneTapOAuthProvider;
}

/**
 * A headless client used for invoking Stytch's B2B APIs.
 * The Stytch Headless Client can be used as a drop-in solution for authentication and session management.
 * Full documentation can be found {@link https://stytch.com/docs/b2b/sdks/javascript-sdk online}.
 *
 * @example
 * const stytch = new StytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>');
 * stytch.magicLinks.email.loginOrCreate({
 *   email: 'sandbox@stytch.com',
 *   organization_id: 'organization-test-123',
 * });
 */
declare class StytchB2BHeadlessClient<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> {
    private readonly _subscriptionService;
    private readonly _sessionManager;
    private readonly _networkClient;
    private readonly _dataLayer;
    private readonly _stateChangeClient;
    magicLinks: IHeadlessB2BMagicLinksClient<TProjectConfiguration>;
    session: IHeadlessB2BSessionClient<TProjectConfiguration>;
    /** @deprecated Please use client.self instead. This will be removed in a future release. */
    member: IHeadlessB2BMemberClient;
    self: IHeadlessB2BSelfClient;
    organization: IHeadlessB2BOrganizationClient;
    oauth: IWebB2BOAuthClient<TProjectConfiguration>;
    sso: IHeadlessB2BSSOClient<TProjectConfiguration>;
    discovery: IHeadlessB2BDiscoveryClient<TProjectConfiguration>;
    passwords: IHeadlessB2BPasswordClient<TProjectConfiguration>;
    otps: IHeadlessB2BOTPsClient<TProjectConfiguration>;
    totp: IHeadlessB2BTOTPsClient<TProjectConfiguration>;
    recoveryCodes: IHeadlessB2BRecoveryCodesClient<TProjectConfiguration>;
    rbac: IHeadlessB2BRBACClient;
    scim: IHeadlessB2BSCIMClient;
    impersonation: IHeadlessB2BImpersonationClient;
    idp: HeadlessB2BIDPClient;
    /**
     * Register a callback function to be invoked whenever certain state changes
     * occur, like a member or session object being updated.
     *
     * This is an alternative to more specific methods like `self.onChange` and
     * `session.onChange`. It can be helpful if you want to be notified of related
     * changes to different parts of state at once.
     *
     * If you are only interested in specific state changes, consider using more
     * specific methods like `self.onChange` and `session.onChange` instead.
     */
    onStateChange: StateChangeRegisterFunction<B2BState>;
    constructor(rawPublicToken: string, options?: StytchClientOptions);
}

export { StytchB2BHeadlessClient };
