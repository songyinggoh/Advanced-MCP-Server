import { StytchProjectConfigurationInput, B2BMFAProducts } from '@stytch/core/public';
import { PartialDeep } from 'type-fest';
import { StytchB2BHeadlessClient } from '../b2b/index.headless.js';
import { RBACPolicyRole, EnumOrStringLiteral } from '@stytch/core';
import * as _stytch_core_dist_public from '@stytch/core/dist/public';
import '../OneTapClient-zVI7LxJ6.js';
import 'google-one-tap';

/**
 * The style configuration allows you to customize the look of the Admin Portal.
 * You can specify some of them or none at all.
 */
interface AdminPortalStyleConfig {
    /**
     * The configuration object for the Admin Portal container.
     */
    container: {
        /**
         * The background color of the Admin Portal container.
         */
        backgroundColor: string;
        /**
         * The border color of the Admin Portal container.
         */
        borderColor: string;
        /**
         * The border radius of the Admin Portal container.
         */
        borderRadius: string;
        /**
         * The width of the Admin Portal container.
         */
        width: string;
        /**
         * The border width of the Admin Portal container.
         */
        borderWidth: string | number;
        /**
         * The padding of the Admin Portal container.
         */
        padding: string | number;
    };
    /**
     * The configuration object for colors used in the Admin Portal.
     */
    colors: {
        /**
         * Your primary brand color. This will be applied to most of the text in the
         * Admin Portal.
         */
        primary: string;
        /**
         * Your secondary brand color. This will be applied to text disclaimers and
         * other visual elements.
         */
        secondary: string;
        /**
         * A success color to be used in visual elements.
         */
        success: string;
        /**
         * An error color to be used in visual elements.
         */
        error: string;
        /**
         * The text color for accent elements. This will be used for tags and select
         * chips in the Admin Portal.
         */
        accentText: string;
        /**
         * An accent color to be used in visual elements. This will be applied to
         * the background of tags and select chips in the Admin Portal.
         */
        accent: string;
        /**
         * The color used for miscellaneous elements that don't require visual
         * elements, like dividers and table, popover menu, and accordion borders.
         */
        subtle: string;
    };
    /**
     * The configuration object for buttons in the Admin Portal.
     */
    buttons: {
        /**
         * The configuration object for primary buttons.
         */
        primary: {
            /**
             * The background color of the primary button.
             */
            backgroundColor: string;
            /**
             * The text color of the primary button.
             */
            textColor: string;
            /**
             * The border color of the primary button.
             */
            borderColor: string;
            /**
             * The border radius of the primary button.
             */
            borderRadius: string;
        };
        /**
         * The configuration object for secondary buttons.
         */
        secondary: {
            /**
             * The background color of the secondary button.
             */
            backgroundColor: string;
            /**
             * The text color of the secondary button.
             */
            textColor: string;
            /**
             * The border color of the secondary button.
             */
            borderColor: string;
            /**
             * The border radius of the secondary button.
             */
            borderRadius: string;
        };
        /**
         * The configuration object for disabled buttons.
         */
        disabled: {
            /**
             * The background color of the disabled button.
             */
            backgroundColor: string;
            /**
             * The text color of the disabled button.
             */
            textColor: string;
            /**
             * The border color of the disabled button.
             */
            borderColor: string;
            /**
             * The border radius of the disabled button.
             */
            borderRadius: string;
        };
    };
    /**
     * The configuration object for text inputs in the Admin Portal.
     */
    inputs: {
        /**
         * The background color of the text inputs.
         */
        backgroundColor: string;
        /**
         * The text color of the text inputs.
         */
        textColor: string;
        /**
         * The color of the placeholder text in the text inputs.
         */
        placeholderColor: string;
        /**
         * The border color of the text inputs.
         */
        borderColor: string;
        /**
         * The border radius of the text inputs.
         */
        borderRadius: string;
    };
    /**
     * The font family that will apply to text in the Admin Portal.
     */
    fontFamily: string;
    /**
     * The default border radius for elements in the Admin Portal.
     */
    borderRadius: string;
}

interface AdminPortalComponentMountOptions<TProjectConfiguration extends StytchProjectConfigurationInput> {
    /**
     * The Stytch B2B client to use.
     */
    client: StytchB2BHeadlessClient<TProjectConfiguration>;
    /**
     * An HTML element or query selector string for the element that should contain the UI.
     * @example '#container'
     */
    element: string | HTMLElement;
    /**
     * An {@link AdminPortalStyleConfig} object containing custom styling info.
     */
    styles?: PartialDeep<AdminPortalStyleConfig>;
}

interface AdminPortalUIConfigRoleDisplayProvider {
    /**
     * A function that returns the display name for a role. By default, the role's
     * ID is used as the display name.
     *
     * @param role The role to get the display name for.
     * @returns The display name for the role.
     */
    getRoleDisplayName?: (role: RBACPolicyRole) => string;
    /**
     * A function that returns the description for a role. By default, the
     * description assigned to the role is used as is.
     *
     * @param role The role to get the description for.
     * @returns The description for the role.
     */
    getRoleDescription?: (role: RBACPolicyRole) => string;
    /**
     * A function that returns the sorted order of roles based on a custom list of role IDs.
     *
     * @param roles The list of roles to be sorted. Each role is an object that includes the role ID.
     * @returns An array of role IDs representing the desired sort order. The returned
     * list may include a subset of role IDs from the input. Roles included in this array
     * will be sorted first. Any roles not specified in the array will appear after the
     * specified roles.
     */
    getRoleSortOrder?: (roles: RBACPolicyRole[]) => string[];
}

/**
 * The UI configuration object for SSO configuration used in the Admin Portal.
 */
type AdminPortalSSOUIConfig = AdminPortalUIConfigRoleDisplayProvider;
interface AdminPortalSSOMountOptions<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> extends AdminPortalComponentMountOptions<TProjectConfiguration> {
    /**
     * An {@link AdminPortalSSOUIConfig} object containing custom configuration.
     */
    config?: AdminPortalSSOUIConfig;
}

/**
 * Mounts the Admin Portal SSO Management component inside the element provided.
 * If the component already been rendered inside the element, it will be updated
 * to use the new options passed in.
 * @example
 * mountAdminPortalSSO({
 *   client: stytchClient,
 *   element: '#container',
 *   styles: {...}
 * });
 *
 * @throws An error when the element specified by elementId cannot be found.
 */
declare const mountAdminPortalSSO: (options: AdminPortalSSOMountOptions<Partial<_stytch_core_dist_public.StytchProjectConfiguration>>) => void;

declare enum AdminPortalB2BProducts {
    emailMagicLinks = "emailMagicLinks",
    emailOtp = "emailOtp",
    sso = "sso",
    password = "password",
    oauthGoogle = "oauthGoogle",
    oauthMicrosoft = "oauthMicrosoft",
    oauthHubspot = "oauthHubspot",
    oauthSlack = "oauthSlack",
    oauthGithub = "oauthGithub"
}

/**
 * The UI configuration object for organization used in the Admin Portal.
 */
interface AdminPortalOrgUIConfig extends AdminPortalUIConfigRoleDisplayProvider {
    /**
     * Specify the auth methods that a member can choose to enable when restricting the organization's allowed auth methods.
     * If not specified, all auth methods are shown.
     */
    allowedAuthMethods?: EnumOrStringLiteral<AdminPortalB2BProducts>[];
    /**
     * Specify the MFA auth methods that a member can choose to enable when restricting the organization's allowed auth methods.
     * If not specified, all auth methods are shown.
     */
    allowedMfaAuthMethods?: EnumOrStringLiteral<B2BMFAProducts>[];
}
interface AdminPortalOrgSettingsMountOptions<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> extends AdminPortalComponentMountOptions<TProjectConfiguration> {
    /**
     * An {@link AdminPortalOrgUIConfig} object containing custom configuration.
     */
    config?: AdminPortalOrgUIConfig;
}

/**
 * Mounts the Admin Portal Organization Settings Management component inside the element provided.
 * If the component already been rendered inside the element, it will be updated
 * to use the new options passed in.
 * @example
 * mountAdminPortalOrgSettings{
 *   client: stytchClient,
 *   element: '#container',
 *   styles: {...},
 *   config: {...},
 * });
 *
 * @throws An error when the element specified by element cannot be found.
 */
declare const mountAdminPortalOrgSettings: (options: AdminPortalOrgSettingsMountOptions<Partial<_stytch_core_dist_public.StytchProjectConfiguration>>) => void;

/**
 * The UI configuration object for member management used in the Admin Portal.
 */
interface AdminPortalMemberManagementUIConfig extends AdminPortalUIConfigRoleDisplayProvider {
    /**
     * The ID of the template to use when sending an invitation to join.
     */
    inviteTemplateId?: string;
}
interface AdminPortalMemberManagementMountOptions<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> extends AdminPortalComponentMountOptions<TProjectConfiguration> {
    /**
     * An {@link AdminPortalMemberManagementUIConfig} object containing custom configuration.
     */
    config?: AdminPortalMemberManagementUIConfig;
}

/**
 * Mounts the Admin Portal Member Management component inside the element provided.
 * If the component already been rendered inside the element, it will be updated
 * to use the new options passed in.
 * @example
 * mountAdminPortalMemberManagement({
 *   client: stytchClient,
 *   element: '#container',
 *   styles: {...}
 * });
 *
 * @throws An error when the element specified cannot be found.
 */
declare const mountAdminPortalMemberManagement: (options: AdminPortalMemberManagementMountOptions<Partial<_stytch_core_dist_public.StytchProjectConfiguration>>) => void;

/**
 * The UI configuration object for SCIM used in the Admin Portal.
 */
type AdminPortalSCIMUIConfig = AdminPortalUIConfigRoleDisplayProvider;
interface AdminPortalSCIMMountOptions<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> extends AdminPortalComponentMountOptions<TProjectConfiguration> {
    /**
     * An {@link AdminPortalSCIMUIConfig} object containing custom configuration.
     */
    config?: AdminPortalSCIMUIConfig;
}

/**
 * Mounts the Admin Portal SCIM Management component inside the element provided.
 * If the component already been rendered inside the element, it will be updated
 * to use the new options passed in.
 * @example
 * mountAdminPortalSCIM{
 *   client: stytchClient,
 *   element: '#container',
 *   styles: {...},
 * });
 *
 * @throws An error when the element specified by element cannot be found.
 */
declare const mountAdminPortalSCIM: (options: AdminPortalSCIMMountOptions<Partial<_stytch_core_dist_public.StytchProjectConfiguration>>) => void;

export { AdminPortalB2BProducts, type AdminPortalMemberManagementMountOptions, type AdminPortalOrgSettingsMountOptions, type AdminPortalSCIMMountOptions, type AdminPortalSSOMountOptions, type AdminPortalStyleConfig, mountAdminPortalMemberManagement, mountAdminPortalOrgSettings, mountAdminPortalSCIM, mountAdminPortalSSO };
