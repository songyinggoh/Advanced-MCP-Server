function _typeof2(o) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof2(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey2(t) { var i = _toPrimitive2(t, "string"); return "symbol" == _typeof2(i) ? i : i + ""; }
function _toPrimitive2(t, r) { if ("object" != _typeof2(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof2(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray2(r, e) { return _arrayWithHoles2(r) || _iterableToArrayLimit2(r, e) || _unsupportedIterableToArray2(r, e) || _nonIterableRest2(); }
function _nonIterableRest2() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray2(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray2(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray2(r, a) : void 0; } }
function _arrayLikeToArray2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit2(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles2(r) { if (Array.isArray(r)) return r; }
function _typeof$1(o) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$1(o);
}
function _defineProperties$1(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$1(o.key), o);
  }
}
function _createClass$1(e, r, t) {
  return r && _defineProperties$1(e.prototype, r), t && _defineProperties$1(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _toPropertyKey$1(t) {
  var i = _toPrimitive$1(t, "string");
  return "symbol" == _typeof$1(i) ? i : i + "";
}
function _toPrimitive$1(t, r) {
  if ("object" != _typeof$1(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof$1(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t);
}
function _classCallCheck$1(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _callSuper$1(t, o, e) {
  return o = _getPrototypeOf$1(o), _possibleConstructorReturn$1(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf$1(t).constructor) : o.apply(t, e));
}
function _possibleConstructorReturn$1(t, e) {
  if (e && ("object" == _typeof$1(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized$1(t);
}
function _assertThisInitialized$1(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _inherits$1(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf$1(t, e);
}
function _wrapNativeSuper$1(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper$1 = function _wrapNativeSuper(t) {
    if (null === t || !_isNativeFunction$1(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct$1(t, arguments, _getPrototypeOf$1(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf$1(Wrapper, t);
  }, _wrapNativeSuper$1(t);
}
function _construct$1(t, e, r) {
  if (_isNativeReflectConstruct$1()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf$1(p, r.prototype), p;
}
function _isNativeReflectConstruct$1() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function _isNativeFunction$1(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
function _setPrototypeOf$1(t, e) {
  return _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf$1(t, e);
}
function _getPrototypeOf$1(t) {
  return _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf$1(t);
}
var Products;
(function (Products) {
  Products["emailMagicLinks"] = "emailMagicLinks";
  Products["oauth"] = "oauth";
  Products["otp"] = "otp";
  Products["crypto"] = "crypto";
  Products["passwords"] = "passwords";
  Products["passkeys"] = "passkeys";
})(Products || (Products = {}));
var OAuthProviders;
(function (OAuthProviders) {
  OAuthProviders["Google"] = "google";
  OAuthProviders["Microsoft"] = "microsoft";
  OAuthProviders["Apple"] = "apple";
  OAuthProviders["Github"] = "github";
  OAuthProviders["GitLab"] = "gitlab";
  OAuthProviders["Facebook"] = "facebook";
  OAuthProviders["Discord"] = "discord";
  OAuthProviders["Salesforce"] = "salesforce";
  OAuthProviders["Slack"] = "slack";
  OAuthProviders["Amazon"] = "amazon";
  OAuthProviders["Bitbucket"] = "bitbucket";
  OAuthProviders["LinkedIn"] = "linkedin";
  OAuthProviders["Coinbase"] = "coinbase";
  OAuthProviders["Twitch"] = "twitch";
  OAuthProviders["Twitter"] = "twitter";
  OAuthProviders["TikTok"] = "tiktok";
  OAuthProviders["Snapchat"] = "snapchat";
  OAuthProviders["Figma"] = "figma";
  OAuthProviders["Yahoo"] = "yahoo";
})(OAuthProviders || (OAuthProviders = {}));
var Wallets;
(function (Wallets) {
  Wallets["Vessel"] = "Vessel";
  Wallets["Phantom"] = "Phantom";
  Wallets["Metamask"] = "Metamask";
  Wallets["Coinbase"] = "Coinbase";
  Wallets["Binance"] = "Binance";
  Wallets["GenericEthereumWallet"] = "Other Ethereum Wallet";
  Wallets["GenericSolanaWallet"] = "Other Solana Wallet";
})(Wallets || (Wallets = {}));
var OneTapPositions;
(function (OneTapPositions) {
  OneTapPositions["embedded"] = "embedded";
  OneTapPositions["floating"] = "floating";
  OneTapPositions["embeddedOnly"] = "embeddedOnly";
  OneTapPositions["floatingOrEmbedded"] = "floatingOrEmbedded";
  OneTapPositions["forceLegacyEmbedded"] = "forceLegacyEmbedded";
})(OneTapPositions || (OneTapPositions = {}));
var OTPMethods;
(function (OTPMethods) {
  OTPMethods["SMS"] = "sms";
  OTPMethods["WhatsApp"] = "whatsapp";
  OTPMethods["Email"] = "email";
})(OTPMethods || (OTPMethods = {}));
var StytchEventType;
(function (StytchEventType) {
  StytchEventType["MagicLinkLoginOrCreateEvent"] = "MAGIC_LINK_LOGIN_OR_CREATE";
  StytchEventType["OTPsLoginOrCreateEvent"] = "OTP_LOGIN_OR_CREATE";
  StytchEventType["OTPsAuthenticate"] = "OTP_AUTHENTICATE";
  StytchEventType["CryptoWalletAuthenticateStart"] = "CRYPTO_WALLET_AUTHENTICATE_START";
  StytchEventType["CryptoWalletAuthenticate"] = "CRYPTO_WALLET_AUTHENTICATE";
  StytchEventType["PasswordCreate"] = "PASSWORD_CREATE";
  StytchEventType["PasswordAuthenticate"] = "PASSWORD_AUTHENTICATE";
  StytchEventType["PasswordResetByEmailStart"] = "PASSWORD_RESET_BY_EMAIL_START";
  StytchEventType["PasswordResetByEmail"] = "PASSWORD_RESET_BY_EMAIL";
  StytchEventType["PasskeyRegister"] = "PASSKEY_REGISTER";
  StytchEventType["PasskeyAuthenticate"] = "PASSKEY_AUTHENTICATE";
  StytchEventType["PasskeySkip"] = "PASSKEY_SKIP";
  StytchEventType["PasskeyDone"] = "PASSKEY_DONE";
  StytchEventType["AuthenticateFlowComplete"] = "AUTHENTICATE_FLOW_COMPLETE";
  StytchEventType["OAuthAuthorizeFlowStart"] = "OAUTH_AUTHORIZE_FLOW_START";
  StytchEventType["OAuthAuthorizeFlowComplete"] = "OAUTH_AUTHORIZE_FLOW_COMPLETE";
  StytchEventType["OAuthAuthorizeFlowConsentDenied"] = "OAUTH_AUTHORIZE_FLOW_CONSENT_DENIED";
  StytchEventType["B2BMagicLinkEmailLoginOrSignup"] = "B2B_MAGIC_LINK_EMAIL_LOGIN_OR_SIGNUP";
  StytchEventType["B2BMagicLinkAuthenticate"] = "B2B_MAGIC_LINK_AUTHENTICATE";
  StytchEventType["B2BMagicLinkEmailDiscoverySend"] = "B2B_MAGIC_LINK_EMAIL_DISCOVERY_SEND";
  StytchEventType["B2BMagicLinkDiscoveryAuthenticate"] = "B2B_MAGIC_LINK_DISCOVERY_AUTHENTICATE";
  StytchEventType["B2BSSOStart"] = "B2B_SSO_START";
  StytchEventType["B2BSSOAuthenticate"] = "B2B_SSO_AUTHENTICATE";
  StytchEventType["B2BSSODiscoverConnections"] = "B2B_SSO_DISCOVER_CONNECTIONS";
  StytchEventType["B2BOAuthAuthenticate"] = "B2B_OAUTH_AUTHENTICATE";
  StytchEventType["B2BOAuthDiscoveryAuthenticate"] = "B2B_OAUTH_DISCOVERY_AUTHENTICATE";
  StytchEventType["B2BDiscoveryOrganizationsCreate"] = "B2B_DISCOVERY_ORGANIZATIONS_CREATE";
  StytchEventType["B2BDiscoveryIntermediateSessionExchange"] = "B2B_DISCOVERY_INTERMEDIATE_SESSION_EXCHANGE";
  StytchEventType["B2BPasswordAuthenticate"] = "B2B_PASSWORD_AUTHENTICATE";
  StytchEventType["B2BPasswordDiscoveryAuthenticate"] = "B2B_PASSWORD_DISCOVERY_AUTHENTICATE";
  StytchEventType["B2BPasswordResetByEmailStart"] = "B2B_PASSWORD_RESET_BY_EMAIL_START";
  StytchEventType["B2BPasswordResetByEmail"] = "B2B_PASSWORD_RESET_BY_EMAIL";
  StytchEventType["B2BPasswordResetBySession"] = "B2B_PASSWORD_RESET_BY_SESSION";
  StytchEventType["B2BSMSOTPSend"] = "B2B_SMS_OTP_SEND";
  StytchEventType["B2BSMSOTPAuthenticate"] = "B2B_SMS_OTP_AUTHENTICATE";
  StytchEventType["B2BTOTPCreate"] = "B2B_TOTP_CREATE";
  StytchEventType["B2BTOTPAuthenticate"] = "B2B_TOTP_AUTHENTICATE";
  StytchEventType["B2BRecoveryCodesRecover"] = "B2B_RECOVERY_CODES_RECOVER";
  StytchEventType["B2BPasswordDiscoveryResetStart"] = "B2B_PASSWORD_DISCOVERY_RESET_BY_EMAIL_START";
  StytchEventType["B2BDiscoveryPasswordReset"] = "B2B_PASSWORD_DISCOVERY_RESET_BY_EMAIL";
  StytchEventType["B2BImpersonationAuthenticate"] = "B2B_IMPERSONATION_AUTHENTICATE";
  StytchEventType["B2BOTPsEmailAuthenticate"] = "B2B_OTPS_EMAIL_AUTHENTICATE";
  StytchEventType["B2BOTPsEmailDiscoveryAuthenticate"] = "B2B_OTPS_EMAIL_DISCOVERY_AUTHENTICATE";
  StytchEventType["B2BOTPsEmailDiscoverySend"] = "B2B_OTPS_EMAIL_DISCOVERY_SEND";
  StytchEventType["B2BOTPsEmailLoginOrSignup"] = "B2B_OTPS_EMAIL_LOGIN_OR_SIGNUP";
  StytchEventType["B2BOrganizationsGetBySlug"] = "B2B_ORGANIZATIONS_GET_BY_SLUG";
})(StytchEventType || (StytchEventType = {}));
var RNUIProducts;
(function (RNUIProducts) {
  RNUIProducts[RNUIProducts["emailMagicLinks"] = 0] = "emailMagicLinks";
  RNUIProducts[RNUIProducts["oauth"] = 1] = "oauth";
  RNUIProducts[RNUIProducts["otp"] = 2] = "otp";
  RNUIProducts[RNUIProducts["passwords"] = 3] = "passwords";
})(RNUIProducts || (RNUIProducts = {}));
var SDKAPIUnreachableError = /*#__PURE__*/function (_Error) {
  function SDKAPIUnreachableError(message, details) {
    var _this;
    _classCallCheck$1(this, SDKAPIUnreachableError);
    _this = _callSuper$1(this, SDKAPIUnreachableError, [message + '\n' + details]);
    _this.message = message + '\n' + details;
    _this.name = 'SDKAPIUnreachableError';
    _this.details = details;
    Object.setPrototypeOf(_this, SDKAPIUnreachableError.prototype);
    return _this;
  }
  _inherits$1(SDKAPIUnreachableError, _Error);
  return _createClass$1(SDKAPIUnreachableError);
}(/*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchSDKUsageError = /*#__PURE__*/function (_Error2) {
  function StytchSDKUsageError(methodName, message) {
    var _this2;
    _classCallCheck$1(this, StytchSDKUsageError);
    _this2 = _callSuper$1(this, StytchSDKUsageError);
    _this2.name = 'StytchSDKUsageError';
    _this2.message = "Invalid call to ".concat(methodName, "\n") + message;
    return _this2;
  }
  _inherits$1(StytchSDKUsageError, _Error2);
  return _createClass$1(StytchSDKUsageError);
}(/*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchSDKSchemaError = /*#__PURE__*/function (_Error3) {
  function StytchSDKSchemaError(schemaError) {
    var _this3;
    _classCallCheck$1(this, StytchSDKSchemaError);
    var _a;
    _this3 = _callSuper$1(this, StytchSDKSchemaError);
    _this3.name = 'StytchSDKSchemaError';
    var messages = (_a = schemaError.body) === null || _a === void 0 ? void 0 : _a.map(function (err) {
      return "".concat(err.dataPath, ": ").concat(err.message);
    }).join('\n');
    _this3.message = "[400] Request does not match expected schema\n".concat(messages);
    return _this3;
  }
  _inherits$1(StytchSDKSchemaError, _Error3);
  return _createClass$1(StytchSDKSchemaError);
}(/*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchSDKAPIError = /*#__PURE__*/function (_Error4) {
  function StytchSDKAPIError(details) {
    var _this4;
    _classCallCheck$1(this, StytchSDKAPIError);
    _this4 = _callSuper$1(this, StytchSDKAPIError);
    _this4.name = 'StytchSDKAPIError';
    var status_code = details.status_code,
      error_type = details.error_type,
      error_message = details.error_message,
      error_url = details.error_url,
      request_id = details.request_id,
      error_details = details.error_details;
    _this4.error_type = error_type;
    _this4.error_message = error_message;
    _this4.error_url = error_url;
    _this4.request_id = request_id;
    _this4.status_code = status_code;
    _this4.error_details = error_details;
    _this4.message = "[".concat(status_code, "] ").concat(error_type, "\n") + "".concat(error_message, "\n") + "See ".concat(error_url, " for more information.\n") + (request_id ? "request_id: ".concat(request_id, "\n") : '') + (_this4.error_details ? "Details: \n" + JSON.stringify(_this4.error_details) + '\n' : '');
    return _this4;
  }
  _inherits$1(StytchSDKAPIError, _Error4);
  return _createClass$1(StytchSDKAPIError);
}(/*#__PURE__*/_wrapNativeSuper$1(Error));
var UNRECOVERABLE_ERROR_TYPES = ['unauthorized_credentials', 'user_unauthenticated', 'invalid_secret_authentication', 'session_not_found'];
var StytchError = /*#__PURE__*/function (_Error5) {
  function StytchError(name, message) {
    var _this5;
    _classCallCheck$1(this, StytchError);
    _this5 = _callSuper$1(this, StytchError, [message]);
    _this5.name = name;
    return _this5;
  }
  _inherits$1(StytchError, _Error5);
  return _createClass$1(StytchError);
}(/*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchAPIUnreachableError = /*#__PURE__*/function (_StytchError) {
  function StytchAPIUnreachableError(details) {
    var _this6;
    _classCallCheck$1(this, StytchAPIUnreachableError);
    _this6 = _callSuper$1(this, StytchAPIUnreachableError, ['StytchAPIUnreachableError', details]);
    Object.setPrototypeOf(_this6, StytchAPIUnreachableError.prototype);
    return _this6;
  }
  _inherits$1(StytchAPIUnreachableError, _StytchError);
  return _createClass$1(StytchAPIUnreachableError);
}(StytchError);
var StytchAPISchemaError = /*#__PURE__*/function (_StytchError2) {
  function StytchAPISchemaError(schemaError) {
    _classCallCheck$1(this, StytchAPISchemaError);
    var _a;
    var messages = (_a = schemaError.body) === null || _a === void 0 ? void 0 : _a.map(function (err) {
      return "".concat(err.dataPath, ": ").concat(err.message);
    }).join('\n');
    return _callSuper$1(this, StytchAPISchemaError, ['StytchAPISchemaError', "Request does not match expected schema\n".concat(messages)]);
  }
  _inherits$1(StytchAPISchemaError, _StytchError2);
  return _createClass$1(StytchAPISchemaError);
}(StytchError);
var StytchAPIError = /*#__PURE__*/function (_StytchError3) {
  function StytchAPIError(details) {
    var _this7;
    _classCallCheck$1(this, StytchAPIError);
    var status_code = details.status_code,
      error_type = details.error_type,
      error_message = details.error_message,
      error_url = details.error_url,
      request_id = details.request_id,
      error_details = details.error_details;
    _this7 = _callSuper$1(this, StytchAPIError, ['StytchAPIError', "[".concat(status_code, "] ").concat(error_type, "\n") + "".concat(error_message, "\n") + "See ".concat(error_url, " for more information.\n") + (request_id ? "request_id: ".concat(request_id, "\n") : '') + (error_details ? "Details: \n" + JSON.stringify(error_details) + '\n' : '')]);
    _this7.error_type = error_type;
    _this7.error_message = error_message;
    _this7.error_url = error_url;
    _this7.request_id = request_id;
    _this7.status_code = status_code;
    _this7.error_details = error_details;
    return _this7;
  }
  _inherits$1(StytchAPIError, _StytchError3);
  return _createClass$1(StytchAPIError, null, [{
    key: "from",
    value: function from(err) {
      if (err instanceof StytchAPIError) {
        return err;
      }
      if (err && _typeof$1(err) === 'object') {
        var maybe = err;
        if (typeof maybe.status_code === 'number' && typeof maybe.error_type === 'string' && typeof maybe.error_message === 'string' && typeof maybe.error_url === 'string') {
          return new StytchAPIError({
            status_code: maybe.status_code,
            error_type: maybe.error_type,
            error_message: maybe.error_message,
            error_url: maybe.error_url,
            request_id: typeof maybe.request_id === 'string' ? maybe.request_id : undefined,
            error_details: _typeof$1(maybe.error_details) === 'object' ? maybe.error_details : undefined
          });
        }
      }
      var message = err instanceof Error ? err.message : 'Unknown error: ' + String(err);
      return new StytchAPIError({
        status_code: 400,
        error_type: 'unknown_error',
        error_message: message,
        error_url: '',
        request_id: undefined,
        error_details: undefined
      });
    }
  }]);
}(StytchError);
var StytchSDKError = /*#__PURE__*/function (_StytchError4) {
  function StytchSDKError(name, description, options) {
    var _this8;
    _classCallCheck$1(this, StytchSDKError);
    _this8 = _callSuper$1(this, StytchSDKError, [name, description]);
    _this8.options = options;
    return _this8;
  }
  _inherits$1(StytchSDKError, _StytchError4);
  return _createClass$1(StytchSDKError);
}(StytchError);
var NoCurrentSessionError = /*#__PURE__*/function (_StytchSDKError) {
  function NoCurrentSessionError() {
    _classCallCheck$1(this, NoCurrentSessionError);
    return _callSuper$1(this, NoCurrentSessionError, ['NoCurrentSessionError', 'There is no session currently available. Make sure the user is authenticated with a valid session.']);
  }
  _inherits$1(NoCurrentSessionError, _StytchSDKError);
  return _createClass$1(NoCurrentSessionError);
}(StytchSDKError);
var InternalError = /*#__PURE__*/function (_StytchSDKError2) {
  function InternalError(error) {
    var _this9;
    _classCallCheck$1(this, InternalError);
    _this9 = _callSuper$1(this, InternalError, [error.name ? error.name : 'Internal Error', error.message ? error.message : 'An internal error has occurred. Please contact Stytch if this occurs.']);
    _this9.nativeStack = error.nativeStackAndroid || error.nativeStackIOS;
    return _this9;
  }
  _inherits$1(InternalError, _StytchSDKError2);
  return _createClass$1(InternalError);
}(StytchSDKError);
var NoBiometricsRegistrationError = /*#__PURE__*/function (_StytchSDKError3) {
  function NoBiometricsRegistrationError() {
    _classCallCheck$1(this, NoBiometricsRegistrationError);
    return _callSuper$1(this, NoBiometricsRegistrationError, ['NoBiometricsRegistrationError', 'There is no biometric registration available. Authenticate with another method and add a new biometric registration first.']);
  }
  _inherits$1(NoBiometricsRegistrationError, _StytchSDKError3);
  return _createClass$1(NoBiometricsRegistrationError);
}(StytchSDKError);
var BiometricsUnavailableError = /*#__PURE__*/function (_StytchSDKError4) {
  function BiometricsUnavailableError() {
    _classCallCheck$1(this, BiometricsUnavailableError);
    return _callSuper$1(this, BiometricsUnavailableError, ['BiometricsUnavailableError', 'Biometrics is not available on the device.']);
  }
  _inherits$1(BiometricsUnavailableError, _StytchSDKError4);
  return _createClass$1(BiometricsUnavailableError);
}(StytchSDKError);
var KeyInvalidatedError = /*#__PURE__*/function (_StytchSDKError5) {
  function KeyInvalidatedError() {
    _classCallCheck$1(this, KeyInvalidatedError);
    return _callSuper$1(this, KeyInvalidatedError, ['KeyInvalidatedError', 'The biometrics enrollment on the device has changed.']);
  }
  _inherits$1(KeyInvalidatedError, _StytchSDKError5);
  return _createClass$1(KeyInvalidatedError);
}(StytchSDKError);
var KeystoreUnavailableError = /*#__PURE__*/function (_StytchSDKError6) {
  function KeystoreUnavailableError() {
    _classCallCheck$1(this, KeystoreUnavailableError);
    return _callSuper$1(this, KeystoreUnavailableError, ['KeystoreUnavailableError', 'The Android keystore is unavailable on the device. Consider setting allowFallbackToCleartext to true.']);
  }
  _inherits$1(KeystoreUnavailableError, _StytchSDKError6);
  return _createClass$1(KeystoreUnavailableError);
}(StytchSDKError);
var NoBiometricsEnrolledError = /*#__PURE__*/function (_StytchSDKError7) {
  function NoBiometricsEnrolledError() {
    _classCallCheck$1(this, NoBiometricsEnrolledError);
    return _callSuper$1(this, NoBiometricsEnrolledError, ['NoBiometricsEnrolledError', 'There is no biometric factor enrolled on the device. Add a biometric factor in the device settings.']);
  }
  _inherits$1(NoBiometricsEnrolledError, _StytchSDKError7);
  return _createClass$1(NoBiometricsEnrolledError);
}(StytchSDKError);
var BiometricsAlreadyEnrolledError = /*#__PURE__*/function (_StytchSDKError8) {
  function BiometricsAlreadyEnrolledError() {
    _classCallCheck$1(this, BiometricsAlreadyEnrolledError);
    return _callSuper$1(this, BiometricsAlreadyEnrolledError, ['BiometricsAlreadyEnrolledError', 'There is already a biometric factor enrolled on this device. Fully authenticate with all factors and remove the existing registration before attempting to register again.']);
  }
  _inherits$1(BiometricsAlreadyEnrolledError, _StytchSDKError8);
  return _createClass$1(BiometricsAlreadyEnrolledError);
}(StytchSDKError);
var UserCancellationError = /*#__PURE__*/function (_StytchSDKError9) {
  function UserCancellationError() {
    _classCallCheck$1(this, UserCancellationError);
    return _callSuper$1(this, UserCancellationError, ['UserCancellationError', 'The user canceled the prompt. Ask the user to try again.']);
  }
  _inherits$1(UserCancellationError, _StytchSDKError9);
  return _createClass$1(UserCancellationError);
}(StytchSDKError);
var UserLockedOutError = /*#__PURE__*/function (_StytchSDKError0) {
  function UserLockedOutError() {
    _classCallCheck$1(this, UserLockedOutError);
    return _callSuper$1(this, UserLockedOutError, ['UserLockedOutError', 'The user has been locked out due to too many failed attempts. Ask the user to try again later.']);
  }
  _inherits$1(UserLockedOutError, _StytchSDKError0);
  return _createClass$1(UserLockedOutError);
}(StytchSDKError);
var DeviceCredentialsNotAllowedError = /*#__PURE__*/function (_StytchSDKError1) {
  function DeviceCredentialsNotAllowedError() {
    _classCallCheck$1(this, DeviceCredentialsNotAllowedError);
    return _callSuper$1(this, DeviceCredentialsNotAllowedError, ['DeviceCredentialsNotAllowedError', 'The device credentials allowment is mismatched. Change the allowDeviceCredentials parameter to be the same in both the register and authenticate methods.']);
  }
  _inherits$1(DeviceCredentialsNotAllowedError, _StytchSDKError1);
  return _createClass$1(DeviceCredentialsNotAllowedError);
}(StytchSDKError);
var MissingGoogleClientIDError = /*#__PURE__*/function (_StytchSDKError10) {
  function MissingGoogleClientIDError() {
    _classCallCheck$1(this, MissingGoogleClientIDError);
    return _callSuper$1(this, MissingGoogleClientIDError, ['MissingGoogleClientIDError', 'No Google client ID was found in the project.']);
  }
  _inherits$1(MissingGoogleClientIDError, _StytchSDKError10);
  return _createClass$1(MissingGoogleClientIDError);
}(StytchSDKError);
var MissingPKCEError = /*#__PURE__*/function (_StytchSDKError11) {
  function MissingPKCEError() {
    _classCallCheck$1(this, MissingPKCEError);
    return _callSuper$1(this, MissingPKCEError, ['MissingPKCEError', 'Make sure this flow is completed on the same device on which it was started.']);
  }
  _inherits$1(MissingPKCEError, _StytchSDKError11);
  return _createClass$1(MissingPKCEError);
}(StytchSDKError);
var MissingAuthorizationCredentialIDTokenError = /*#__PURE__*/function (_StytchSDKError12) {
  function MissingAuthorizationCredentialIDTokenError() {
    _classCallCheck$1(this, MissingAuthorizationCredentialIDTokenError);
    return _callSuper$1(this, MissingAuthorizationCredentialIDTokenError, ['MissingAuthorizationCredentialIDTokenError', 'The authorization credential is missing an ID token.']);
  }
  _inherits$1(MissingAuthorizationCredentialIDTokenError, _StytchSDKError12);
  return _createClass$1(MissingAuthorizationCredentialIDTokenError);
}(StytchSDKError);
var InvalidAuthorizationCredentialError = /*#__PURE__*/function (_StytchSDKError13) {
  function InvalidAuthorizationCredentialError() {
    _classCallCheck$1(this, InvalidAuthorizationCredentialError);
    return _callSuper$1(this, InvalidAuthorizationCredentialError, ['InvalidAuthorizationCredentialError', 'The authorization credential is invalid. Verify that OAuth is set up correctly in the developer console, and call the start flow method.']);
  }
  _inherits$1(InvalidAuthorizationCredentialError, _StytchSDKError13);
  return _createClass$1(InvalidAuthorizationCredentialError);
}(StytchSDKError);
var NoCredentialsPresentError = /*#__PURE__*/function (_StytchSDKError14) {
  function NoCredentialsPresentError() {
    _classCallCheck$1(this, NoCredentialsPresentError);
    return _callSuper$1(this, NoCredentialsPresentError, ['NoCredentialsPresentError', 'The user did not provide credentials for a Google OneTap attempt']);
  }
  _inherits$1(NoCredentialsPresentError, _StytchSDKError14);
  return _createClass$1(NoCredentialsPresentError);
}(StytchSDKError);
var MissingPublicKeyError = /*#__PURE__*/function (_StytchSDKError15) {
  function MissingPublicKeyError() {
    _classCallCheck$1(this, MissingPublicKeyError);
    return _callSuper$1(this, MissingPublicKeyError, ['MissingPublicKeyError', 'Failed to retrieve the public key. Add a new biometric registration.']);
  }
  _inherits$1(MissingPublicKeyError, _StytchSDKError15);
  return _createClass$1(MissingPublicKeyError);
}(StytchSDKError);
var ChallengeSigningFailedError = /*#__PURE__*/function (_StytchSDKError16) {
  function ChallengeSigningFailedError() {
    _classCallCheck$1(this, ChallengeSigningFailedError);
    return _callSuper$1(this, ChallengeSigningFailedError, ['ChallengeSigningFailedError', 'Failed to sign the challenge with the key.']);
  }
  _inherits$1(ChallengeSigningFailedError, _StytchSDKError16);
  return _createClass$1(ChallengeSigningFailedError);
}(StytchSDKError);
var SDKNotConfiguredError = /*#__PURE__*/function (_StytchSDKError17) {
  function SDKNotConfiguredError() {
    _classCallCheck$1(this, SDKNotConfiguredError);
    return _callSuper$1(this, SDKNotConfiguredError, ['SDKNotConfiguredError', 'Stytch client is not confiured. You must call the configure method before using the SDK']);
  }
  _inherits$1(SDKNotConfiguredError, _StytchSDKError17);
  return _createClass$1(SDKNotConfiguredError);
}(StytchSDKError);
var FailedCodeChallengeError = /*#__PURE__*/function (_StytchSDKError18) {
  function FailedCodeChallengeError() {
    _classCallCheck$1(this, FailedCodeChallengeError);
    return _callSuper$1(this, FailedCodeChallengeError, ['FailedCodeChallengeError', 'Failed to create a code challenge']);
  }
  _inherits$1(FailedCodeChallengeError, _StytchSDKError18);
  return _createClass$1(FailedCodeChallengeError);
}(StytchSDKError);
var PasskeysUnsupportedError = /*#__PURE__*/function (_StytchSDKError19) {
  function PasskeysUnsupportedError() {
    _classCallCheck$1(this, PasskeysUnsupportedError);
    return _callSuper$1(this, PasskeysUnsupportedError, ['PasskeysUnsupportedError', 'Passkeys are not supported on this device']);
  }
  _inherits$1(PasskeysUnsupportedError, _StytchSDKError19);
  return _createClass$1(PasskeysUnsupportedError);
}(StytchSDKError);
var FailedToDecryptDataError = /*#__PURE__*/function (_StytchSDKError20) {
  function FailedToDecryptDataError() {
    _classCallCheck$1(this, FailedToDecryptDataError);
    return _callSuper$1(this, FailedToDecryptDataError, ['FailedToDecryptDataError', 'Failed to decrypt user data']);
  }
  _inherits$1(FailedToDecryptDataError, _StytchSDKError20);
  return _createClass$1(FailedToDecryptDataError);
}(StytchSDKError);
var BiometricsFailedError = /*#__PURE__*/function (_StytchSDKError21) {
  function BiometricsFailedError() {
    _classCallCheck$1(this, BiometricsFailedError);
    return _callSuper$1(this, BiometricsFailedError, ['BiometricsFailedError', 'Biometric authentication failed']);
  }
  _inherits$1(BiometricsFailedError, _StytchSDKError21);
  return _createClass$1(BiometricsFailedError);
}(StytchSDKError);
var InvalidStartUrlError = /*#__PURE__*/function (_StytchSDKError22) {
  function InvalidStartUrlError() {
    _classCallCheck$1(this, InvalidStartUrlError);
    return _callSuper$1(this, InvalidStartUrlError, ['InvalidStartUrlError', 'The start URL was invalid or improperly formatted.']);
  }
  _inherits$1(InvalidStartUrlError, _StytchSDKError22);
  return _createClass$1(InvalidStartUrlError);
}(StytchSDKError);
var InvalidRedirectSchemeError = /*#__PURE__*/function (_StytchSDKError23) {
  function InvalidRedirectSchemeError() {
    _classCallCheck$1(this, InvalidRedirectSchemeError);
    return _callSuper$1(this, InvalidRedirectSchemeError, ['InvalidRedirectSchemeError', 'The scheme from the given redirect urls was invalid. Possible reasons include: nil scheme, non-custom scheme (using http or https), or differing schemes for login/signup urls.']);
  }
  _inherits$1(InvalidRedirectSchemeError, _StytchSDKError23);
  return _createClass$1(InvalidRedirectSchemeError);
}(StytchSDKError);
var MissingUrlError = /*#__PURE__*/function (_StytchSDKError24) {
  function MissingUrlError() {
    _classCallCheck$1(this, MissingUrlError);
    return _callSuper$1(this, MissingUrlError, ['MissingUrlError', 'The underlying web authentication service failed to return a URL.']);
  }
  _inherits$1(MissingUrlError, _StytchSDKError24);
  return _createClass$1(MissingUrlError);
}(StytchSDKError);
var InvalidCredentialTypeError = /*#__PURE__*/function (_StytchSDKError25) {
  function InvalidCredentialTypeError() {
    _classCallCheck$1(this, InvalidCredentialTypeError);
    return _callSuper$1(this, InvalidCredentialTypeError, ['InvalidCredentialTypeError', 'The public key credential type was not of the expected type.']);
  }
  _inherits$1(InvalidCredentialTypeError, _StytchSDKError25);
  return _createClass$1(InvalidCredentialTypeError);
}(StytchSDKError);
var MissingAttestationObjectError = /*#__PURE__*/function (_StytchSDKError26) {
  function MissingAttestationObjectError() {
    _classCallCheck$1(this, MissingAttestationObjectError);
    return _callSuper$1(this, MissingAttestationObjectError, ['MissingAttestationObjectError', 'The public key credential is missing the attestation object.']);
  }
  _inherits$1(MissingAttestationObjectError, _StytchSDKError26);
  return _createClass$1(MissingAttestationObjectError);
}(StytchSDKError);
var JSONDataNotConvertibleToStringError = /*#__PURE__*/function (_StytchSDKError27) {
  function JSONDataNotConvertibleToStringError() {
    _classCallCheck$1(this, JSONDataNotConvertibleToStringError);
    return _callSuper$1(this, JSONDataNotConvertibleToStringError, ['JSONDataNotConvertibleToStringError', 'JSON data unable to be converted to String type.']);
  }
  _inherits$1(JSONDataNotConvertibleToStringError, _StytchSDKError27);
  return _createClass$1(JSONDataNotConvertibleToStringError);
}(StytchSDKError);
var RandomNumberGenerationFailed = /*#__PURE__*/function (_StytchSDKError28) {
  function RandomNumberGenerationFailed() {
    _classCallCheck$1(this, RandomNumberGenerationFailed);
    return _callSuper$1(this, RandomNumberGenerationFailed, ['RandomNumberGenerationFailed', 'Random number generation failed']);
  }
  _inherits$1(RandomNumberGenerationFailed, _StytchSDKError28);
  return _createClass$1(RandomNumberGenerationFailed);
}(StytchSDKError);
var PasskeysInvalidEncoding = /*#__PURE__*/function (_StytchSDKError29) {
  function PasskeysInvalidEncoding() {
    _classCallCheck$1(this, PasskeysInvalidEncoding);
    return _callSuper$1(this, PasskeysInvalidEncoding, ['PasskeysInvalidEncoding', 'Invalid passkey encoding']);
  }
  _inherits$1(PasskeysInvalidEncoding, _StytchSDKError29);
  return _createClass$1(PasskeysInvalidEncoding);
}(StytchSDKError);
var PasskeysMisconfigured = /*#__PURE__*/function (_StytchSDKError30) {
  function PasskeysMisconfigured() {
    _classCallCheck$1(this, PasskeysMisconfigured);
    return _callSuper$1(this, PasskeysMisconfigured, ['PasskeysMisconfigured', 'Passkeys are misconfigured. Verify that you have added the correct associated domain for your application, and that the signing information is correct.']);
  }
  _inherits$1(PasskeysMisconfigured, _StytchSDKError30);
  return _createClass$1(PasskeysMisconfigured);
}(StytchSDKError);
var SignInWithAppleMisconfigured = /*#__PURE__*/function (_StytchSDKError31) {
  function SignInWithAppleMisconfigured() {
    _classCallCheck$1(this, SignInWithAppleMisconfigured);
    return _callSuper$1(this, SignInWithAppleMisconfigured, ['SignInWithAppleMisconfigured', 'Sign In With Apple is misconfigured. Verify that you have correctly configured Apple OAuth in the Stytch Dashboard and added the Sign In With Apple capability to your project.']);
  }
  _inherits$1(SignInWithAppleMisconfigured, _StytchSDKError31);
  return _createClass$1(SignInWithAppleMisconfigured);
}(StytchSDKError);
var MissingCipherIv = /*#__PURE__*/function (_StytchSDKError32) {
  function MissingCipherIv() {
    _classCallCheck$1(this, MissingCipherIv);
    return _callSuper$1(this, MissingCipherIv, ['MissingCipherIv', 'The expected cipher Iv was not found when attempting to decrypt an existing biometric key.']);
  }
  _inherits$1(MissingCipherIv, _StytchSDKError32);
  return _createClass$1(MissingCipherIv);
}(StytchSDKError);
var InvalidPrivateKeyLength = /*#__PURE__*/function (_StytchSDKError33) {
  function InvalidPrivateKeyLength() {
    _classCallCheck$1(this, InvalidPrivateKeyLength);
    return _callSuper$1(this, InvalidPrivateKeyLength, ['InvalidPrivateKeyLength', "The private key was of an incorrect length."]);
  }
  _inherits$1(InvalidPrivateKeyLength, _StytchSDKError33);
  return _createClass$1(InvalidPrivateKeyLength);
}(StytchSDKError);
var BiometricRegistrationIdIsNullOrBlank = /*#__PURE__*/function (_StytchSDKError34) {
  function BiometricRegistrationIdIsNullOrBlank() {
    _classCallCheck$1(this, BiometricRegistrationIdIsNullOrBlank);
    return _callSuper$1(this, BiometricRegistrationIdIsNullOrBlank, ['BiometricRegistrationIdIsNullOrBlank', 'Attempted to set a blank or null biometric registration ID. This is not allowed, and indicates no registration was created on the server. Consider deleting any local keys that may have been generated.']);
  }
  _inherits$1(BiometricRegistrationIdIsNullOrBlank, _StytchSDKError34);
  return _createClass$1(BiometricRegistrationIdIsNullOrBlank);
}(StytchSDKError);
var DFPNotConfigured = /*#__PURE__*/function (_StytchSDKError35) {
  function DFPNotConfigured() {
    _classCallCheck$1(this, DFPNotConfigured);
    return _callSuper$1(this, DFPNotConfigured, ['DFPNotConfigured', 'You have attempted to retrieve a telemetry ID before the DFP client has been configured.']);
  }
  _inherits$1(DFPNotConfigured, _StytchSDKError35);
  return _createClass$1(DFPNotConfigured);
}(StytchSDKError);
var IDPOAuthFlowMissingParamError = /*#__PURE__*/function (_StytchSDKError36) {
  function IDPOAuthFlowMissingParamError(details) {
    _classCallCheck$1(this, IDPOAuthFlowMissingParamError);
    return _callSuper$1(this, IDPOAuthFlowMissingParamError, ['IDPOAuthFlowMissingParamError', details]);
  }
  _inherits$1(IDPOAuthFlowMissingParamError, _StytchSDKError36);
  return _createClass$1(IDPOAuthFlowMissingParamError);
}(StytchSDKError);
function errorToStytchError(error) {
  switch (error.message) {
    case 'no_current_session':
      return new NoCurrentSessionError();
    case 'no_biometrics_registration':
      return new NoBiometricsRegistrationError();
    case 'biometrics_unavailable':
      return new BiometricsUnavailableError();
    case 'key_invalidated':
      return new KeyInvalidatedError();
    case 'device_hardware_error':
      return new BiometricsUnavailableError();
    case 'biometrics_not_available':
      return new BiometricsUnavailableError();
    case 'no_biometrics_enrolled':
      return new NoBiometricsEnrolledError();
    case 'keystore_unavailable':
      return new KeystoreUnavailableError();
    case 'no_biometric_key':
      return new KeyInvalidatedError();
    case 'device_credentials_not_allowed':
      return new DeviceCredentialsNotAllowedError();
    case 'user_cancellation':
      return new UserCancellationError();
    case 'user_locked_out':
      return new UserLockedOutError();
    case 'google_onetap_missing_id_token':
      return new MissingAuthorizationCredentialIDTokenError();
    case 'google_onetap_missing_member':
      return new InvalidAuthorizationCredentialError();
    case 'oauth_apple_missing_id_token':
      return new MissingAuthorizationCredentialIDTokenError();
    case 'oauth_apple_credential_invalid':
      return new InvalidAuthorizationCredentialError();
    case 'missing_public_key':
      return new MissingPublicKeyError();
    case 'challenge_signing_failed':
      return new ChallengeSigningFailedError();
    case 'missing_authorization_credential_id_token':
      return new MissingAuthorizationCredentialIDTokenError();
    case 'invalid_authorization_credential':
      return new InvalidAuthorizationCredentialError();
    case 'no_credentials_present':
      return new NoCredentialsPresentError();
    case 'sdk_not_configured':
      return new SDKNotConfiguredError();
    case 'failed_code_challenge':
      return new FailedCodeChallengeError();
    case 'passkeys_unsupported':
      return new PasskeysUnsupportedError();
    case 'failed_to_decrypt_data':
      return new FailedToDecryptDataError();
    case 'biometrics_failed':
      return new BiometricsFailedError();
    case 'invalid_start_url':
      return new InvalidStartUrlError();
    case 'invalid_redirect_scheme':
      return new InvalidRedirectSchemeError();
    case 'missing_url':
      return new MissingUrlError();
    case 'invalid_credential_type':
      return new InvalidCredentialTypeError();
    case 'missing_attestation_object':
      return new MissingAttestationObjectError();
    case 'json_data_not_convertible_to_string':
      return new JSONDataNotConvertibleToStringError();
    case 'random_number_generation_failed':
      return new RandomNumberGenerationFailed();
    case 'passkeys_invalid_encoding':
      return new PasskeysInvalidEncoding();
    case 'passkeys_misconfigured':
      return new PasskeysMisconfigured();
    case 'signinwithapple_misconfigured':
      return new SignInWithAppleMisconfigured();
    case 'missing_cipher_iv':
      return new MissingCipherIv();
    case 'invalid_private_key_length':
      return new InvalidPrivateKeyLength();
    case 'biometric_registration_id_is_null_or_blank':
      return new BiometricRegistrationIdIsNullOrBlank();
    case 'dfp_not_configured':
      return new DFPNotConfigured();
    default:
      return new InternalError(error);
  }
}
var B2BProducts;
(function (B2BProducts) {
  B2BProducts["emailMagicLinks"] = "emailMagicLinks";
  B2BProducts["emailOtp"] = "emailOtp";
  B2BProducts["sso"] = "sso";
  B2BProducts["passwords"] = "passwords";
  B2BProducts["oauth"] = "oauth";
})(B2BProducts || (B2BProducts = {}));
var AuthFlowType;
(function (AuthFlowType) {
  AuthFlowType["Discovery"] = "Discovery";
  AuthFlowType["Organization"] = "Organization";
  AuthFlowType["PasswordReset"] = "PasswordReset";
})(AuthFlowType || (AuthFlowType = {}));
var RedirectURLType;
(function (RedirectURLType) {
  RedirectURLType["ResetPassword"] = "reset_password";
})(RedirectURLType || (RedirectURLType = {}));
var B2BMFAProducts;
(function (B2BMFAProducts) {
  B2BMFAProducts["smsOtp"] = "smsOtp";
  B2BMFAProducts["totp"] = "totp";
})(B2BMFAProducts || (B2BMFAProducts = {}));
var B2BOAuthProviders;
(function (B2BOAuthProviders) {
  B2BOAuthProviders["Google"] = "google";
  B2BOAuthProviders["Microsoft"] = "microsoft";
  B2BOAuthProviders["HubSpot"] = "hubspot";
  B2BOAuthProviders["Slack"] = "slack";
  B2BOAuthProviders["GitHub"] = "github";
})(B2BOAuthProviders || (B2BOAuthProviders = {}));
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
      t && (r = t);
      var _n = 0,
        F = function F() {};
      return {
        s: F,
        n: function n() {
          return _n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[_n++]
          };
        },
        e: function e(r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function s() {
      t = t.call(r);
    },
    n: function n() {
      var r = t.next();
      return a = r.done, r;
    },
    e: function e(r) {
      u = !0, o = r;
    },
    f: function f() {
      try {
        a || null == t["return"] || t["return"]();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
  _regeneratorRuntime = function _regeneratorRuntime() {
    return r;
  };
  var t,
    r = {},
    e = Object.prototype,
    n = e.hasOwnProperty,
    o = "function" == typeof Symbol ? Symbol : {},
    i = o.iterator || "@@iterator",
    a = o.asyncIterator || "@@asyncIterator",
    u = o.toStringTag || "@@toStringTag";
  function c(t, r, e, n) {
    return Object.defineProperty(t, r, {
      value: e,
      enumerable: !n,
      configurable: !n,
      writable: !n
    });
  }
  try {
    c({}, "");
  } catch (t) {
    c = function c(t, r, e) {
      return t[r] = e;
    };
  }
  function h(r, e, n, o) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype);
    return c(a, "_invoke", function (r, e, n) {
      var o = 1;
      return function (i, a) {
        if (3 === o) throw Error("Generator is already running");
        if (4 === o) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var u = n.delegate;
          if (u) {
            var c = d(u, n);
            if (c) {
              if (c === f) continue;
              return c;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (1 === o) throw o = 4, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = 3;
          var h = s(r, e, n);
          if ("normal" === h.type) {
            if (o = n.done ? 4 : 2, h.arg === f) continue;
            return {
              value: h.arg,
              done: n.done
            };
          }
          "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg);
        }
      };
    }(r, n, new Context(o || [])), !0), a;
  }
  function s(t, r, e) {
    try {
      return {
        type: "normal",
        arg: t.call(r, e)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  r.wrap = h;
  var f = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var l = {};
  c(l, i, function () {
    return this;
  });
  var p = Object.getPrototypeOf,
    y = p && p(p(x([])));
  y && y !== e && n.call(y, i) && (l = y);
  var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l);
  function g(t) {
    ["next", "throw", "return"].forEach(function (r) {
      c(t, r, function (t) {
        return this._invoke(r, t);
      });
    });
  }
  function AsyncIterator(t, r) {
    function e(o, i, a, u) {
      var c = s(t[o], t, i);
      if ("throw" !== c.type) {
        var h = c.arg,
          f = h.value;
        return f && "object" == _typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) {
          e("next", t, a, u);
        }, function (t) {
          e("throw", t, a, u);
        }) : r.resolve(f).then(function (t) {
          h.value = t, a(h);
        }, function (t) {
          return e("throw", t, a, u);
        });
      }
      u(c.arg);
    }
    var o;
    c(this, "_invoke", function (t, n) {
      function i() {
        return new r(function (r, o) {
          e(t, n, r, o);
        });
      }
      return o = o ? o.then(i, i) : i();
    }, !0);
  }
  function d(r, e) {
    var n = e.method,
      o = r.i[n];
    if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a '" + n + "' method")), f;
    var i = s(o, r.i, e.arg);
    if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f;
    var a = i.arg;
    return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f);
  }
  function w(t) {
    this.tryEntries.push(t);
  }
  function m(r) {
    var e = r[4] || {};
    e.type = "normal", e.arg = t, r[4] = e;
  }
  function Context(t) {
    this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0);
  }
  function x(r) {
    if (null != r) {
      var e = r[i];
      if (e) return e.call(r);
      if ("function" == typeof r.next) return r;
      if (!isNaN(r.length)) {
        var o = -1,
          a = function e() {
            for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e;
            return e.value = t, e.done = !0, e;
          };
        return a.next = a;
      }
    }
    throw new TypeError(_typeof(r) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) {
    var r = "function" == typeof t && t.constructor;
    return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name));
  }, r.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t;
  }, r.awrap = function (t) {
    return {
      __await: t
    };
  }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () {
    return this;
  }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(h(t, e, n, o), i);
    return r.isGeneratorFunction(e) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, g(v), c(v, u, "Generator"), c(v, i, function () {
    return this;
  }), c(v, "toString", function () {
    return "[object Generator]";
  }), r.keys = function (t) {
    var r = Object(t),
      e = [];
    for (var n in r) e.unshift(n);
    return function t() {
      for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t;
      return t.done = !0, t;
    };
  }, r.values = x, Context.prototype = {
    constructor: Context,
    reset: function reset(r) {
      if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0][4];
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(r) {
      if (this.done) throw r;
      var e = this;
      function n(t) {
        a.type = "throw", a.arg = r, e.next = t;
      }
      for (var o = e.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i[4],
          u = this.prev,
          c = i[1],
          h = i[2];
        if (-1 === i[0]) return n("end"), !1;
        if (!c && !h) throw Error("try statement without catch or finally");
        if (null != i[0] && i[0] <= u) {
          if (u < c) return this.method = "next", this.arg = t, n(c), !0;
          if (u < h) return n(h), !1;
        }
      }
    },
    abrupt: function abrupt(t, r) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var n = this.tryEntries[e];
        if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) {
          var o = n;
          break;
        }
      }
      o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null);
      var i = o ? o[4] : {};
      return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i);
    },
    complete: function complete(t, r) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f;
    },
    finish: function finish(t) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var e = this.tryEntries[r];
        if (e[2] === t) return this.complete(e[4], e[3]), m(e), f;
      }
    },
    "catch": function _catch(t) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var e = this.tryEntries[r];
        if (e[0] === t) {
          var n = e[4];
          if ("throw" === n.type) {
            var o = n.arg;
            m(e);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(r, e, n) {
      return this.delegate = {
        i: x(r),
        r: e,
        n: n
      }, "next" === this.method && (this.arg = t), f;
    }
  }, r;
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t);
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper = function _wrapNativeSuper(t) {
    if (null === t || !_isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct(t, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, t);
  }, _wrapNativeSuper(t);
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
var TEST_API_URL = 'https://test.stytch.com';
var LIVE_API_URL = 'https://api.stytch.com';
var CLIENTSIDE_SERVICES_IFRAME_URL = 'https://js.stytch.com/clientside-services/index.html';
var STYTCH_DFP_BACKEND_URL = "https://telemetry.stytch.com";
var STYTCH_DFP_CDN_URL = "https://elements.stytch.com";
var GOOGLE_ONE_TAP_HOST = 'https://accounts.google.com/gsi';
var GOOGLE_ONE_TAP_SCRIPT_URL = "".concat(GOOGLE_ONE_TAP_HOST, "/client");
var DEFAULT_SESSION_DURATION_MINUTES = 30;
var MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING = "It looks like you're creating multiple copies of the Stytch client." + ' This behavior is unsupported, and unintended side effects may occur. ' + "Make sure you are creating the Stytch client at the global level, and not inside a component's render function.";
function __rest$1(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter$1(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, [])).next());
  });
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
var RetriableErrorType;
(function (RetriableErrorType) {
  RetriableErrorType["RequiredCatcha"] = "Catcha Required";
})(RetriableErrorType || (RetriableErrorType = {}));
var RetriableError = /*#__PURE__*/function (_Error) {
  function RetriableError(type) {
    var _this;
    _classCallCheck(this, RetriableError);
    _this = _callSuper(this, RetriableError, [type]);
    _this.type = type;
    return _this;
  }
  _inherits(RetriableError, _Error);
  return _createClass(RetriableError);
}(/*#__PURE__*/_wrapNativeSuper(Error));
function retriableFetchSDK(_ref) {
  var method = _ref.method,
    finalURL = _ref.finalURL,
    basicAuthHeader = _ref.basicAuthHeader,
    xSDKClientHeader = _ref.xSDKClientHeader,
    xSDKParentHostHeader = _ref.xSDKParentHostHeader,
    body = _ref.body,
    retryCallback = _ref.retryCallback;
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var req;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          req = {
            method: method,
            finalURL: finalURL,
            basicAuthHeader: basicAuthHeader,
            xSDKClientHeader: xSDKClientHeader,
            xSDKParentHostHeader: xSDKParentHostHeader,
            body: body
          };
          _context.prev = 1;
          _context.next = 4;
          return baseFetchSDK(req);
        case 4:
          return _context.abrupt("return", _context.sent);
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          if (!(_context.t0 instanceof RetriableError)) {
            _context.next = 16;
            break;
          }
          _context.next = 12;
          return retryCallback(_context.t0, req);
        case 12:
          req = _context.sent;
          _context.next = 15;
          return baseFetchSDK(req);
        case 15:
          return _context.abrupt("return", _context.sent);
        case 16:
          throw _context.t0;
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 7]]);
  }));
}
function baseFetchSDK(_ref2) {
  var method = _ref2.method,
    finalURL = _ref2.finalURL,
    basicAuthHeader = _ref2.basicAuthHeader,
    xSDKClientHeader = _ref2.xSDKClientHeader,
    xSDKParentHostHeader = _ref2.xSDKParentHostHeader,
    body = _ref2.body;
  var _a;
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var headers, fetchOpts, resp, _respData, respError, respData;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          headers = {
            Authorization: basicAuthHeader,
            'Content-Type': 'application/json',
            'X-SDK-Client': xSDKClientHeader
          };
          if (xSDKParentHostHeader) {
            headers['X-SDK-Parent-Host'] = xSDKParentHostHeader;
          }
          fetchOpts = {
            method: method,
            headers: headers,
            body: body && JSON.stringify(body),
            credentials: 'include'
          };
          _context2.prev = 3;
          _context2.next = 6;
          return fetch(finalURL, fetchOpts);
        case 6:
          resp = _context2.sent;
          _context2.next = 14;
          break;
        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](3);
          if (!(_context2.t0.message === 'Failed to fetch')) {
            _context2.next = 13;
            break;
          }
          throw new StytchAPIUnreachableError('Unable to contact our servers.');
        case 13:
          throw _context2.t0;
        case 14:
          if (!(resp.status <= 299)) {
            _context2.next = 25;
            break;
          }
          _context2.prev = 15;
          _context2.next = 18;
          return resp.json();
        case 18:
          _respData = _context2.sent;
          return _context2.abrupt("return", _respData.data);
        case 22:
          _context2.prev = 22;
          _context2.t1 = _context2["catch"](15);
          throw new StytchAPIUnreachableError('Invalid JSON response from our servers.');
        case 25:
          if (!(resp.status !== 200 && ((_a = resp.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')))) {
            _context2.next = 38;
            break;
          }
          _context2.prev = 26;
          _context2.next = 29;
          return resp.json();
        case 29:
          respError = _context2.sent;
          _context2.next = 35;
          break;
        case 32:
          _context2.prev = 32;
          _context2.t2 = _context2["catch"](26);
          throw new StytchAPIUnreachableError('Invalid or no response from server');
        case 35:
          if (!('body' in respError || 'params' in respError || 'query' in respError)) {
            _context2.next = 37;
            break;
          }
          throw new StytchAPISchemaError(respError);
        case 37:
          throw new StytchAPIError(respError);
        case 38:
          _context2.prev = 38;
          _context2.next = 41;
          return resp.text();
        case 41:
          respData = _context2.sent;
          _context2.next = 47;
          break;
        case 44:
          _context2.prev = 44;
          _context2.t3 = _context2["catch"](38);
          throw new StytchAPIUnreachableError('Invalid response from our servers.');
        case 47:
          if (!respData.includes('Captcha required')) {
            _context2.next = 49;
            break;
          }
          throw new RetriableError(RetriableErrorType.RequiredCatcha);
        case 49:
          throw new StytchAPIUnreachableError('Invalid response from our servers.');
        case 50:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[3, 9], [15, 22], [26, 32], [38, 44]]);
  }));
}
function baseSubmitFormSDK(_ref3) {
  var method = _ref3.method,
    finalURL = _ref3.finalURL,
    basicAuthHeader = _ref3.basicAuthHeader,
    xSDKClientHeader = _ref3.xSDKClientHeader,
    xSDKParentHostHeader = _ref3.xSDKParentHostHeader,
    body = _ref3.body;
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var bodyParams, finalBody, children, form;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          bodyParams = body || {};
          finalBody = Object.assign(Object.assign({}, bodyParams), {
            __Authorization: basicAuthHeader,
            '__X-SDK-Client': xSDKClientHeader
          });
          if (xSDKParentHostHeader) {
            finalBody['__X-SDK-Parent-Host'] = xSDKParentHostHeader;
          }
          children = Object.entries(finalBody).map(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
              key = _ref5[0],
              value = _ref5[1];
            var input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = value;
            return input;
          });
          form = document.createElement('form');
          form.method = method;
          form.action = finalURL;
          form.append.apply(form, _toConsumableArray(children));
          document.body.appendChild(form);
          form.submit();
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
}
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate$1(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate$1(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;
  return stringify(rnds);
}
var ModulePromiseCache = {};
function loadESModule(url, moduleFromGlobalScope) {
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(ModulePromiseCache[url] !== undefined)) {
            _context4.next = 2;
            break;
          }
          return _context4.abrupt("return", ModulePromiseCache[url]);
        case 2:
          ModulePromiseCache[url] = loadESModuleFromNetwork(url, moduleFromGlobalScope);
          return _context4.abrupt("return", ModulePromiseCache[url]);
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
}
function loadESModuleFromNetwork(url, moduleFromGlobalScope) {
  return new Promise(function (resolve, reject) {
    var maybeScript = findScript(url);
    if (maybeScript && maybeScript.dataset.loaded === 'true') {
      try {
        resolve(moduleFromGlobalScope());
      } catch (err) {
        return reject(new Error("".concat(url, " already loaded, but module was not found in global scope: ").concat(err)));
      }
    }
    var script = createScript(url);
    script.addEventListener('load', function () {
      script.dataset.loaded = 'true';
      try {
        resolve(moduleFromGlobalScope());
      } catch (err) {
        reject(new Error("".concat(url, " was loaded, but module was not found in global scope: ").concat(err)));
      }
    });
    script.addEventListener('error', function (err) {
      reject(new Error("".concat(url, " could not be loaded: ").concat(err)));
    });
  });
}
var findScriptsInDom = function findScriptsInDom(url) {
  return document.querySelectorAll("script[src=\"".concat(url, "\"]"));
};
function findScript(url) {
  var scripts = findScriptsInDom(url);
  if (scripts[0]) {
    return scripts[0];
  }
}
function createScript(url) {
  var script = document.createElement('script');
  script.setAttribute('src', url);
  script.setAttribute('async', 'true');
  script.setAttribute('defer', 'true');
  document.head.appendChild(script);
  return script;
}
var getHttpsUrl = function getHttpsUrl(urlOrDomain) {
  try {
    var url = new URL(urlOrDomain);
    return "https://".concat(url.hostname);
  } catch (_a) {}
  try {
    var _url = new URL("https://".concat(urlOrDomain));
    return "https://".concat(_url.hostname);
  } catch (_b) {}
  return undefined;
};
var STYTCH_BADGE = ['[Stytch]'];
var DEBUG = false;
var logger = {
  debug: function debug() {
    return DEBUG;
  },
  log: function log() {
    var _console;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_console = console).log.apply(_console, STYTCH_BADGE.concat(args));
  },
  warn: function warn() {
    var _console2;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return (_console2 = console).warn.apply(_console2, STYTCH_BADGE.concat(args));
  },
  error: function error() {
    var _console3;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return (_console3 = console).error.apply(_console3, STYTCH_BADGE.concat(args));
  }
};
var getLiveApiURL = function getLiveApiURL(opts) {
  var _a, _b, _c;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.apiDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.apiDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom API domain `".concat(opts.endpointOptions.apiDomain, "`. apiDomain should be a valid domain."));
    }
  }
  return (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.liveAPIURL) !== null && _c !== void 0 ? _c : LIVE_API_URL;
};
var getTestApiURL = function getTestApiURL(opts) {
  var _a, _b, _c;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.testApiDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.testApiDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom API domain `".concat(opts.endpointOptions.testApiDomain, "`. testApiDomain should be a valid domain."));
    }
  }
  return (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.testAPIURL) !== null && _c !== void 0 ? _c : TEST_API_URL;
};
var trailer = "\nYou can find your public token at https://stytch.com/dashboard/api-keys.";
var checkPublicToken = function checkPublicToken(publicToken) {
  if (typeof publicToken !== 'string') {
    logger.warn("Public token is malformed. Expected a string, got ".concat(_typeof(publicToken), ".").concat(trailer));
  } else if (publicToken === '') {
    logger.warn("Public token is malformed. Expected \"public-token-...\", got an empty string.".concat(trailer));
  } else if (!publicToken.startsWith('public-token-')) {
    logger.warn("Public token is malformed. Expected \"public-token-...\", got ".concat(publicToken, ".").concat(trailer));
  }
};
var checkB2BNotSSR = function checkB2BNotSSR(clientName) {
  var factoryFunctionName = clientName === 'StytchB2BUIClient' ? 'createStytchB2BUIClient' : 'createStytchB2BHeadlessClient';
  if (typeof window === 'undefined') {
    throw new Error("`new ".concat(clientName, "()` is not supported in server environments. If using @stytch/react or @stytch/nextjs, use `").concat(factoryFunctionName, "()` instead."));
  }
};
var COUNTRIES_LIST = {
  US: '1',
  AX: '358',
  AS: '1684',
  AG: '1268',
  AI: '1264',
  AR: '54',
  AT: '43',
  AU: '61',
  BE: '32',
  BJ: '229',
  BO: '591',
  BR: '55',
  IO: '246',
  BN: '673',
  BG: '359',
  BF: '226',
  CM: '237',
  CA: '1',
  BQ: '599',
  CF: '236',
  CL: '56',
  CX: '61',
  CC: '61',
  CO: '57',
  CD: '243',
  CK: '682',
  CR: '506',
  HR: '385',
  CZ: '420',
  DK: '45',
  DO: '1829',
  EC: '593',
  SV: '503',
  EE: '372',
  SZ: '268',
  FK: '500',
  FI: '358',
  FR: '33',
  GF: '594',
  DE: '49',
  GH: '233',
  GR: '30',
  GD: '1473',
  GT: '502',
  GG: '44',
  GW: '245',
  GY: '592',
  HU: '36',
  IS: '354',
  IN: '91',
  IE: '353',
  IM: '44',
  IT: '39',
  JM: '1876',
  JP: '81',
  KZ: '7',
  KE: '254',
  KI: '686',
  KR: '82',
  LV: '371',
  LT: '370',
  LU: '352',
  MO: '853',
  MT: '356',
  MH: '692',
  MR: '222',
  MU: '230',
  YT: '262',
  MX: '52',
  MC: '377',
  ME: '382',
  NR: '674',
  NL: '31',
  NZ: '64',
  NI: '505',
  NF: '672',
  NO: '47',
  PA: '507',
  PY: '595',
  PE: '51',
  PN: '870',
  PL: '48',
  PT: '351',
  PR: '1',
  RO: '40',
  BL: '590',
  SH: '290',
  KN: '1869',
  LC: '1758',
  MF: '590',
  PM: '508',
  SM: '378',
  ST: '239',
  SC: '248',
  SX: '599',
  SK: '421',
  SI: '386',
  ZA: '27',
  SS: '211',
  ES: '34',
  SR: '597',
  SJ: '47',
  SE: '46',
  CH: '41',
  TW: '886',
  TZ: '255',
  TK: '690',
  TO: '676',
  TT: '1868',
  TR: '90',
  UA: '380',
  GB: '44',
  UM: '1',
  UY: '598',
  VA: '379',
  EH: '212'
};
var getDFPBackendURL = function getDFPBackendURL(opts) {
  var _a, _b, _c;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.dfppaDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.dfppaDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom DFPPA domain `".concat(opts.endpointOptions.dfppaDomain, "`. dfppaDomain should be a valid domain."));
    }
  }
  return (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.dfpBackendURL) !== null && _c !== void 0 ? _c : STYTCH_DFP_BACKEND_URL;
};
var getDFPCdnURL = function getDFPCdnURL(opts) {
  var _a;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.dfpCdnDomain) {
    var httpsUrl = getHttpsUrl(opts.endpointOptions.dfpCdnDomain);
    if (httpsUrl) {
      return httpsUrl;
    } else {
      logger.warn("Unable to use custom DFP CDN domain `".concat(opts.endpointOptions.dfpCdnDomain, "`. dfpCdnDomain should be a valid domain."));
    }
  }
  return STYTCH_DFP_CDN_URL;
};
var isTestPublicToken = function isTestPublicToken(token) {
  return token.includes('public-token-test');
};
var createEventId = function createEventId() {
  return "event-id-".concat(v4());
};
var createAppSessionId = function createAppSessionId() {
  return "app-session-id-".concat(v4());
};
var createPersistentId = function createPersistentId() {
  return "persistent-id-".concat(v4());
};
var validate = function validate(methodName) {
  var validator = {
    isObject: function isObject(fieldName, value) {
      var isObject = _typeof(value) === 'object' && !Array.isArray(value) && value !== null;
      if (!isObject) {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be an object.');
      }
      return validator;
    },
    isOptionalObject: function isOptionalObject(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isObject(fieldName, value);
    },
    isString: function isString(fieldName, value) {
      if (typeof value !== 'string') {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be a string.');
      }
      return validator;
    },
    isOptionalString: function isOptionalString(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isString(fieldName, value);
    },
    isStringArray: function isStringArray(fieldName, value) {
      if (!Array.isArray(value)) {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be an array of strings.');
      }
      var _iterator = _createForOfIteratorHelper(value),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var str = _step.value;
          if (typeof str !== 'string') {
            throw new StytchSDKUsageError(methodName, fieldName + ' must be an array of strings.');
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return validator;
    },
    isOptionalStringArray: function isOptionalStringArray(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isStringArray(fieldName, value);
    },
    isNumber: function isNumber(fieldName, value) {
      if (typeof value !== 'number') {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be a number.');
      }
      return validator;
    },
    isOptionalNumber: function isOptionalNumber(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isNumber(fieldName, value);
    },
    isBoolean: function isBoolean(fieldName, value) {
      if (typeof value !== 'boolean') {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be a boolean.');
      }
      return validator;
    },
    isOptionalBoolean: function isOptionalBoolean(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isBoolean(fieldName, value);
    }
  };
  return validator;
};
var loadTelemetryJS = function loadTelemetryJS(domain) {
  return loadESModule("".concat(domain, "/telemetry.js"), function () {
    return window.GetTelemetryID;
  });
};
var DFPProtectedAuthProvider = /*#__PURE__*/_createClass(function DFPProtectedAuthProvider(publicToken, dfpBackendURL, dfpCdnDomain, bootstrapPromise) {
  var _this2 = this;
  var executeRecaptcha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {
    return Promise.resolve(undefined);
  };
  _classCallCheck(this, DFPProtectedAuthProvider);
  this.bootstrapPromise = bootstrapPromise;
  this.isEnabled = function () {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", this.state.then(function (state) {
              return state.enabled;
            }));
          case 1:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
  };
  this.getTelemetryID = function () {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var _yield$this$state, publicToken, enabled, dfpBackendURL;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return this.state;
          case 2:
            _yield$this$state = _context6.sent;
            publicToken = _yield$this$state.publicToken;
            enabled = _yield$this$state.enabled;
            dfpBackendURL = _yield$this$state.dfpBackendURL;
            if (enabled) {
              _context6.next = 8;
              break;
            }
            return _context6.abrupt("return", undefined);
          case 8:
            _context6.next = 10;
            return window.GetTelemetryID(publicToken, "".concat(dfpBackendURL, "/submit"));
          case 10:
            return _context6.abrupt("return", _context6.sent);
          case 11:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
  };
  this.getDFPTelemetryIDAndCaptcha = function () {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var _yield$this$state2, enabled, executeRecaptcha, mode, dfp_telemetry_id, captcha_token;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return this.state;
          case 2:
            _yield$this$state2 = _context7.sent;
            enabled = _yield$this$state2.enabled;
            executeRecaptcha = _yield$this$state2.executeRecaptcha;
            mode = _yield$this$state2.mode;
            dfp_telemetry_id = undefined;
            captcha_token = undefined;
            if (enabled) {
              _context7.next = 12;
              break;
            }
            _context7.next = 11;
            return executeRecaptcha();
          case 11:
            captcha_token = _context7.sent;
          case 12:
            if (!(mode === 'DECISIONING')) {
              _context7.next = 18;
              break;
            }
            _context7.next = 15;
            return this.getTelemetryID();
          case 15:
            dfp_telemetry_id = _context7.sent;
            _context7.next = 25;
            break;
          case 18:
            if (!(mode === 'OBSERVATION')) {
              _context7.next = 25;
              break;
            }
            _context7.next = 21;
            return this.getTelemetryID();
          case 21:
            dfp_telemetry_id = _context7.sent;
            _context7.next = 24;
            return executeRecaptcha();
          case 24:
            captcha_token = _context7.sent;
          case 25:
            return _context7.abrupt("return", {
              dfp_telemetry_id: dfp_telemetry_id,
              captcha_token: captcha_token
            });
          case 26:
          case "end":
            return _context7.stop();
        }
      }, _callee7, this);
    }));
  };
  this.retryWithCaptchaAndDFP = function (e, req) {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var _yield$this$state3, enabled, executeRecaptcha;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return this.state;
          case 2:
            _yield$this$state3 = _context8.sent;
            enabled = _yield$this$state3.enabled;
            executeRecaptcha = _yield$this$state3.executeRecaptcha;
            if (!(e.type === RetriableErrorType.RequiredCatcha && enabled)) {
              _context8.next = 14;
              break;
            }
            if (!req.body) {
              _context8.next = 13;
              break;
            }
            _context8.next = 9;
            return this.getTelemetryID();
          case 9:
            req.body.dfp_telemetry_id = _context8.sent;
            _context8.next = 12;
            return executeRecaptcha();
          case 12:
            req.body.captcha_token = _context8.sent;
          case 13:
            return _context8.abrupt("return", req);
          case 14:
            throw new Error('Unable to query captcha and/or dfp telemetry ID');
          case 15:
          case "end":
            return _context8.stop();
        }
      }, _callee8, this);
    }));
  };
  this.state = bootstrapPromise.then(function (bootstrapData) {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (bootstrapData.runDFPProtectedAuth) {
              _context9.next = 2;
              break;
            }
            return _context9.abrupt("return", {
              publicToken: publicToken,
              dfpBackendURL: dfpBackendURL,
              enabled: false,
              loaded: false,
              executeRecaptcha: executeRecaptcha
            });
          case 2:
            _context9.next = 4;
            return loadTelemetryJS(dfpCdnDomain);
          case 4:
            return _context9.abrupt("return", {
              publicToken: publicToken,
              dfpBackendURL: dfpBackendURL,
              enabled: true,
              mode: bootstrapData.dfpProtectedAuthMode || 'OBSERVATION',
              loaded: true,
              executeRecaptcha: executeRecaptcha
            });
          case 5:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
  });
});
var DisabledDFPProtectedAuthProvider = function DisabledDFPProtectedAuthProvider() {
  return {
    isEnabled: function isEnabled() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {
        return _regeneratorRuntime().wrap(function _callee0$(_context0) {
          while (1) switch (_context0.prev = _context0.next) {
            case 0:
              return _context0.abrupt("return", false);
            case 1:
            case "end":
              return _context0.stop();
          }
        }, _callee0);
      }));
    },
    getTelemetryID: function getTelemetryID() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {
        return _regeneratorRuntime().wrap(function _callee1$(_context1) {
          while (1) switch (_context1.prev = _context1.next) {
            case 0:
              return _context1.abrupt("return", undefined);
            case 1:
            case "end":
              return _context1.stop();
          }
        }, _callee1);
      }));
    },
    getDFPTelemetryIDAndCaptcha: function getDFPTelemetryIDAndCaptcha() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", {
                dfp_telemetry_id: undefined,
                captcha_token: undefined
              });
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
    },
    retryWithCaptchaAndDFP: function retryWithCaptchaAndDFP() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              throw new Error('DFP protected auth is disabled');
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
    }
  };
};
var ErrorMarshaller = /*#__PURE__*/function () {
  function ErrorMarshaller() {
    _classCallCheck(this, ErrorMarshaller);
  }
  return _createClass(ErrorMarshaller, null, [{
    key: "inflate",
    value: function inflate(ErrorClass, ErrorData) {
      var err = new ErrorClass(ErrorData);
      Object.assign(err, ErrorData);
      Object.setPrototypeOf(err, ErrorClass.prototype);
      return err;
    }
  }, {
    key: "unmarshall",
    value: function unmarshall(error) {
      if ('name' in error) {
        switch (error.name) {
          case 'SDKAPIUnreachableError':
            return ErrorMarshaller.inflate(SDKAPIUnreachableError, error);
          case 'StytchSDKSchemaError':
            return ErrorMarshaller.inflate(StytchSDKSchemaError, error);
          case 'StytchAPIUnreachableError':
            return ErrorMarshaller.inflate(StytchAPIUnreachableError, error);
          case 'StytchAPISchemaError':
            return ErrorMarshaller.inflate(StytchAPISchemaError, error);
          case 'StytchSDKAPIError':
            return ErrorMarshaller.inflate(StytchSDKAPIError, error);
          case 'StytchAPIError':
            return ErrorMarshaller.inflate(StytchAPIError, error);
          case 'TypeError':
            return ErrorMarshaller.inflate(TypeError, error);
          case 'SyntaxError':
            return ErrorMarshaller.inflate(SyntaxError, error);
          case 'ReferenceError':
            return ErrorMarshaller.inflate(ReferenceError, error);
          case 'RangeError':
            return ErrorMarshaller.inflate(RangeError, error);
          case 'EvalError':
            return ErrorMarshaller.inflate(EvalError, error);
          case 'URIError':
            return ErrorMarshaller.inflate(URIError, error);
        }
      }
      return ErrorMarshaller.inflate(Error, error);
    }
  }]);
}();
var DEFAULT_MAX_BATCH_SIZE = 15;
var DEFAULT_INTERVAL_DURATION_MS = 800;
var EventLogger = /*#__PURE__*/function () {
  function EventLogger(args) {
    _classCallCheck(this, EventLogger);
    this.maxBatchSize = args.maxBatchSize;
    this.logEventURL = args.logEventURL;
    setInterval(this.flush.bind(this), args.intervalDurationMs);
    this.batch = [];
  }
  return _createClass(EventLogger, [{
    key: "logEvent",
    value: function logEvent(telemetry, event) {
      this.batch.push({
        telemetry: telemetry,
        event: event
      });
      if (this.batch.length >= this.maxBatchSize) {
        this.flush();
      }
    }
  }, {
    key: "flush",
    value: function flush() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        var batchToSubmit;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (this.batch.length) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return");
            case 2:
              batchToSubmit = this.batch;
              this.batch = [];
              _context12.prev = 4;
              _context12.next = 7;
              return fetch(this.logEventURL, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(batchToSubmit)
              });
            case 7:
              _context12.next = 11;
              break;
            case 9:
              _context12.prev = 9;
              _context12.t0 = _context12["catch"](4);
            case 11:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this, [[4, 9]]);
      }));
    }
  }]);
}();
var EmailSentType;
(function (EmailSentType) {
  EmailSentType["LoginOrCreateEML"] = "login_or_create_eml";
  EmailSentType["LoginOrCreateOTP"] = "login_or_create_otp";
  EmailSentType["ResetPassword"] = "reset_password";
})(EmailSentType || (EmailSentType = {}));
Promise.resolve({
  pkceRequiredForEmailMagicLinks: false
});
Promise.resolve({
  siweRequiredForCryptoWallets: false
});
Promise.resolve({
  pkceRequiredForPasswordResets: false
});
var WILDCARD_ACTION = '*';
var RBACPolicy = /*#__PURE__*/function () {
  function RBACPolicy(roles, resources) {
    var _this0 = this;
    _classCallCheck(this, RBACPolicy);
    this.roles = roles;
    this.resources = resources;
    this.rolesByID = {};
    roles.forEach(function (role) {
      return _this0.rolesByID[role.role_id] = role;
    });
  }
  return _createClass(RBACPolicy, [{
    key: "callerIsAuthorized",
    value: function callerIsAuthorized(memberRoles, resourceId, action) {
      var _this1 = this;
      return !!memberRoles.map(function (roleId) {
        return _this1.rolesByID[roleId];
      }).filter(function (v) {
        return v;
      }).flatMap(function (role) {
        return role.permissions;
      }).filter(function (permission) {
        return permission.resource_id === resourceId;
      }).find(function (permission) {
        return permission.actions.includes(action) || permission.actions.includes(WILDCARD_ACTION);
      });
    }
  }, {
    key: "allPermissionsForCaller",
    value: function allPermissionsForCaller(memberRoles) {
      var _this10 = this;
      var allPermsMap = Object.create(null);
      this.resources.forEach(function (resource) {
        allPermsMap[resource.resource_id] = {};
        resource.actions.forEach(function (action) {
          allPermsMap[resource.resource_id][action] = _this10.callerIsAuthorized(memberRoles, resource.resource_id, action);
        });
      });
      return allPermsMap;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(input) {
      return new RBACPolicy(input.roles, input.resources);
    }
  }]);
}();
var DefaultDynamicConfig$1 = Promise.resolve({
  pkceRequiredForEmailMagicLinks: false
});
var HeadlessB2BMagicLinksClient = /*#__PURE__*/function () {
  function HeadlessB2BMagicLinksClient(_networkClient, _subscriptionService, _pkceManager, _passwordResetPKCEManager) {
    var _this14 = this;
    var _config = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DefaultDynamicConfig$1;
    var dfpProtectedAuth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DisabledDFPProtectedAuthProvider();
    _classCallCheck(this, HeadlessB2BMagicLinksClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._passwordResetPKCEManager = _passwordResetPKCEManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.email = {
      invite: function invite(data) {
        return __awaiter$1(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
          return _regeneratorRuntime().wrap(function _callee67$(_context67) {
            while (1) switch (_context67.prev = _context67.next) {
              case 0:
                validate('stytch.magicLinks.email.invite').isString('email_address', data.email_address).isOptionalString('invite_redirect_url', data.invite_redirect_url).isOptionalString('invite_template_id', data.invite_template_id).isOptionalString('name', data.name).isOptionalString('locale', data.locale).isOptionalStringArray('roles', data.roles).isOptionalNumber('invite_expiration_minutes', data.invite_expiration_minutes);
                return _context67.abrupt("return", this._networkClient.fetchSDK({
                  url: '/b2b/magic_links/email/invite',
                  body: data,
                  method: 'POST'
                }));
              case 2:
              case "end":
                return _context67.stop();
            }
          }, _callee67, this);
        }));
      },
      loginOrSignup: function loginOrSignup(data) {
        return __awaiter$1(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
          var pkce_code_challenge, requestBody;
          return _regeneratorRuntime().wrap(function _callee68$(_context68) {
            while (1) switch (_context68.prev = _context68.next) {
              case 0:
                validate('stytch.magicLinks.email.loginOrSignup').isString('email_address', data.email_address).isString('organization_id', data.organization_id).isOptionalString('login_redirect_url', data.login_redirect_url).isOptionalString('login_template_id', data.login_template_id).isOptionalString('signup_redirect_url', data.signup_redirect_url).isOptionalString('signup_template_id', data.signup_template_id).isOptionalString('locale', data.locale).isOptionalNumber('login_expiration_minutes', data.login_expiration_minutes).isOptionalNumber('signup_expiration_minutes', data.signup_expiration_minutes);
                _context68.next = 3;
                return this.getCodeChallenge();
              case 3:
                pkce_code_challenge = _context68.sent;
                requestBody = Object.assign(Object.assign({}, data), {
                  pkce_code_challenge: pkce_code_challenge
                });
                return _context68.abrupt("return", this._networkClient.fetchSDK({
                  url: '/b2b/magic_links/email/login_or_signup',
                  body: requestBody,
                  method: 'POST'
                }));
              case 6:
              case "end":
                return _context68.stop();
            }
          }, _callee68, this);
        }));
      },
      discovery: {
        send: function send(data) {
          return __awaiter$1(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
            var _yield$this$dfpProtec18, dfp_telemetry_id, captcha_token, pkce_code_challenge, requestBody;
            return _regeneratorRuntime().wrap(function _callee69$(_context69) {
              while (1) switch (_context69.prev = _context69.next) {
                case 0:
                  validate('stytch.magicLinks.email.discovery.send').isString('email_address', data.email_address).isOptionalString('discovery_redirect_url', data.discovery_redirect_url).isOptionalString('login_template_id', data.login_template_id).isOptionalString('locale', data.locale).isOptionalNumber('discovery_expiration_minutes', data.discovery_expiration_minutes);
                  _context69.next = 3;
                  return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
                case 3:
                  _yield$this$dfpProtec18 = _context69.sent;
                  dfp_telemetry_id = _yield$this$dfpProtec18.dfp_telemetry_id;
                  captcha_token = _yield$this$dfpProtec18.captcha_token;
                  _context69.next = 8;
                  return this.getCodeChallenge();
                case 8:
                  pkce_code_challenge = _context69.sent;
                  requestBody = Object.assign(Object.assign({}, data), {
                    pkce_code_challenge: pkce_code_challenge,
                    dfp_telemetry_id: dfp_telemetry_id,
                    captcha_token: captcha_token
                  });
                  return _context69.abrupt("return", this._networkClient.retriableFetchSDK({
                    url: '/b2b/magic_links/email/discovery/send',
                    body: requestBody,
                    method: 'POST',
                    retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                  }));
                case 11:
                case "end":
                  return _context69.stop();
              }
            }, _callee69, this);
          }));
        }
      }
    };
    this.authenticate = function (data) {
      return __awaiter$1(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
        var passwordResetPKPair, resp;
        return _regeneratorRuntime().wrap(function _callee70$(_context70) {
          while (1) switch (_context70.prev = _context70.next) {
            case 0:
              validate('stytch.magicLinks.authenticate').isString('magic_links_token', data.magic_links_token).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context70.next = 3;
              return this._passwordResetPKCEManager.getPKPair();
            case 3:
              passwordResetPKPair = _context70.sent;
              resp = null;
              if (!(passwordResetPKPair === null || passwordResetPKPair === void 0 ? void 0 : passwordResetPKPair.code_verifier)) {
                _context70.next = 19;
                break;
              }
              _context70.prev = 6;
              _context70.next = 9;
              return this.handlePKCEForAuthenticate(this._passwordResetPKCEManager, data);
            case 9:
              resp = _context70.sent;
              _context70.next = 19;
              break;
            case 12:
              _context70.prev = 12;
              _context70.t0 = _context70["catch"](6);
              if (!_context70.t0.message.includes('pkce')) {
                _context70.next = 18;
                break;
              }
              console.log('Authenticate with passwords pkce namespace failed. Falling back to authenticate with magic_links namespace.');
              _context70.next = 19;
              break;
            case 18:
              throw _context70.t0;
            case 19:
              if (resp) {
                _context70.next = 23;
                break;
              }
              _context70.next = 22;
              return this.handlePKCEForAuthenticate(this._pkceManager, data);
            case 22:
              resp = _context70.sent;
            case 23:
              this._subscriptionService.updateSession(resp);
              return _context70.abrupt("return", resp);
            case 25:
            case "end":
              return _context70.stop();
          }
        }, _callee70, this, [[6, 12]]);
      }));
    };
    this.discovery = {
      authenticate: function authenticate(data) {
        return __awaiter$1(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
          var pkPair, _yield$this$dfpProtec19, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee71$(_context71) {
            while (1) switch (_context71.prev = _context71.next) {
              case 0:
                validate('stytch.magicLinks.discovery.authenticate').isString('discovery_magic_links_token', data.discovery_magic_links_token);
                _context71.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context71.sent;
                _context71.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec19 = _context71.sent;
                dfp_telemetry_id = _yield$this$dfpProtec19.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec19.captcha_token;
                requestBody = Object.assign({
                  pkce_code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context71.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/magic_links/discovery/authenticate',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context71.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateSession(resp);
                return _context71.abrupt("return", resp);
              case 16:
              case "end":
                return _context71.stop();
            }
          }, _callee71, this);
        }));
      }
    };
  }
  return _createClass(HeadlessB2BMagicLinksClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee72() {
        var _yield$this$_config5, pkceRequiredForEmailMagicLinks, keyPair;
        return _regeneratorRuntime().wrap(function _callee72$(_context72) {
          while (1) switch (_context72.prev = _context72.next) {
            case 0:
              _context72.next = 2;
              return this._config;
            case 2:
              _yield$this$_config5 = _context72.sent;
              pkceRequiredForEmailMagicLinks = _yield$this$_config5.pkceRequiredForEmailMagicLinks;
              if (pkceRequiredForEmailMagicLinks) {
                _context72.next = 6;
                break;
              }
              return _context72.abrupt("return", undefined);
            case 6:
              _context72.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context72.sent;
              if (!keyPair) {
                _context72.next = 11;
                break;
              }
              return _context72.abrupt("return", keyPair.code_challenge);
            case 11:
              _context72.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context72.sent;
              return _context72.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context72.stop();
          }
        }, _callee72, this);
      }));
    }
  }, {
    key: "handlePKCEForAuthenticate",
    value: function handlePKCEForAuthenticate(pkceManager, data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee73() {
        var pkPair, _yield$this$dfpProtec20, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee73$(_context73) {
          while (1) switch (_context73.prev = _context73.next) {
            case 0:
              _context73.next = 2;
              return pkceManager.getPKPair();
            case 2:
              pkPair = _context73.sent;
              _context73.next = 5;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 5:
              _yield$this$dfpProtec20 = _context73.sent;
              dfp_telemetry_id = _yield$this$dfpProtec20.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec20.captcha_token;
              _context73.t0 = Object;
              _context73.t1 = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context73.t2 = dfp_telemetry_id;
              _context73.t3 = captcha_token;
              _context73.next = 14;
              return this._subscriptionService.getIntermediateSessionToken();
            case 14:
              _context73.t4 = _context73.sent;
              if (_context73.t4) {
                _context73.next = 17;
                break;
              }
              _context73.t4 = undefined;
            case 17:
              _context73.t5 = _context73.t4;
              _context73.t6 = {
                pkce_code_verifier: _context73.t1,
                dfp_telemetry_id: _context73.t2,
                captcha_token: _context73.t3,
                intermediate_session_token: _context73.t5
              };
              _context73.t7 = data;
              requestBody = _context73.t0.assign.call(_context73.t0, _context73.t6, _context73.t7);
              _context73.next = 23;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/magic_links/authenticate',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 23:
              resp = _context73.sent;
              pkceManager.clearPKPair();
              return _context73.abrupt("return", resp);
            case 26:
            case "end":
              return _context73.stop();
          }
        }, _callee73, this);
      }));
    }
  }]);
}();
var HeadlessB2BSelfClient = /*#__PURE__*/_createClass(function HeadlessB2BSelfClient(_networkClient, _apiNetworkClient, _subscriptionService) {
  var _this15 = this;
  _classCallCheck(this, HeadlessB2BSelfClient);
  this._networkClient = _networkClient;
  this._apiNetworkClient = _apiNetworkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee74$(_context74) {
        while (1) switch (_context74.prev = _context74.next) {
          case 0:
            _context74.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/me",
              method: 'GET'
            });
          case 2:
            resp = _context74.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context74.abrupt("return", resp.member);
          case 5:
          case "end":
            return _context74.stop();
        }
      }, _callee74, this);
    }));
  };
  this.getSync = function () {
    return _this15._subscriptionService.getMember();
  };
  this.getInfo = function () {
    return {
      member: _this15.getSync(),
      fromCache: _this15._subscriptionService.getFromCache()
    };
  };
  this.onChange = function (callback) {
    return _this15._subscriptionService.subscribeToState(function (state) {
      var _a;
      return callback((_a = state === null || state === void 0 ? void 0 : state.member) !== null && _a !== void 0 ? _a : null);
    });
  };
  this.update = function (data) {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee75$(_context75) {
        while (1) switch (_context75.prev = _context75.next) {
          case 0:
            validate('stytch.self.update').isOptionalString('name', data.name).isOptionalObject('untrusted_metadata', data.untrusted_metadata).isOptionalBoolean('mfa_enrolled', data.mfa_enrolled).isOptionalString('mfa_phone_number', data.mfa_phone_number).isOptionalString('default_mfa_method', data.default_mfa_method);
            _context75.next = 3;
            return this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/update',
              body: data,
              method: 'PUT'
            });
          case 3:
            resp = _context75.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context75.abrupt("return", resp);
          case 6:
          case "end":
            return _context75.stop();
        }
      }, _callee75, this);
    }));
  };
  this.deleteMFAPhoneNumber = function () {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee76$(_context76) {
        while (1) switch (_context76.prev = _context76.next) {
          case 0:
            _context76.next = 2;
            return this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/deletePhoneNumber',
              method: 'DELETE'
            });
          case 2:
            resp = _context76.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context76.abrupt("return", resp);
          case 5:
          case "end":
            return _context76.stop();
        }
      }, _callee76, this);
    }));
  };
  this.deleteMFATOTP = function () {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee77() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee77$(_context77) {
        while (1) switch (_context77.prev = _context77.next) {
          case 0:
            _context77.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/deleteTOTP",
              method: 'DELETE'
            });
          case 2:
            resp = _context77.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context77.abrupt("return", resp);
          case 5:
          case "end":
            return _context77.stop();
        }
      }, _callee77, this);
    }));
  };
  this.deletePassword = function (passwordId) {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee78() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee78$(_context78) {
        while (1) switch (_context78.prev = _context78.next) {
          case 0:
            _context78.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/passwords/".concat(passwordId),
              method: 'DELETE'
            });
          case 2:
            resp = _context78.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context78.abrupt("return", resp);
          case 5:
          case "end":
            return _context78.stop();
        }
      }, _callee78, this);
    }));
  };
  this.unlinkRetiredEmail = function (data) {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee79() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee79$(_context79) {
        while (1) switch (_context79.prev = _context79.next) {
          case 0:
            _context79.next = 2;
            return this._apiNetworkClient.fetchSDK({
              url: '/b2b/organizations/members/unlink_retired_email',
              method: 'POST',
              body: data
            });
          case 2:
            resp = _context79.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context79.abrupt("return", resp);
          case 5:
          case "end":
            return _context79.stop();
        }
      }, _callee79, this);
    }));
  };
  this.startEmailUpdate = function (data) {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee80() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee80$(_context80) {
        while (1) switch (_context80.prev = _context80.next) {
          case 0:
            _context80.next = 2;
            return this._apiNetworkClient.fetchSDK({
              url: '/b2b/organizations/members/start_email_update',
              method: 'POST',
              body: data
            });
          case 2:
            resp = _context80.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context80.abrupt("return", resp);
          case 5:
          case "end":
            return _context80.stop();
        }
      }, _callee80, this);
    }));
  };
  this.getConnectedApps = function () {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {
      return _regeneratorRuntime().wrap(function _callee81$(_context81) {
        while (1) switch (_context81.prev = _context81.next) {
          case 0:
            return _context81.abrupt("return", this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/connected_apps',
              method: 'GET'
            }));
          case 1:
          case "end":
            return _context81.stop();
        }
      }, _callee81, this);
    }));
  };
  this.revokeConnectedApp = function (data) {
    return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {
      return _regeneratorRuntime().wrap(function _callee82$(_context82) {
        while (1) switch (_context82.prev = _context82.next) {
          case 0:
            return _context82.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/connected_apps/".concat(data.connected_app_id, "/revoke"),
              method: 'POST'
            }));
          case 1:
          case "end":
            return _context82.stop();
        }
      }, _callee82, this);
    }));
  };
});
var HeadlessB2BSSOClient = /*#__PURE__*/function () {
  function HeadlessB2BSSOClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config, dfpProtectedAuth) {
    var _this16 = this;
    _classCallCheck(this, HeadlessB2BSSOClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.saml = {
      createConnection: function createConnection(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee83() {
          return _regeneratorRuntime().wrap(function _callee83$(_context83) {
            while (1) switch (_context83.prev = _context83.next) {
              case 0:
                _context83.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/saml',
                  method: 'POST',
                  body: data
                });
              case 2:
                return _context83.abrupt("return", _context83.sent);
              case 3:
              case "end":
                return _context83.stop();
            }
          }, _callee83, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee84() {
          return _regeneratorRuntime().wrap(function _callee84$(_context84) {
            while (1) switch (_context84.prev = _context84.next) {
              case 0:
                _context84.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context84.abrupt("return", _context84.sent);
              case 3:
              case "end":
                return _context84.stop();
            }
          }, _callee84, this);
        }));
      },
      updateConnectionByURL: function updateConnectionByURL(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee85() {
          return _regeneratorRuntime().wrap(function _callee85$(_context85) {
            while (1) switch (_context85.prev = _context85.next) {
              case 0:
                _context85.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/url"),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context85.abrupt("return", _context85.sent);
              case 3:
              case "end":
                return _context85.stop();
            }
          }, _callee85, this);
        }));
      },
      deleteVerificationCertificate: function deleteVerificationCertificate(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee86() {
          return _regeneratorRuntime().wrap(function _callee86$(_context86) {
            while (1) switch (_context86.prev = _context86.next) {
              case 0:
                _context86.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/verification_certificates/").concat(data.certificate_id),
                  method: 'DELETE'
                });
              case 2:
                return _context86.abrupt("return", _context86.sent);
              case 3:
              case "end":
                return _context86.stop();
            }
          }, _callee86, this);
        }));
      },
      deleteEncryptionPrivateKey: function deleteEncryptionPrivateKey(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee87() {
          return _regeneratorRuntime().wrap(function _callee87$(_context87) {
            while (1) switch (_context87.prev = _context87.next) {
              case 0:
                _context87.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/encryption_private_key/").concat(data.private_key_id),
                  method: 'DELETE'
                });
              case 2:
                return _context87.abrupt("return", _context87.sent);
              case 3:
              case "end":
                return _context87.stop();
            }
          }, _callee87, this);
        }));
      }
    };
    this.oidc = {
      createConnection: function createConnection(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee88() {
          return _regeneratorRuntime().wrap(function _callee88$(_context88) {
            while (1) switch (_context88.prev = _context88.next) {
              case 0:
                _context88.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/oidc',
                  method: 'POST',
                  body: data
                });
              case 2:
                return _context88.abrupt("return", _context88.sent);
              case 3:
              case "end":
                return _context88.stop();
            }
          }, _callee88, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee89() {
          return _regeneratorRuntime().wrap(function _callee89$(_context89) {
            while (1) switch (_context89.prev = _context89.next) {
              case 0:
                _context89.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/oidc/".concat(data.connection_id),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context89.abrupt("return", _context89.sent);
              case 3:
              case "end":
                return _context89.stop();
            }
          }, _callee89, this);
        }));
      }
    };
    this.external = {
      createConnection: function createConnection(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee90() {
          return _regeneratorRuntime().wrap(function _callee90$(_context90) {
            while (1) switch (_context90.prev = _context90.next) {
              case 0:
                _context90.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/external',
                  method: 'POST',
                  body: data
                });
              case 2:
                return _context90.abrupt("return", _context90.sent);
              case 3:
              case "end":
                return _context90.stop();
            }
          }, _callee90, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee91() {
          return _regeneratorRuntime().wrap(function _callee91$(_context91) {
            while (1) switch (_context91.prev = _context91.next) {
              case 0:
                _context91.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/external/".concat(data.connection_id),
                  method: 'PUT',
                  body: data
                });
              case 2:
                return _context91.abrupt("return", _context91.sent);
              case 3:
              case "end":
                return _context91.stop();
            }
          }, _callee91, this);
        }));
      }
    };
  }
  return _createClass(HeadlessB2BSSOClient, [{
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee92() {
        var keyPair, _yield$this$dfpProtec21, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee92$(_context92) {
          while (1) switch (_context92.prev = _context92.next) {
            case 0:
              validate('stytch.sso.authenticate').isString('sso_token', options.sso_token).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context92.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context92.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for SSO flow.\n' + 'Consider using stytch.sso.start() to add PKCE to your SSO flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context92.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec21 = _context92.sent;
              dfp_telemetry_id = _yield$this$dfpProtec21.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec21.captcha_token;
              _context92.t0 = this._networkClient;
              _context92.t1 = Object;
              _context92.t2 = Object.assign({
                pkce_code_verifier: keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier
              }, options);
              _context92.t3 = dfp_telemetry_id;
              _context92.t4 = captcha_token;
              _context92.next = 17;
              return this._subscriptionService.getIntermediateSessionToken();
            case 17:
              _context92.t5 = _context92.sent;
              if (_context92.t5) {
                _context92.next = 20;
                break;
              }
              _context92.t5 = undefined;
            case 20:
              _context92.t6 = _context92.t5;
              _context92.t7 = {
                dfp_telemetry_id: _context92.t3,
                captcha_token: _context92.t4,
                intermediate_session_token: _context92.t6
              };
              _context92.t8 = _context92.t1.assign.call(_context92.t1, _context92.t2, _context92.t7);
              _context92.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context92.t10 = {
                url: '/b2b/sso/authenticate',
                method: 'POST',
                body: _context92.t8,
                retryCallback: _context92.t9
              };
              _context92.next = 27;
              return _context92.t0.retriableFetchSDK.call(_context92.t0, _context92.t10);
            case 27:
              resp = _context92.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context92.abrupt("return", resp);
            case 31:
            case "end":
              return _context92.stop();
          }
        }, _callee92, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {
        return _regeneratorRuntime().wrap(function _callee93$(_context93) {
          while (1) switch (_context93.prev = _context93.next) {
            case 0:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context93.next = 2;
                break;
              }
              return _context93.abrupt("return", this._config.testAPIURL);
            case 2:
              return _context93.abrupt("return", this._config.liveAPIURL);
            case 3:
            case "end":
              return _context93.stop();
          }
        }, _callee93, this);
      }));
    }
  }, {
    key: "start",
    value: function start(_ref7) {
      var connection_id = _ref7.connection_id,
        login_redirect_url = _ref7.login_redirect_url,
        signup_redirect_url = _ref7.signup_redirect_url;
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee94() {
        var _yield$this$_dynamicC3, pkceRequiredForSso, baseURL, startUrl, keyPair;
        return _regeneratorRuntime().wrap(function _callee94$(_context94) {
          while (1) switch (_context94.prev = _context94.next) {
            case 0:
              _context94.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC3 = _context94.sent;
              pkceRequiredForSso = _yield$this$_dynamicC3.pkceRequiredForSso;
              _context94.next = 6;
              return this.getBaseApiUrl();
            case 6:
              baseURL = _context94.sent;
              startUrl = new URL("".concat(baseURL, "/v1/public/sso/start"));
              startUrl.searchParams.set('public_token', this._config.publicToken);
              startUrl.searchParams.set('connection_id', connection_id);
              if (!pkceRequiredForSso) {
                _context94.next = 17;
                break;
              }
              _context94.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context94.sent;
              startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
              _context94.next = 18;
              break;
            case 17:
              this._pkceManager.clearPKPair();
            case 18:
              login_redirect_url && startUrl.searchParams.set('login_redirect_url', login_redirect_url);
              signup_redirect_url && startUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
              window.location.href = startUrl.toString();
            case 21:
            case "end":
              return _context94.stop();
          }
        }, _callee94, this);
      }));
    }
  }, {
    key: "getConnections",
    value: function getConnections() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {
        return _regeneratorRuntime().wrap(function _callee95$(_context95) {
          while (1) switch (_context95.prev = _context95.next) {
            case 0:
              _context95.next = 2;
              return this._networkClient.fetchSDK({
                url: '/b2b/sso',
                method: 'GET'
              });
            case 2:
              return _context95.abrupt("return", _context95.sent);
            case 3:
            case "end":
              return _context95.stop();
          }
        }, _callee95, this);
      }));
    }
  }, {
    key: "discoverConnections",
    value: function discoverConnections(emailAddress) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
        return _regeneratorRuntime().wrap(function _callee96$(_context96) {
          while (1) switch (_context96.prev = _context96.next) {
            case 0:
              _context96.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/sso/discovery/connections?email_address=".concat(encodeURIComponent(emailAddress)),
                method: 'GET'
              });
            case 2:
              return _context96.abrupt("return", _context96.sent);
            case 3:
            case "end":
              return _context96.stop();
          }
        }, _callee96, this);
      }));
    }
  }, {
    key: "deleteConnection",
    value: function deleteConnection(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
        return _regeneratorRuntime().wrap(function _callee97$(_context97) {
          while (1) switch (_context97.prev = _context97.next) {
            case 0:
              return _context97.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/sso/".concat(connectionId),
                method: 'DELETE'
              }));
            case 1:
            case "end":
              return _context97.stop();
          }
        }, _callee97, this);
      }));
    }
  }]);
}();
var HeadlessB2BSCIMClient = /*#__PURE__*/function () {
  function HeadlessB2BSCIMClient(_networkClient, _subscriptionService) {
    _classCallCheck(this, HeadlessB2BSCIMClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
  }
  return _createClass(HeadlessB2BSCIMClient, [{
    key: "createConnection",
    value: function createConnection(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee98() {
        return _regeneratorRuntime().wrap(function _callee98$(_context98) {
          while (1) switch (_context98.prev = _context98.next) {
            case 0:
              validate('stytch.scim.createConnection').isOptionalString('display_name', data.display_name).isOptionalString('identity_provider', data.identity_provider);
              _context98.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim',
                method: 'POST',
                body: data
              });
            case 3:
              return _context98.abrupt("return", _context98.sent);
            case 4:
            case "end":
              return _context98.stop();
          }
        }, _callee98, this);
      }));
    }
  }, {
    key: "updateConnection",
    value: function updateConnection(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee99() {
        return _regeneratorRuntime().wrap(function _callee99$(_context99) {
          while (1) switch (_context99.prev = _context99.next) {
            case 0:
              validate('stytch.scim.updateConnection').isString('connection_id', data.connection_id).isOptionalString('display_name', data.display_name).isOptionalString('identity_provider', data.identity_provider);
              _context99.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/".concat(data.connection_id),
                method: 'PUT',
                body: data
              });
            case 3:
              return _context99.abrupt("return", _context99.sent);
            case 4:
            case "end":
              return _context99.stop();
          }
        }, _callee99, this);
      }));
    }
  }, {
    key: "deleteConnection",
    value: function deleteConnection(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {
        return _regeneratorRuntime().wrap(function _callee100$(_context100) {
          while (1) switch (_context100.prev = _context100.next) {
            case 0:
              validate('stytch.scim.deleteConnection').isString('connection_id', connectionId);
              _context100.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/".concat(connectionId),
                method: 'DELETE'
              });
            case 3:
              return _context100.abrupt("return", _context100.sent);
            case 4:
            case "end":
              return _context100.stop();
          }
        }, _callee100, this);
      }));
    }
  }, {
    key: "getConnection",
    value: function getConnection() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee101() {
        return _regeneratorRuntime().wrap(function _callee101$(_context101) {
          while (1) switch (_context101.prev = _context101.next) {
            case 0:
              _context101.next = 2;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim',
                method: 'GET'
              });
            case 2:
              return _context101.abrupt("return", _context101.sent);
            case 3:
            case "end":
              return _context101.stop();
          }
        }, _callee101, this);
      }));
    }
  }, {
    key: "getConnectionGroups",
    value: function getConnectionGroups(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee102() {
        return _regeneratorRuntime().wrap(function _callee102$(_context102) {
          while (1) switch (_context102.prev = _context102.next) {
            case 0:
              validate('stytch.scim.getConnectionGroups').isOptionalNumber('limit', data.limit).isOptionalString('cursor', data.cursor);
              _context102.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim/groups',
                method: 'POST',
                body: data
              });
            case 3:
              return _context102.abrupt("return", _context102.sent);
            case 4:
            case "end":
              return _context102.stop();
          }
        }, _callee102, this);
      }));
    }
  }, {
    key: "rotateStart",
    value: function rotateStart(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee103() {
        return _regeneratorRuntime().wrap(function _callee103$(_context103) {
          while (1) switch (_context103.prev = _context103.next) {
            case 0:
              validate('stytch.scim.rotateStart').isString('connectionId', connectionId);
              _context103.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/start",
                method: 'POST',
                body: {
                  connection_id: connectionId
                }
              });
            case 3:
              return _context103.abrupt("return", _context103.sent);
            case 4:
            case "end":
              return _context103.stop();
          }
        }, _callee103, this);
      }));
    }
  }, {
    key: "rotateComplete",
    value: function rotateComplete(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee104() {
        return _regeneratorRuntime().wrap(function _callee104$(_context104) {
          while (1) switch (_context104.prev = _context104.next) {
            case 0:
              validate('stytch.scim.rotateComplete').isString('connectionId', connectionId);
              _context104.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/complete",
                method: 'POST',
                body: {
                  connection_id: connectionId
                }
              });
            case 3:
              return _context104.abrupt("return", _context104.sent);
            case 4:
            case "end":
              return _context104.stop();
          }
        }, _callee104, this);
      }));
    }
  }, {
    key: "rotateCancel",
    value: function rotateCancel(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee105() {
        return _regeneratorRuntime().wrap(function _callee105$(_context105) {
          while (1) switch (_context105.prev = _context105.next) {
            case 0:
              validate('stytch.scim.rotateCancel').isString('connectionId', connectionId);
              _context105.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/cancel",
                method: 'POST',
                body: {
                  connection_id: connectionId
                }
              });
            case 3:
              return _context105.abrupt("return", _context105.sent);
            case 4:
            case "end":
              return _context105.stop();
          }
        }, _callee105, this);
      }));
    }
  }]);
}();
var HeadlessB2BOrganizationClient = /*#__PURE__*/_createClass(function HeadlessB2BOrganizationClient(_networkClient, _apiNetworkClient, _subscriptionService) {
  var _this17 = this;
  _classCallCheck(this, HeadlessB2BOrganizationClient);
  this._networkClient = _networkClient;
  this._apiNetworkClient = _apiNetworkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee106() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee106$(_context106) {
        while (1) switch (_context106.prev = _context106.next) {
          case 0:
            _context106.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              method: 'GET'
            });
          case 2:
            resp = _context106.sent;
            this._subscriptionService.updateOrganization(resp.organization);
            return _context106.abrupt("return", resp.organization);
          case 5:
          case "end":
            return _context106.stop();
        }
      }, _callee106, this);
    }));
  };
  this.getSync = function () {
    return _this17._subscriptionService.getOrganization();
  };
  this.getInfo = function () {
    return {
      organization: _this17.getSync(),
      fromCache: _this17._subscriptionService.getFromCache()
    };
  };
  this.onChange = function (callback) {
    return _this17._subscriptionService.subscribeToState(function (state) {
      var _a;
      return callback((_a = state === null || state === void 0 ? void 0 : state.organization) !== null && _a !== void 0 ? _a : null);
    });
  };
  this.update = function (data) {
    return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee107() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee107$(_context107) {
        while (1) switch (_context107.prev = _context107.next) {
          case 0:
            _context107.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              method: 'PUT',
              body: data
            });
          case 2:
            resp = _context107.sent;
            this._subscriptionService.updateOrganization(resp.organization);
            return _context107.abrupt("return", resp);
          case 5:
          case "end":
            return _context107.stop();
        }
      }, _callee107, this);
    }));
  };
  this["delete"] = function () {
    return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee108() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee108$(_context108) {
        while (1) switch (_context108.prev = _context108.next) {
          case 0:
            _context108.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              method: 'DELETE'
            });
          case 2:
            resp = _context108.sent;
            this._subscriptionService.destroyState();
            return _context108.abrupt("return", resp);
          case 5:
          case "end":
            return _context108.stop();
        }
      }, _callee108, this);
    }));
  };
  this.getBySlug = function (data) {
    return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee109() {
      return _regeneratorRuntime().wrap(function _callee109$(_context109) {
        while (1) switch (_context109.prev = _context109.next) {
          case 0:
            validate('stytch.organization.getBySlug').isString('organization_slug', data.organization_slug);
            return _context109.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/search",
              method: 'POST',
              body: data
            }));
          case 2:
          case "end":
            return _context109.stop();
        }
      }, _callee109, this);
    }));
  };
  this.getConnectedApps = function () {
    return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee110() {
      return _regeneratorRuntime().wrap(function _callee110$(_context110) {
        while (1) switch (_context110.prev = _context110.next) {
          case 0:
            return _context110.abrupt("return", this._networkClient.fetchSDK({
              url: '/b2b/organizations/connected_apps',
              method: 'GET'
            }));
          case 1:
          case "end":
            return _context110.stop();
        }
      }, _callee110, this);
    }));
  };
  this.getConnectedApp = function (data) {
    return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee111() {
      return _regeneratorRuntime().wrap(function _callee111$(_context111) {
        while (1) switch (_context111.prev = _context111.next) {
          case 0:
            return _context111.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/connected_apps/".concat(data.connected_app_id),
              method: 'GET'
            }));
          case 1:
          case "end":
            return _context111.stop();
        }
      }, _callee111, this);
    }));
  };
  this.members = {
    create: function create(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee112() {
        return _regeneratorRuntime().wrap(function _callee112$(_context112) {
          while (1) switch (_context112.prev = _context112.next) {
            case 0:
              return _context112.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members",
                method: 'POST',
                body: data
              }));
            case 1:
            case "end":
              return _context112.stop();
          }
        }, _callee112, this);
      }));
    },
    search: function search(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee113() {
        return _regeneratorRuntime().wrap(function _callee113$(_context113) {
          while (1) switch (_context113.prev = _context113.next) {
            case 0:
              return _context113.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/me/members/search",
                method: 'POST',
                body: data
              }));
            case 1:
            case "end":
              return _context113.stop();
          }
        }, _callee113, this);
      }));
    },
    update: function update(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee114() {
        var response;
        return _regeneratorRuntime().wrap(function _callee114$(_context114) {
          while (1) switch (_context114.prev = _context114.next) {
            case 0:
              _context114.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(data.member_id),
                method: 'PUT',
                body: data
              });
            case 2:
              response = _context114.sent;
              this.updateMemberIfSelf(response);
              return _context114.abrupt("return", response);
            case 5:
            case "end":
              return _context114.stop();
          }
        }, _callee114, this);
      }));
    },
    deletePassword: function deletePassword(passwordId) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee115() {
        var response;
        return _regeneratorRuntime().wrap(function _callee115$(_context115) {
          while (1) switch (_context115.prev = _context115.next) {
            case 0:
              _context115.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/passwords/".concat(passwordId),
                method: 'DELETE'
              });
            case 2:
              response = _context115.sent;
              this.updateMemberIfSelf(response);
              return _context115.abrupt("return", response);
            case 5:
            case "end":
              return _context115.stop();
          }
        }, _callee115, this);
      }));
    },
    deleteMFAPhoneNumber: function deleteMFAPhoneNumber(memberId) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee116() {
        var response;
        return _regeneratorRuntime().wrap(function _callee116$(_context116) {
          while (1) switch (_context116.prev = _context116.next) {
            case 0:
              _context116.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/mfa_phone_numbers/".concat(memberId),
                method: 'DELETE'
              });
            case 2:
              response = _context116.sent;
              this.updateMemberIfSelf(response);
              return _context116.abrupt("return", response);
            case 5:
            case "end":
              return _context116.stop();
          }
        }, _callee116, this);
      }));
    },
    deleteMFATOTP: function deleteMFATOTP(memberId) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee117() {
        var response;
        return _regeneratorRuntime().wrap(function _callee117$(_context117) {
          while (1) switch (_context117.prev = _context117.next) {
            case 0:
              _context117.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/totp/".concat(memberId),
                method: 'DELETE'
              });
            case 2:
              response = _context117.sent;
              this.updateMemberIfSelf(response);
              return _context117.abrupt("return", response);
            case 5:
            case "end":
              return _context117.stop();
          }
        }, _callee117, this);
      }));
    },
    "delete": function _delete(memberId) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee118() {
        var _a, response;
        return _regeneratorRuntime().wrap(function _callee118$(_context118) {
          while (1) switch (_context118.prev = _context118.next) {
            case 0:
              _context118.next = 2;
              return this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(memberId),
                method: 'DELETE'
              });
            case 2:
              response = _context118.sent;
              if (memberId === ((_a = this._subscriptionService.getMember()) === null || _a === void 0 ? void 0 : _a.member_id)) {
                this._subscriptionService.destroyState();
              }
              return _context118.abrupt("return", response);
            case 5:
            case "end":
              return _context118.stop();
          }
        }, _callee118, this);
      }));
    },
    reactivate: function reactivate(memberId) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee119() {
        return _regeneratorRuntime().wrap(function _callee119$(_context119) {
          while (1) switch (_context119.prev = _context119.next) {
            case 0:
              return _context119.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(memberId, "/reactivate"),
                method: 'PUT'
              }));
            case 1:
            case "end":
              return _context119.stop();
          }
        }, _callee119, this);
      }));
    },
    unlinkRetiredEmail: function unlinkRetiredEmail(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee120() {
        var member_id, body, response;
        return _regeneratorRuntime().wrap(function _callee120$(_context120) {
          while (1) switch (_context120.prev = _context120.next) {
            case 0:
              member_id = data.member_id, body = __rest$1(data, ["member_id"]);
              _context120.next = 3;
              return this._apiNetworkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(member_id, "/unlink_retired_email"),
                method: 'POST',
                body: body
              });
            case 3:
              response = _context120.sent;
              this.updateMemberIfSelf(response);
              return _context120.abrupt("return", response);
            case 6:
            case "end":
              return _context120.stop();
          }
        }, _callee120, this);
      }));
    },
    startEmailUpdate: function startEmailUpdate(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee121() {
        var member_id, body, response;
        return _regeneratorRuntime().wrap(function _callee121$(_context121) {
          while (1) switch (_context121.prev = _context121.next) {
            case 0:
              member_id = data.member_id, body = __rest$1(data, ["member_id"]);
              _context121.next = 3;
              return this._apiNetworkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(member_id, "/start_email_update"),
                method: 'POST',
                body: body
              });
            case 3:
              response = _context121.sent;
              this.updateMemberIfSelf(response);
              return _context121.abrupt("return", response);
            case 6:
            case "end":
              return _context121.stop();
          }
        }, _callee121, this);
      }));
    },
    getConnectedApps: function getConnectedApps(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee122() {
        return _regeneratorRuntime().wrap(function _callee122$(_context122) {
          while (1) switch (_context122.prev = _context122.next) {
            case 0:
              return _context122.abrupt("return", this._networkClient.fetchSDK({
                url: "b2b/organizations/members/".concat(data.member_id, "/connected_apps"),
                method: 'GET'
              }));
            case 1:
            case "end":
              return _context122.stop();
          }
        }, _callee122, this);
      }));
    },
    revokeConnectedApp: function revokeConnectedApp(data) {
      return __awaiter$1(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee123() {
        return _regeneratorRuntime().wrap(function _callee123$(_context123) {
          while (1) switch (_context123.prev = _context123.next) {
            case 0:
              return _context123.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(data.member_id, "/connected_apps/").concat(data.connected_app_id, "/revoke"),
                method: 'POST'
              }));
            case 1:
            case "end":
              return _context123.stop();
          }
        }, _callee123, this);
      }));
    }
  };
  this.updateMemberIfSelf = function (response) {
    var _a;
    if (response.member_id === ((_a = _this17._subscriptionService.getMember()) === null || _a === void 0 ? void 0 : _a.member_id)) {
      _this17._subscriptionService.updateMember(response.member);
    }
  };
});
var HeadlessB2BOAuthClient$1 = /*#__PURE__*/function () {
  function HeadlessB2BOAuthClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config, dfpProtectedAuth) {
    var _this18 = this;
    _classCallCheck(this, HeadlessB2BOAuthClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.discovery = {
      authenticate: function authenticate(data) {
        return __awaiter$1(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee124() {
          var pkPair, _yield$this$dfpProtec22, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee124$(_context124) {
            while (1) switch (_context124.prev = _context124.next) {
              case 0:
                validate('stytch.oauth.discovery.authenticate').isString('discovery_oauth_token', data.discovery_oauth_token);
                _context124.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context124.sent;
                _context124.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec22 = _context124.sent;
                dfp_telemetry_id = _yield$this$dfpProtec22.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec22.captcha_token;
                requestBody = Object.assign({
                  pkce_code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context124.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/oauth/discovery/authenticate',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context124.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateSession(resp);
                return _context124.abrupt("return", resp);
              case 16:
              case "end":
                return _context124.stop();
            }
          }, _callee124, this);
        }));
      }
    };
    this.google = {
      start: this.startOAuthFlow(B2BOAuthProviders.Google),
      discovery: {
        start: this.startDiscoveryOAuthFlow(B2BOAuthProviders.Google)
      }
    };
    this.microsoft = {
      start: this.startOAuthFlow(B2BOAuthProviders.Microsoft),
      discovery: {
        start: this.startDiscoveryOAuthFlow(B2BOAuthProviders.Microsoft)
      }
    };
    this.hubspot = {
      start: this.startOAuthFlow(B2BOAuthProviders.HubSpot),
      discovery: {
        start: this.startDiscoveryOAuthFlow(B2BOAuthProviders.HubSpot)
      }
    };
    this.slack = {
      start: this.startOAuthFlow(B2BOAuthProviders.Slack),
      discovery: {
        start: this.startDiscoveryOAuthFlow(B2BOAuthProviders.Slack)
      }
    };
    this.github = {
      start: this.startOAuthFlow(B2BOAuthProviders.GitHub),
      discovery: {
        start: this.startDiscoveryOAuthFlow(B2BOAuthProviders.GitHub)
      }
    };
  }
  return _createClass(HeadlessB2BOAuthClient, [{
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee125() {
        var keyPair, _yield$this$dfpProtec23, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee125$(_context125) {
          while (1) switch (_context125.prev = _context125.next) {
            case 0:
              validate('stytch.oauth.authenticate').isString('oauth_token', options.oauth_token).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context125.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context125.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for OAuth flow.\n' + 'Consider using stytch.oauth.$provider.start() to add PKCE to your OAuth flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context125.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec23 = _context125.sent;
              dfp_telemetry_id = _yield$this$dfpProtec23.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec23.captcha_token;
              _context125.t0 = this._networkClient;
              _context125.t1 = Object;
              _context125.t2 = keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier;
              _context125.t3 = dfp_telemetry_id;
              _context125.t4 = captcha_token;
              _context125.next = 17;
              return this._subscriptionService.getIntermediateSessionToken();
            case 17:
              _context125.t5 = _context125.sent;
              if (_context125.t5) {
                _context125.next = 20;
                break;
              }
              _context125.t5 = undefined;
            case 20:
              _context125.t6 = _context125.t5;
              _context125.t7 = {
                pkce_code_verifier: _context125.t2,
                dfp_telemetry_id: _context125.t3,
                captcha_token: _context125.t4,
                intermediate_session_token: _context125.t6
              };
              _context125.t8 = options;
              _context125.t9 = _context125.t1.assign.call(_context125.t1, _context125.t7, _context125.t8);
              _context125.t10 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context125.t11 = {
                url: '/b2b/oauth/authenticate',
                method: 'POST',
                body: _context125.t9,
                retryCallback: _context125.t10
              };
              _context125.next = 28;
              return _context125.t0.retriableFetchSDK.call(_context125.t0, _context125.t11);
            case 28:
              resp = _context125.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context125.abrupt("return", resp);
            case 32:
            case "end":
              return _context125.stop();
          }
        }, _callee125, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee126() {
        var _yield$this$_dynamicC4, cnameDomain;
        return _regeneratorRuntime().wrap(function _callee126$(_context126) {
          while (1) switch (_context126.prev = _context126.next) {
            case 0:
              _context126.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC4 = _context126.sent;
              cnameDomain = _yield$this$_dynamicC4.cnameDomain;
              if (!cnameDomain) {
                _context126.next = 6;
                break;
              }
              return _context126.abrupt("return", "https://".concat(cnameDomain));
            case 6:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context126.next = 8;
                break;
              }
              return _context126.abrupt("return", this._config.testAPIURL);
            case 8:
              return _context126.abrupt("return", this._config.liveAPIURL);
            case 9:
            case "end":
              return _context126.stop();
          }
        }, _callee126, this);
      }));
    }
  }, {
    key: "startOAuthFlow",
    value: function startOAuthFlow(providerType) {
      var _this19 = this;
      return function (_ref8) {
        var organization_id = _ref8.organization_id,
          organization_slug = _ref8.organization_slug,
          login_redirect_url = _ref8.login_redirect_url,
          signup_redirect_url = _ref8.signup_redirect_url,
          custom_scopes = _ref8.custom_scopes,
          provider_params = _ref8.provider_params;
        return __awaiter$1(_this19, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee127() {
          var _yield$this$_dynamicC5, pkceRequiredForOAuth, baseURL, startUrl, key, keyPair;
          return _regeneratorRuntime().wrap(function _callee127$(_context127) {
            while (1) switch (_context127.prev = _context127.next) {
              case 0:
                _context127.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC5 = _context127.sent;
                pkceRequiredForOAuth = _yield$this$_dynamicC5.pkceRequiredForOAuth;
                _context127.next = 6;
                return this.getBaseApiUrl();
              case 6:
                baseURL = _context127.sent;
                startUrl = new URL("".concat(baseURL, "/v1/b2b/public/oauth/").concat(providerType, "/start"));
                startUrl.searchParams.set('public_token', this._config.publicToken);
                if (organization_id && organization_id != '') {
                  startUrl.searchParams.set('organization_id', organization_id);
                }
                if (organization_slug && organization_slug != '') {
                  startUrl.searchParams.set('slug', organization_slug);
                }
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  startUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    startUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                if (!pkceRequiredForOAuth) {
                  _context127.next = 20;
                  break;
                }
                _context127.next = 16;
                return this._pkceManager.startPKCETransaction();
              case 16:
                keyPair = _context127.sent;
                startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
                _context127.next = 21;
                break;
              case 20:
                this._pkceManager.clearPKPair();
              case 21:
                login_redirect_url && startUrl.searchParams.set('login_redirect_url', login_redirect_url);
                signup_redirect_url && startUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
                window.location.href = startUrl.toString();
              case 24:
              case "end":
                return _context127.stop();
            }
          }, _callee127, this);
        }));
      };
    }
  }, {
    key: "startDiscoveryOAuthFlow",
    value: function startDiscoveryOAuthFlow(providerType) {
      var _this20 = this;
      return function (_ref9) {
        var discovery_redirect_url = _ref9.discovery_redirect_url,
          custom_scopes = _ref9.custom_scopes,
          provider_params = _ref9.provider_params;
        return __awaiter$1(_this20, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee128() {
          var _yield$this$_dynamicC6, pkceRequiredForOAuth, baseURL, startUrl, key, keyPair;
          return _regeneratorRuntime().wrap(function _callee128$(_context128) {
            while (1) switch (_context128.prev = _context128.next) {
              case 0:
                _context128.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC6 = _context128.sent;
                pkceRequiredForOAuth = _yield$this$_dynamicC6.pkceRequiredForOAuth;
                _context128.next = 6;
                return this.getBaseApiUrl();
              case 6:
                baseURL = _context128.sent;
                startUrl = new URL("".concat(baseURL, "/v1/b2b/public/oauth/").concat(providerType, "/discovery/start"));
                startUrl.searchParams.set('public_token', this._config.publicToken);
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  startUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    startUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                if (!pkceRequiredForOAuth) {
                  _context128.next = 18;
                  break;
                }
                _context128.next = 14;
                return this._pkceManager.startPKCETransaction();
              case 14:
                keyPair = _context128.sent;
                startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
                _context128.next = 19;
                break;
              case 18:
                this._pkceManager.clearPKPair();
              case 19:
                discovery_redirect_url && startUrl.searchParams.set('discovery_redirect_url', discovery_redirect_url);
                window.location.href = startUrl.toString();
              case 21:
              case "end":
                return _context128.stop();
            }
          }, _callee128, this);
        }));
      };
    }
  }]);
}();
var HeadlessB2BSessionClient = /*#__PURE__*/function () {
  function HeadlessB2BSessionClient(_networkClient, _subscriptionService) {
    var _this21 = this;
    _classCallCheck(this, HeadlessB2BSessionClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.getSync = function () {
      return _this21._subscriptionService.getSession();
    };
    this.getInfo = function () {
      return {
        session: _this21.getSync(),
        fromCache: _this21._subscriptionService.getFromCache()
      };
    };
    this.onChange = function (callback) {
      return _this21._subscriptionService.subscribeToState(function (state) {
        var _a;
        return callback((_a = state === null || state === void 0 ? void 0 : state.session) !== null && _a !== void 0 ? _a : null);
      });
    };
    this.revoke = function (options) {
      return __awaiter$1(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee129() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee129$(_context129) {
          while (1) switch (_context129.prev = _context129.next) {
            case 0:
              _context129.prev = 0;
              _context129.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/sessions/revoke",
                method: 'POST'
              });
            case 3:
              resp = _context129.sent;
              this._subscriptionService.destroyState();
              return _context129.abrupt("return", resp);
            case 8:
              _context129.prev = 8;
              _context129.t0 = _context129["catch"](0);
              if (!!(options === null || options === void 0 ? void 0 : options.forceClear)) {
                this._subscriptionService.destroyState();
              } else if (UNRECOVERABLE_ERROR_TYPES.includes(_context129.t0.error_type)) {
                this._subscriptionService.destroyState();
              }
              throw _context129.t0;
            case 12:
            case "end":
              return _context129.stop();
          }
        }, _callee129, this, [[0, 8]]);
      }));
    };
    this.revokeForMember = function (options) {
      return __awaiter$1(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee130() {
        return _regeneratorRuntime().wrap(function _callee130$(_context130) {
          while (1) switch (_context130.prev = _context130.next) {
            case 0:
              validate('stytch.session.revokeForMember').isString('member_id', options.member_id);
              _context130.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/sessions/revoke/".concat(options.member_id),
                method: 'POST'
              });
            case 3:
              return _context130.abrupt("return", _context130.sent);
            case 4:
            case "end":
              return _context130.stop();
          }
        }, _callee130, this);
      }));
    };
    this.authenticate = function (options) {
      return __awaiter$1(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee131() {
        var _this22 = this;
        var initialSession, isSessionStale, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee131$(_context131) {
          while (1) switch (_context131.prev = _context131.next) {
            case 0:
              initialSession = this._subscriptionService.getSession();
              isSessionStale = function isSessionStale() {
                var _a;
                return (initialSession === null || initialSession === void 0 ? void 0 : initialSession.member_session_id) !== ((_a = _this22._subscriptionService.getSession()) === null || _a === void 0 ? void 0 : _a.member_session_id);
              };
              _context131.prev = 2;
              requestBody = {
                session_duration_minutes: options === null || options === void 0 ? void 0 : options.session_duration_minutes
              };
              _context131.next = 6;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/authenticate',
                body: requestBody,
                method: 'POST'
              });
            case 6:
              resp = _context131.sent;
              if (!isSessionStale()) {
                _context131.next = 9;
                break;
              }
              return _context131.abrupt("return", this.authenticate(options));
            case 9:
              this._subscriptionService.updateSession(resp);
              return _context131.abrupt("return", resp);
            case 13:
              _context131.prev = 13;
              _context131.t0 = _context131["catch"](2);
              if (!isSessionStale()) {
                _context131.next = 17;
                break;
              }
              return _context131.abrupt("return", this.authenticate(options));
            case 17:
              if (UNRECOVERABLE_ERROR_TYPES.includes(_context131.t0.error_type)) {
                this._subscriptionService.destroySession();
              }
              throw _context131.t0;
            case 19:
            case "end":
              return _context131.stop();
          }
        }, _callee131, this, [[2, 13]]);
      }));
    };
    this.exchange = function (data) {
      return __awaiter$1(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee132() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee132$(_context132) {
          while (1) switch (_context132.prev = _context132.next) {
            case 0:
              validate('stytch.session.exchange').isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context132.prev = 1;
              _context132.next = 4;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/exchange',
                body: data,
                method: 'POST'
              });
            case 4:
              resp = _context132.sent;
              this._subscriptionService.updateSession(resp);
              return _context132.abrupt("return", resp);
            case 9:
              _context132.prev = 9;
              _context132.t0 = _context132["catch"](1);
              throw _context132.t0;
            case 12:
            case "end":
              return _context132.stop();
          }
        }, _callee132, this, [[1, 9]]);
      }));
    };
    this.exchangeAccessToken = function (data) {
      return __awaiter$1(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee133() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee133$(_context133) {
          while (1) switch (_context133.prev = _context133.next) {
            case 0:
              validate('stytch.session.exchange').isString('organization_id', data.access_token).isNumber('session_duration_minutes', data.session_duration_minutes);
              _context133.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/exchange_access_token',
                body: data,
                method: 'POST'
              });
            case 3:
              resp = _context133.sent;
              this._subscriptionService.updateSession(resp);
              return _context133.abrupt("return", resp);
            case 6:
            case "end":
              return _context133.stop();
          }
        }, _callee133, this);
      }));
    };
    this.attest = function (data) {
      return __awaiter$1(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee134() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee134$(_context134) {
          while (1) switch (_context134.prev = _context134.next) {
            case 0:
              validate('stytch.session.attest').isOptionalString('organization_id', data.organization_id).isString('profile_id', data.profile_id).isString('token', data.token).isOptionalNumber('session_duration_minutes', data.session_duration_minutes);
              _context134.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/attest',
                body: data,
                method: 'POST'
              });
            case 3:
              resp = _context134.sent;
              this._subscriptionService.updateSession(resp);
              return _context134.abrupt("return", resp);
            case 6:
            case "end":
              return _context134.stop();
          }
        }, _callee134, this);
      }));
    };
  }
  return _createClass(HeadlessB2BSessionClient, [{
    key: "getTokens",
    value: function getTokens() {
      return this._subscriptionService.getTokens();
    }
  }, {
    key: "updateSession",
    value: function updateSession(tokens) {
      var _a;
      validate('stytch.session.updateSession').isString('session_token', tokens.session_token).isOptionalString('session_jwt', (_a = tokens.session_jwt) !== null && _a !== void 0 ? _a : undefined);
      this._subscriptionService.updateTokens(tokens);
    }
  }]);
}();
var HeadlessB2BDiscoveryClient = /*#__PURE__*/_createClass(function HeadlessB2BDiscoveryClient(_networkClient, _subscriptionService) {
  var _this23 = this;
  _classCallCheck(this, HeadlessB2BDiscoveryClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.organizations = {
    list: function list() {
      return __awaiter$1(_this23, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee135() {
        return _regeneratorRuntime().wrap(function _callee135$(_context135) {
          while (1) switch (_context135.prev = _context135.next) {
            case 0:
              _context135.t0 = this._networkClient;
              _context135.next = 3;
              return this._subscriptionService.getIntermediateSessionToken();
            case 3:
              _context135.t1 = _context135.sent;
              if (_context135.t1) {
                _context135.next = 6;
                break;
              }
              _context135.t1 = undefined;
            case 6:
              _context135.t2 = _context135.t1;
              _context135.t3 = {
                intermediate_session_token: _context135.t2
              };
              _context135.t4 = {
                url: '/b2b/discovery/organizations',
                body: _context135.t3,
                method: 'POST'
              };
              return _context135.abrupt("return", _context135.t0.fetchSDK.call(_context135.t0, _context135.t4));
            case 10:
            case "end":
              return _context135.stop();
          }
        }, _callee135, this);
      }));
    },
    create: function create(data) {
      return __awaiter$1(_this23, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee136() {
        var requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee136$(_context136) {
          while (1) switch (_context136.prev = _context136.next) {
            case 0:
              validate('stytch.discovery.organizations.create').isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('organization_name', data.organization_name).isOptionalString('organization_slug', data.organization_slug).isOptionalString('organization_logo_url', data.organization_logo_url).isOptionalString('sso_jit_provisioning', data.sso_jit_provisioning).isOptionalStringArray('email_allowed_domains', data.email_allowed_domains).isOptionalString('email_invites', data.email_invites).isOptionalString('auth_methods', data.auth_methods).isOptionalStringArray('allowed_auth_methods', data.allowed_auth_methods).isOptionalString('mfa_policy', data.mfa_policy);
              _context136.t0 = Object;
              _context136.t1 = Object.assign({}, data);
              _context136.next = 5;
              return this._subscriptionService.getIntermediateSessionToken();
            case 5:
              _context136.t2 = _context136.sent;
              if (_context136.t2) {
                _context136.next = 8;
                break;
              }
              _context136.t2 = undefined;
            case 8:
              _context136.t3 = _context136.t2;
              _context136.t4 = {
                intermediate_session_token: _context136.t3
              };
              requestBody = _context136.t0.assign.call(_context136.t0, _context136.t1, _context136.t4);
              _context136.next = 13;
              return this._networkClient.fetchSDK({
                url: '/b2b/discovery/organizations/create',
                body: requestBody,
                method: 'POST'
              });
            case 13:
              resp = _context136.sent;
              this._subscriptionService.updateSession(resp);
              return _context136.abrupt("return", resp);
            case 16:
            case "end":
              return _context136.stop();
          }
        }, _callee136, this);
      }));
    }
  };
  this.intermediateSessions = {
    exchange: function exchange(data) {
      return __awaiter$1(_this23, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee137() {
        var requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee137$(_context137) {
          while (1) switch (_context137.prev = _context137.next) {
            case 0:
              validate('stytch.discovery.intermediateSessions.exchange').isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context137.t0 = Object;
              _context137.t1 = Object.assign({}, data);
              _context137.next = 5;
              return this._subscriptionService.getIntermediateSessionToken();
            case 5:
              _context137.t2 = _context137.sent;
              if (_context137.t2) {
                _context137.next = 8;
                break;
              }
              _context137.t2 = undefined;
            case 8:
              _context137.t3 = _context137.t2;
              _context137.t4 = {
                intermediate_session_token: _context137.t3
              };
              requestBody = _context137.t0.assign.call(_context137.t0, _context137.t1, _context137.t4);
              _context137.next = 13;
              return this._networkClient.fetchSDK({
                url: '/b2b/discovery/intermediate_sessions/exchange',
                body: requestBody,
                method: 'POST'
              });
            case 13:
              resp = _context137.sent;
              this._subscriptionService.updateSession(resp);
              return _context137.abrupt("return", resp);
            case 16:
            case "end":
              return _context137.stop();
          }
        }, _callee137, this);
      }));
    }
  };
});
var DefaultDynamicConfig = Promise.resolve({
  pkceRequiredForPasswordResets: false
});
var HeadlessB2BPasswordsClient = /*#__PURE__*/function () {
  function HeadlessB2BPasswordsClient(_networkClient, _subscriptionService, _pkceManager) {
    var _this24 = this;
    var _config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DefaultDynamicConfig;
    var dfpProtectedAuth = arguments.length > 4 ? arguments[4] : undefined;
    _classCallCheck(this, HeadlessB2BPasswordsClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.discovery = {
      resetByEmailStart: function resetByEmailStart(options) {
        return __awaiter$1(_this24, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee138() {
          var pkce_code_challenge, _yield$this$dfpProtec24, dfp_telemetry_id, captcha_token;
          return _regeneratorRuntime().wrap(function _callee138$(_context138) {
            while (1) switch (_context138.prev = _context138.next) {
              case 0:
                validate('stytch.passwords.discovery.resetByEmailStart').isString('email', options.email_address).isOptionalString('login_redirect_url', options.discovery_redirect_url).isOptionalString('reset_password_redirect_url', options.reset_password_redirect_url).isOptionalString('reset_password_template_id', options.reset_password_template_id).isOptionalNumber('reset_password_expiration_minutes', options.reset_password_expiration_minutes).isOptionalString('verify_email_template_id', options.verify_email_template_id).isOptionalString('locale', options.locale);
                _context138.next = 3;
                return this.getCodeChallenge();
              case 3:
                pkce_code_challenge = _context138.sent;
                _context138.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec24 = _context138.sent;
                dfp_telemetry_id = _yield$this$dfpProtec24.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec24.captcha_token;
                return _context138.abrupt("return", this._networkClient.retriableFetchSDK({
                  url: '/b2b/passwords/discovery/reset/start',
                  method: 'POST',
                  body: {
                    email_address: options.email_address,
                    discovery_redirect_url: options.discovery_redirect_url,
                    reset_password_redirect_url: options.reset_password_redirect_url,
                    reset_password_expiration_minutes: options.reset_password_expiration_minutes,
                    reset_password_template_id: options.reset_password_template_id,
                    verify_email_template_id: options.verify_email_template_id,
                    locale: options.locale,
                    pkce_code_challenge: pkce_code_challenge,
                    captcha_token: captcha_token,
                    dfp_telemetry_id: dfp_telemetry_id
                  },
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                }));
              case 10:
              case "end":
                return _context138.stop();
            }
          }, _callee138, this);
        }));
      },
      resetByEmail: function resetByEmail(options) {
        return __awaiter$1(_this24, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee139() {
          var _yield$this$dfpProtec25, dfp_telemetry_id, captcha_token, pkPair, pkce_code_verifier, resp;
          return _regeneratorRuntime().wrap(function _callee139$(_context139) {
            while (1) switch (_context139.prev = _context139.next) {
              case 0:
                validate('stytch.passwords.discovery.resetByEmail').isString('password_reset_token', options.password_reset_token).isString('password', options.password);
                _context139.next = 3;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 3:
                _yield$this$dfpProtec25 = _context139.sent;
                dfp_telemetry_id = _yield$this$dfpProtec25.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec25.captcha_token;
                _context139.next = 8;
                return this._pkceManager.getPKPair();
              case 8:
                pkPair = _context139.sent;
                pkce_code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
                _context139.t0 = this._networkClient;
                _context139.t1 = options.password_reset_token;
                _context139.t2 = options.password;
                _context139.t3 = captcha_token;
                _context139.t4 = dfp_telemetry_id;
                _context139.t5 = pkce_code_verifier;
                _context139.next = 18;
                return this._subscriptionService.getIntermediateSessionToken();
              case 18:
                _context139.t6 = _context139.sent;
                if (_context139.t6) {
                  _context139.next = 21;
                  break;
                }
                _context139.t6 = undefined;
              case 21:
                _context139.t7 = _context139.t6;
                _context139.t8 = {
                  password_reset_token: _context139.t1,
                  password: _context139.t2,
                  captcha_token: _context139.t3,
                  dfp_telemetry_id: _context139.t4,
                  pkce_code_verifier: _context139.t5,
                  intermediate_session_token: _context139.t7
                };
                _context139.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
                _context139.t10 = {
                  url: '/b2b/passwords/discovery/reset',
                  method: 'POST',
                  body: _context139.t8,
                  retryCallback: _context139.t9
                };
                _context139.next = 27;
                return _context139.t0.retriableFetchSDK.call(_context139.t0, _context139.t10);
              case 27:
                resp = _context139.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateSession(resp);
                return _context139.abrupt("return", resp);
              case 31:
              case "end":
                return _context139.stop();
            }
          }, _callee139, this);
        }));
      },
      authenticate: function authenticate(options) {
        return __awaiter$1(_this24, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee140() {
          var pkPair, code_verifier, _yield$this$dfpProtec26, dfp_telemetry_id, captcha_token, resp;
          return _regeneratorRuntime().wrap(function _callee140$(_context140) {
            while (1) switch (_context140.prev = _context140.next) {
              case 0:
                validate('stytch.passwords.discovery.authenticate').isString('password', options.password).isString('email_address', options.email_address);
                _context140.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context140.sent;
                code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
                _context140.next = 7;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 7:
                _yield$this$dfpProtec26 = _context140.sent;
                dfp_telemetry_id = _yield$this$dfpProtec26.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec26.captcha_token;
                _context140.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/passwords/discovery/authenticate',
                  method: 'POST',
                  body: {
                    email_address: options.email_address,
                    password: options.password,
                    captcha_token: captcha_token,
                    dfp_telemetry_id: dfp_telemetry_id,
                    code_verifier: code_verifier
                  },
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context140.sent;
                this._subscriptionService.updateSession(resp);
                return _context140.abrupt("return", resp);
              case 15:
              case "end":
                return _context140.stop();
            }
          }, _callee140, this);
        }));
      }
    };
  }
  return _createClass(HeadlessB2BPasswordsClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee141() {
        var _yield$this$_config6, pkceRequiredForPasswordResets, keyPair;
        return _regeneratorRuntime().wrap(function _callee141$(_context141) {
          while (1) switch (_context141.prev = _context141.next) {
            case 0:
              _context141.next = 2;
              return this._config;
            case 2:
              _yield$this$_config6 = _context141.sent;
              pkceRequiredForPasswordResets = _yield$this$_config6.pkceRequiredForPasswordResets;
              if (pkceRequiredForPasswordResets) {
                _context141.next = 6;
                break;
              }
              return _context141.abrupt("return", undefined);
            case 6:
              _context141.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context141.sent;
              if (!keyPair) {
                _context141.next = 11;
                break;
              }
              return _context141.abrupt("return", keyPair.code_challenge);
            case 11:
              _context141.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context141.sent;
              return _context141.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context141.stop();
          }
        }, _callee141, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee142() {
        var pkPair, code_verifier, _yield$this$dfpProtec27, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee142$(_context142) {
          while (1) switch (_context142.prev = _context142.next) {
            case 0:
              validate('stytch.passwords.authenticate').isString('org_id', options.organization_id).isString('password', options.password).isString('email_address', options.email_address).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context142.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              pkPair = _context142.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context142.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec27 = _context142.sent;
              dfp_telemetry_id = _yield$this$dfpProtec27.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec27.captcha_token;
              _context142.t0 = this._networkClient;
              _context142.t1 = options.organization_id;
              _context142.t2 = options.email_address;
              _context142.t3 = options.password;
              _context142.t4 = options.session_duration_minutes;
              _context142.t5 = options.locale;
              _context142.t6 = captcha_token;
              _context142.t7 = dfp_telemetry_id;
              _context142.t8 = code_verifier;
              _context142.next = 21;
              return this._subscriptionService.getIntermediateSessionToken();
            case 21:
              _context142.t9 = _context142.sent;
              if (_context142.t9) {
                _context142.next = 24;
                break;
              }
              _context142.t9 = undefined;
            case 24:
              _context142.t10 = _context142.t9;
              _context142.t11 = {
                organization_id: _context142.t1,
                email_address: _context142.t2,
                password: _context142.t3,
                session_duration_minutes: _context142.t4,
                locale: _context142.t5,
                captcha_token: _context142.t6,
                dfp_telemetry_id: _context142.t7,
                code_verifier: _context142.t8,
                intermediate_session_token: _context142.t10
              };
              _context142.t12 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context142.t13 = {
                url: '/b2b/passwords/authenticate',
                method: 'POST',
                body: _context142.t11,
                retryCallback: _context142.t12
              };
              _context142.next = 30;
              return _context142.t0.retriableFetchSDK.call(_context142.t0, _context142.t13);
            case 30:
              resp = _context142.sent;
              this._subscriptionService.updateSession(resp);
              return _context142.abrupt("return", resp);
            case 33:
            case "end":
              return _context142.stop();
          }
        }, _callee142, this);
      }));
    }
  }, {
    key: "resetByEmailStart",
    value: function resetByEmailStart(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee143() {
        var code_challenge, _yield$this$dfpProtec28, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee143$(_context143) {
          while (1) switch (_context143.prev = _context143.next) {
            case 0:
              validate('stytch.passwords.resetByEmailStart').isString('email', options.email_address).isOptionalString('login_redirect_url', options.login_redirect_url).isOptionalString('reset_password_redirect_url', options.reset_password_redirect_url).isOptionalString('reset_password_template_id', options.reset_password_template_id).isOptionalNumber('reset_password_expiration_minutes', options.reset_password_expiration_minutes).isOptionalString('verify_email_template_id', options.verify_email_template_id).isOptionalString('locale', options.locale);
              _context143.next = 3;
              return this.getCodeChallenge();
            case 3:
              code_challenge = _context143.sent;
              _context143.next = 6;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 6:
              _yield$this$dfpProtec28 = _context143.sent;
              dfp_telemetry_id = _yield$this$dfpProtec28.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec28.captcha_token;
              return _context143.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/email/reset/start',
                method: 'POST',
                body: {
                  organization_id: options.organization_id,
                  email_address: options.email_address,
                  login_redirect_url: options.login_redirect_url,
                  reset_password_redirect_url: options.reset_password_redirect_url,
                  reset_password_expiration_minutes: options.reset_password_expiration_minutes,
                  reset_password_template_id: options.reset_password_template_id,
                  verify_email_template_id: options.verify_email_template_id,
                  locale: options.locale,
                  code_challenge: code_challenge,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 10:
            case "end":
              return _context143.stop();
          }
        }, _callee143, this);
      }));
    }
  }, {
    key: "resetByEmail",
    value: function resetByEmail(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee144() {
        var _yield$this$dfpProtec29, dfp_telemetry_id, captcha_token, pkPair, code_verifier, resp;
        return _regeneratorRuntime().wrap(function _callee144$(_context144) {
          while (1) switch (_context144.prev = _context144.next) {
            case 0:
              validate('stytch.passwords.resetByEmail').isString('password_reset_token', options.password_reset_token).isString('password', options.password).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context144.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec29 = _context144.sent;
              dfp_telemetry_id = _yield$this$dfpProtec29.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec29.captcha_token;
              _context144.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              pkPair = _context144.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context144.t0 = this._networkClient;
              _context144.t1 = options.password_reset_token;
              _context144.t2 = options.password;
              _context144.t3 = options.session_duration_minutes;
              _context144.t4 = options.locale;
              _context144.t5 = captcha_token;
              _context144.t6 = dfp_telemetry_id;
              _context144.t7 = code_verifier;
              _context144.next = 20;
              return this._subscriptionService.getIntermediateSessionToken();
            case 20:
              _context144.t8 = _context144.sent;
              if (_context144.t8) {
                _context144.next = 23;
                break;
              }
              _context144.t8 = undefined;
            case 23:
              _context144.t9 = _context144.t8;
              _context144.t10 = {
                password_reset_token: _context144.t1,
                password: _context144.t2,
                session_duration_minutes: _context144.t3,
                locale: _context144.t4,
                captcha_token: _context144.t5,
                dfp_telemetry_id: _context144.t6,
                code_verifier: _context144.t7,
                intermediate_session_token: _context144.t9
              };
              _context144.t11 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context144.t12 = {
                url: '/b2b/passwords/email/reset',
                method: 'POST',
                body: _context144.t10,
                retryCallback: _context144.t11
              };
              _context144.next = 29;
              return _context144.t0.retriableFetchSDK.call(_context144.t0, _context144.t12);
            case 29:
              resp = _context144.sent;
              this._pkceManager.clearPKPair();
              this._subscriptionService.updateSession(resp);
              return _context144.abrupt("return", resp);
            case 33:
            case "end":
              return _context144.stop();
          }
        }, _callee144, this);
      }));
    }
  }, {
    key: "resetByExistingPassword",
    value: function resetByExistingPassword(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee145() {
        var _yield$this$dfpProtec30, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee145$(_context145) {
          while (1) switch (_context145.prev = _context145.next) {
            case 0:
              validate('stytch.passwords.resetByExistingPassword').isString('email', options.email_address).isString('existing_password', options.existing_password).isString('new_password', options.new_password).isOptionalString('locale', options.locale).isNumber('session_duration_minutes', options.session_duration_minutes);
              _context145.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec30 = _context145.sent;
              dfp_telemetry_id = _yield$this$dfpProtec30.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec30.captcha_token;
              _context145.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/existing_password/reset',
                method: 'POST',
                body: {
                  organization_id: options.organization_id,
                  email_address: options.email_address,
                  existing_password: options.existing_password,
                  new_password: options.new_password,
                  locale: options.locale,
                  session_duration_minutes: options.session_duration_minutes,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context145.sent;
              this._subscriptionService.updateSession(resp);
              return _context145.abrupt("return", resp);
            case 11:
            case "end":
              return _context145.stop();
          }
        }, _callee145, this);
      }));
    }
  }, {
    key: "resetBySession",
    value: function resetBySession(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee146() {
        var _yield$this$dfpProtec31, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee146$(_context146) {
          while (1) switch (_context146.prev = _context146.next) {
            case 0:
              validate('stytch.passwords.resetBySession').isString('password', options.password);
              _context146.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec31 = _context146.sent;
              dfp_telemetry_id = _yield$this$dfpProtec31.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec31.captcha_token;
              _context146.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/session/reset',
                method: 'POST',
                body: {
                  password: options.password,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context146.sent;
              this._subscriptionService.updateSession(resp);
              return _context146.abrupt("return", resp);
            case 11:
            case "end":
              return _context146.stop();
          }
        }, _callee146, this);
      }));
    }
  }, {
    key: "strengthCheck",
    value: function strengthCheck(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee147() {
        return _regeneratorRuntime().wrap(function _callee147$(_context147) {
          while (1) switch (_context147.prev = _context147.next) {
            case 0:
              validate('stytch.passwords.strengthCheck').isOptionalString('email', options.email_address).isString('password', options.password);
              return _context147.abrupt("return", this._networkClient.fetchSDK({
                url: '/b2b/passwords/strength_check',
                method: 'POST',
                body: {
                  email_address: options.email_address,
                  password: options.password
                }
              }));
            case 2:
            case "end":
              return _context147.stop();
          }
        }, _callee147, this);
      }));
    }
  }]);
}();
var HeadlessB2BOTPsClient = /*#__PURE__*/_createClass(function HeadlessB2BOTPsClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
  var _this25 = this;
  _classCallCheck(this, HeadlessB2BOTPsClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.sms = {
    send: function send(data) {
      return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee148() {
        var _yield$this$dfpProtec32, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee148$(_context148) {
          while (1) switch (_context148.prev = _context148.next) {
            case 0:
              validate('stytch.otps.sms.send').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isOptionalString('mfa_phone_number', data.mfa_phone_number).isOptionalString('locale', data.locale);
              _context148.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec32 = _context148.sent;
              dfp_telemetry_id = _yield$this$dfpProtec32.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec32.captcha_token;
              _context148.t0 = this._networkClient;
              _context148.t1 = Object;
              _context148.t2 = Object.assign({}, data);
              _context148.t3 = dfp_telemetry_id;
              _context148.t4 = captcha_token;
              _context148.next = 13;
              return this._subscriptionService.getIntermediateSessionToken();
            case 13:
              _context148.t5 = _context148.sent;
              if (_context148.t5) {
                _context148.next = 16;
                break;
              }
              _context148.t5 = undefined;
            case 16:
              _context148.t6 = _context148.t5;
              _context148.t7 = {
                dfp_telemetry_id: _context148.t3,
                captcha_token: _context148.t4,
                intermediate_session_token: _context148.t6
              };
              _context148.t8 = _context148.t1.assign.call(_context148.t1, _context148.t2, _context148.t7);
              _context148.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context148.t10 = {
                url: '/b2b/otps/sms/send',
                body: _context148.t8,
                method: 'POST',
                retryCallback: _context148.t9
              };
              return _context148.abrupt("return", _context148.t0.retriableFetchSDK.call(_context148.t0, _context148.t10));
            case 22:
            case "end":
              return _context148.stop();
          }
        }, _callee148, this);
      }));
    },
    authenticate: function authenticate(data) {
      return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee149() {
        var _yield$this$dfpProtec33, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee149$(_context149) {
          while (1) switch (_context149.prev = _context149.next) {
            case 0:
              validate('stytch.otps.sms.authenticate').isNumber('session_duration_minutes', data.session_duration_minutes).isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('code', data.code).isOptionalString('set_mfa_enrollment', data.set_mfa_enrollment);
              _context149.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec33 = _context149.sent;
              dfp_telemetry_id = _yield$this$dfpProtec33.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec33.captcha_token;
              _context149.t0 = Object;
              _context149.t1 = Object.assign({}, data);
              _context149.t2 = dfp_telemetry_id;
              _context149.t3 = captcha_token;
              _context149.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context149.t4 = _context149.sent;
              if (_context149.t4) {
                _context149.next = 15;
                break;
              }
              _context149.t4 = undefined;
            case 15:
              _context149.t5 = _context149.t4;
              _context149.t6 = {
                dfp_telemetry_id: _context149.t2,
                captcha_token: _context149.t3,
                intermediate_session_token: _context149.t5
              };
              requestBody = _context149.t0.assign.call(_context149.t0, _context149.t1, _context149.t6);
              _context149.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/otps/sms/authenticate',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context149.sent;
              this._subscriptionService.updateSession(resp);
              return _context149.abrupt("return", resp);
            case 23:
            case "end":
              return _context149.stop();
          }
        }, _callee149, this);
      }));
    }
  };
  this.email = {
    loginOrSignup: function loginOrSignup(data) {
      return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee150() {
        var _yield$this$dfpProtec34, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee150$(_context150) {
          while (1) switch (_context150.prev = _context150.next) {
            case 0:
              validate('stytch.otps.email.loginOrSignup').isString('organization_id', data.organization_id).isString('email_address', data.email_address).isOptionalString('login_template_id', data.login_template_id).isOptionalString('signup_template_id', data.signup_template_id).isOptionalString('locale', data.locale).isOptionalNumber('login_expiration_minutes', data.login_expiration_minutes).isOptionalNumber('signup_expiration_minutes', data.signup_expiration_minutes);
              _context150.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec34 = _context150.sent;
              dfp_telemetry_id = _yield$this$dfpProtec34.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec34.captcha_token;
              return _context150.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/otps/email/login_or_signup',
                body: Object.assign(Object.assign({}, data), {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }),
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 7:
            case "end":
              return _context150.stop();
          }
        }, _callee150, this);
      }));
    },
    authenticate: function authenticate(data) {
      return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee151() {
        var _yield$this$dfpProtec35, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee151$(_context151) {
          while (1) switch (_context151.prev = _context151.next) {
            case 0:
              validate('stytch.otps.email.authenticate').isString('code', data.code).isString('email_address', data.email_address).isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context151.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec35 = _context151.sent;
              dfp_telemetry_id = _yield$this$dfpProtec35.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec35.captcha_token;
              _context151.t0 = this._networkClient;
              _context151.t1 = Object;
              _context151.t2 = Object.assign({}, data);
              _context151.next = 11;
              return this._subscriptionService.getIntermediateSessionToken();
            case 11:
              _context151.t3 = _context151.sent;
              if (_context151.t3) {
                _context151.next = 14;
                break;
              }
              _context151.t3 = undefined;
            case 14:
              _context151.t4 = _context151.t3;
              _context151.t5 = dfp_telemetry_id;
              _context151.t6 = captcha_token;
              _context151.t7 = {
                intermediate_session_token: _context151.t4,
                dfp_telemetry_id: _context151.t5,
                captcha_token: _context151.t6
              };
              _context151.t8 = _context151.t1.assign.call(_context151.t1, _context151.t2, _context151.t7);
              _context151.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context151.t10 = {
                url: '/b2b/otps/email/authenticate',
                body: _context151.t8,
                method: 'POST',
                retryCallback: _context151.t9
              };
              _context151.next = 23;
              return _context151.t0.retriableFetchSDK.call(_context151.t0, _context151.t10);
            case 23:
              resp = _context151.sent;
              this._subscriptionService.updateSession(resp);
              return _context151.abrupt("return", resp);
            case 26:
            case "end":
              return _context151.stop();
          }
        }, _callee151, this);
      }));
    },
    discovery: {
      send: function send(data) {
        return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee152() {
          var _yield$this$dfpProtec36, dfp_telemetry_id, captcha_token, requestBody;
          return _regeneratorRuntime().wrap(function _callee152$(_context152) {
            while (1) switch (_context152.prev = _context152.next) {
              case 0:
                validate('stytch.otps.email.discovery.send').isString('email_address', data.email_address).isOptionalString('login_template_id', data.login_template_id).isOptionalString('locale', data.locale).isOptionalNumber('discovery_expiration_minutes', data.discovery_expiration_minutes);
                _context152.next = 3;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 3:
                _yield$this$dfpProtec36 = _context152.sent;
                dfp_telemetry_id = _yield$this$dfpProtec36.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec36.captcha_token;
                requestBody = Object.assign(Object.assign({}, data), {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                });
                return _context152.abrupt("return", this._networkClient.retriableFetchSDK({
                  url: '/b2b/otps/email/discovery/send',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                }));
              case 8:
              case "end":
                return _context152.stop();
            }
          }, _callee152, this);
        }));
      },
      authenticate: function authenticate(data) {
        return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee153() {
          var _yield$this$dfpProtec37, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee153$(_context153) {
            while (1) switch (_context153.prev = _context153.next) {
              case 0:
                validate('stytch.otps.email.discovery.authenticate').isString('code', data.code).isString('email_address', data.email_address);
                _context153.next = 3;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 3:
                _yield$this$dfpProtec37 = _context153.sent;
                dfp_telemetry_id = _yield$this$dfpProtec37.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec37.captcha_token;
                requestBody = Object.assign({
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context153.next = 9;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/otps/email/discovery/authenticate',
                  body: requestBody,
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 9:
                resp = _context153.sent;
                this._subscriptionService.updateSession(resp);
                return _context153.abrupt("return", resp);
              case 12:
              case "end":
                return _context153.stop();
            }
          }, _callee153, this);
        }));
      }
    }
  };
});
var HeadlessB2BTOTPsClient = /*#__PURE__*/function () {
  function HeadlessB2BTOTPsClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessB2BTOTPsClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(HeadlessB2BTOTPsClient, [{
    key: "create",
    value: function create(data) {
      var _a;
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee154() {
        var _yield$this$dfpProtec38, dfp_telemetry_id, captcha_token, response;
        return _regeneratorRuntime().wrap(function _callee154$(_context154) {
          while (1) switch (_context154.prev = _context154.next) {
            case 0:
              validate('stytch.totp.create').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isOptionalNumber('expiration_minutes', data.expiration_minutes);
              _context154.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec38 = _context154.sent;
              dfp_telemetry_id = _yield$this$dfpProtec38.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec38.captcha_token;
              _context154.t0 = this._networkClient;
              _context154.t1 = Object;
              _context154.t2 = Object.assign({}, data);
              _context154.t3 = dfp_telemetry_id;
              _context154.t4 = captcha_token;
              _context154.next = 13;
              return this._subscriptionService.getIntermediateSessionToken();
            case 13:
              _context154.t5 = _context154.sent;
              if (_context154.t5) {
                _context154.next = 16;
                break;
              }
              _context154.t5 = undefined;
            case 16:
              _context154.t6 = _context154.t5;
              _context154.t7 = {
                dfp_telemetry_id: _context154.t3,
                captcha_token: _context154.t4,
                intermediate_session_token: _context154.t6
              };
              _context154.t8 = _context154.t1.assign.call(_context154.t1, _context154.t2, _context154.t7);
              _context154.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context154.t10 = {
                url: '/b2b/totp',
                body: _context154.t8,
                method: 'POST',
                retryCallback: _context154.t9
              };
              _context154.next = 23;
              return _context154.t0.retriableFetchSDK.call(_context154.t0, _context154.t10);
            case 23:
              response = _context154.sent;
              if (response.member_id === ((_a = this._subscriptionService.getMember()) === null || _a === void 0 ? void 0 : _a.member_id)) {
                this._subscriptionService.updateMember(response.member);
              }
              return _context154.abrupt("return", response);
            case 26:
            case "end":
              return _context154.stop();
          }
        }, _callee154, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee155() {
        var _yield$this$dfpProtec39, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee155$(_context155) {
          while (1) switch (_context155.prev = _context155.next) {
            case 0:
              validate('stytch.totp.authenticate').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('code', data.code).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('set_mfa_enrollment', data.set_mfa_enrollment).isOptionalBoolean('set_default_mfa', data.set_default_mfa);
              _context155.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec39 = _context155.sent;
              dfp_telemetry_id = _yield$this$dfpProtec39.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec39.captcha_token;
              _context155.t0 = Object;
              _context155.t1 = Object.assign({}, data);
              _context155.t2 = dfp_telemetry_id;
              _context155.t3 = captcha_token;
              _context155.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context155.t4 = _context155.sent;
              if (_context155.t4) {
                _context155.next = 15;
                break;
              }
              _context155.t4 = undefined;
            case 15:
              _context155.t5 = _context155.t4;
              _context155.t6 = {
                dfp_telemetry_id: _context155.t2,
                captcha_token: _context155.t3,
                intermediate_session_token: _context155.t5
              };
              requestBody = _context155.t0.assign.call(_context155.t0, _context155.t1, _context155.t6);
              _context155.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/totp/authenticate',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context155.sent;
              this._subscriptionService.updateSession(resp);
              return _context155.abrupt("return", resp);
            case 23:
            case "end":
              return _context155.stop();
          }
        }, _callee155, this);
      }));
    }
  }]);
}();
var HeadlessB2BRecoveryCodesClient = /*#__PURE__*/function () {
  function HeadlessB2BRecoveryCodesClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessB2BRecoveryCodesClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(HeadlessB2BRecoveryCodesClient, [{
    key: "recover",
    value: function recover(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee156() {
        var _yield$this$dfpProtec40, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee156$(_context156) {
          while (1) switch (_context156.prev = _context156.next) {
            case 0:
              validate('stytch.recoveryCodes.recover').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('recovery_code', data.recovery_code).isNumber('session_duration_minutes', data.session_duration_minutes);
              _context156.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec40 = _context156.sent;
              dfp_telemetry_id = _yield$this$dfpProtec40.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec40.captcha_token;
              _context156.t0 = Object;
              _context156.t1 = Object.assign({}, data);
              _context156.t2 = dfp_telemetry_id;
              _context156.t3 = captcha_token;
              _context156.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context156.t4 = _context156.sent;
              if (_context156.t4) {
                _context156.next = 15;
                break;
              }
              _context156.t4 = undefined;
            case 15:
              _context156.t5 = _context156.t4;
              _context156.t6 = {
                dfp_telemetry_id: _context156.t2,
                captcha_token: _context156.t3,
                intermediate_session_token: _context156.t5
              };
              requestBody = _context156.t0.assign.call(_context156.t0, _context156.t1, _context156.t6);
              _context156.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/recovery_codes/recover',
                body: requestBody,
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context156.sent;
              this._subscriptionService.updateSession(resp);
              return _context156.abrupt("return", resp);
            case 23:
            case "end":
              return _context156.stop();
          }
        }, _callee156, this);
      }));
    }
  }, {
    key: "rotate",
    value: function rotate() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee157() {
        var _yield$this$dfpProtec41, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee157$(_context157) {
          while (1) switch (_context157.prev = _context157.next) {
            case 0:
              _context157.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec41 = _context157.sent;
              dfp_telemetry_id = _yield$this$dfpProtec41.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec41.captcha_token;
              return _context157.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/recovery_codes/rotate',
                body: {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                },
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 6:
            case "end":
              return _context157.stop();
          }
        }, _callee157, this);
      }));
    }
  }, {
    key: "get",
    value: function get() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee158() {
        return _regeneratorRuntime().wrap(function _callee158$(_context158) {
          while (1) switch (_context158.prev = _context158.next) {
            case 0:
              return _context158.abrupt("return", this._networkClient.fetchSDK({
                url: '/b2b/recovery_codes',
                method: 'GET'
              }));
            case 1:
            case "end":
              return _context158.stop();
          }
        }, _callee158, this);
      }));
    }
  }]);
}();
var HeadlessB2BRBACClient = /*#__PURE__*/function () {
  function HeadlessB2BRBACClient(cachedConfig, dynamicConfig, _subscriptionService) {
    var _this26 = this;
    _classCallCheck(this, HeadlessB2BRBACClient);
    this._subscriptionService = _subscriptionService;
    this.isAuthorizedSync = function (resourceId, action) {
      var _a;
      return !!((_a = _this26.cachedPolicy) === null || _a === void 0 ? void 0 : _a.callerIsAuthorized(_this26.roleIds(), resourceId, action));
    };
    this.isAuthorized = function (resourceId, action) {
      return _this26.policyPromise.then(function (policy) {
        return policy.callerIsAuthorized(_this26.roleIds(), resourceId, action);
      });
    };
    this.cachedPolicy = cachedConfig.rbacPolicy ? RBACPolicy.fromJSON(cachedConfig.rbacPolicy) : null;
    this.policyPromise = dynamicConfig.then(function (data) {
      if (!data.rbacPolicy) {
        logger.error('Unable to retrieve RBAC policy from servers. Assuming caller has no permissions.');
        return new RBACPolicy([], []);
      }
      _this26.cachedPolicy = RBACPolicy.fromJSON(data.rbacPolicy);
      return _this26.cachedPolicy;
    });
  }
  return _createClass(HeadlessB2BRBACClient, [{
    key: "allPermissions",
    value: function allPermissions() {
      var _this27 = this;
      return this.policyPromise.then(function (policy) {
        return policy.allPermissionsForCaller(_this27.roleIds());
      });
    }
  }, {
    key: "roleIds",
    value: function roleIds() {
      var _a;
      var session = this._subscriptionService.getSession();
      if (!session) {
        return [];
      }
      return (_a = session.roles) !== null && _a !== void 0 ? _a : [];
    }
  }]);
}();
var HeadlessB2BImpersonationClient = /*#__PURE__*/_createClass(function HeadlessB2BImpersonationClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
  var _this28 = this;
  _classCallCheck(this, HeadlessB2BImpersonationClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.authenticate = function (data) {
    return __awaiter$1(_this28, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee159() {
      var _yield$this$dfpProtec42, dfp_telemetry_id, captcha_token, resp;
      return _regeneratorRuntime().wrap(function _callee159$(_context159) {
        while (1) switch (_context159.prev = _context159.next) {
          case 0:
            validate('stytch.impersonation.authenticate').isString('impersonation_token', data.impersonation_token);
            _context159.next = 3;
            return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
          case 3:
            _yield$this$dfpProtec42 = _context159.sent;
            dfp_telemetry_id = _yield$this$dfpProtec42.dfp_telemetry_id;
            captcha_token = _yield$this$dfpProtec42.captcha_token;
            _context159.next = 8;
            return this._networkClient.retriableFetchSDK({
              url: '/b2b/impersonation/authenticate',
              body: Object.assign(Object.assign({}, data), {
                dfp_telemetry_id: dfp_telemetry_id,
                captcha_token: captcha_token
              }),
              method: 'POST',
              retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
            });
          case 8:
            resp = _context159.sent;
            this._subscriptionService.updateSession(resp);
            return _context159.abrupt("return", resp);
          case 11:
          case "end":
            return _context159.stop();
        }
      }, _callee159, this);
    }));
  };
});
var HeadlessB2BIDPClient = /*#__PURE__*/_createClass(function HeadlessB2BIDPClient(_networkClient) {
  var _this29 = this;
  _classCallCheck(this, HeadlessB2BIDPClient);
  this._networkClient = _networkClient;
  this.oauthAuthorizeStart = function (data) {
    return __awaiter$1(_this29, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee160() {
      return _regeneratorRuntime().wrap(function _callee160$(_context160) {
        while (1) switch (_context160.prev = _context160.next) {
          case 0:
            return _context160.abrupt("return", this._networkClient.fetchSDK({
              url: '/idp/b2b/oauth/authorize/start',
              method: 'POST',
              body: data
            }));
          case 1:
          case "end":
            return _context160.stop();
        }
      }, _callee160, this);
    }));
  };
  this.oauthAuthorizeSubmit = function (data) {
    return __awaiter$1(_this29, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee161() {
      return _regeneratorRuntime().wrap(function _callee161$(_context161) {
        while (1) switch (_context161.prev = _context161.next) {
          case 0:
            return _context161.abrupt("return", this._networkClient.fetchSDK({
              url: '/idp/b2b/oauth/authorize/submit',
              method: 'POST',
              body: data
            }));
          case 1:
          case "end":
            return _context161.stop();
        }
      }, _callee161, this);
    }));
  };
  this.oauthLogoutStart = function (data) {
    return __awaiter$1(_this29, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee162() {
      return _regeneratorRuntime().wrap(function _callee162$(_context162) {
        while (1) switch (_context162.prev = _context162.next) {
          case 0:
            _context162.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/oauth/logout/start",
              method: 'POST',
              body: data
            });
          case 2:
            return _context162.abrupt("return", _context162.sent);
          case 3:
          case "end":
            return _context162.stop();
        }
      }, _callee162, this);
    }));
  };
});
var IframeHostClient = /*#__PURE__*/function () {
  function IframeHostClient(iframeURL) {
    _classCallCheck(this, IframeHostClient);
    this.iframeURL = iframeURL;
    this.createIframe();
  }
  return _createClass(IframeHostClient, [{
    key: "createIframe",
    value: function createIframe() {
      var existingIframe = document.querySelector("[src~=\"".concat(this.iframeURL, "\"]"));
      if (!existingIframe) {
        existingIframe = document.createElement('iframe');
        existingIframe.src = this.iframeURL;
        existingIframe.style.position = 'absolute';
        existingIframe.style.width = '0';
        existingIframe.style.height = '0';
        existingIframe.style.border = '0';
        document.body.appendChild(existingIframe);
      } else {
        logger.warn(MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING);
      }
      if (existingIframe.dataset.loaded === 'true') {
        this.frame = Promise.resolve(existingIframe);
        return;
      }
      this.frame = new Promise(function (resolve) {
        existingIframe.addEventListener('load', function () {
          existingIframe.dataset.loaded = 'true';
          resolve(existingIframe);
        }, {
          once: true
        });
      });
    }
  }, {
    key: "call",
    value: function call(method, args) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee163() {
        var _this30 = this;
        var frame, channel;
        return _regeneratorRuntime().wrap(function _callee163$(_context163) {
          while (1) switch (_context163.prev = _context163.next) {
            case 0:
              _context163.next = 2;
              return this.frame;
            case 2:
              frame = _context163.sent;
              channel = new MessageChannel();
              return _context163.abrupt("return", new Promise(function (resolve, reject) {
                var _a;
                channel.port1.onmessage = function (event) {
                  var resp = event.data;
                  channel.port1.close();
                  if (resp.success) {
                    resolve(resp.payload);
                  } else {
                    reject(ErrorMarshaller.unmarshall(resp.error));
                  }
                };
                var message = {
                  method: method,
                  args: args
                };
                (_a = frame.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, _this30.iframeURL, [channel.port2]);
              }));
            case 5:
            case "end":
              return _context163.stop();
          }
        }, _callee163, this);
      }));
    }
  }]);
}();
var SearchDataManager = /*#__PURE__*/function () {
  function SearchDataManager(_networkClient, dfpProtectedAuth) {
    _classCallCheck(this, SearchDataManager);
    this._networkClient = _networkClient;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  return _createClass(SearchDataManager, [{
    key: "searchUser",
    value: function searchUser(email) {
      var _this31 = this;
      return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha().then(function (_ref0) {
        var dfp_telemetry_id = _ref0.dfp_telemetry_id,
          captcha_token = _ref0.captcha_token;
        return _this31._networkClient.fetchSDK({
          url: "/users/search",
          method: 'POST',
          body: {
            email: email,
            dfp_telemetry_id: dfp_telemetry_id,
            captcha_token: captcha_token
          }
        });
      });
    }
  }, {
    key: "searchMember",
    value: function searchMember(email, organization_id) {
      return this._networkClient.fetchSDK({
        url: "/b2b/organizations/members/search",
        method: 'POST',
        body: {
          email_address: email,
          organization_id: organization_id
        }
      });
    }
  }]);
}();
var shouldTryRefresh = function shouldTryRefresh(state) {
  return !!(state === null || state === void 0 ? void 0 : state.session);
};
var SessionManagerRegistry = /*#__PURE__*/function () {
  function SessionManagerRegistry() {
    _classCallCheck(this, SessionManagerRegistry);
    this.hasWarned = false;
    this.registry = new Map();
  }
  return _createClass(SessionManagerRegistry, [{
    key: "register",
    value: function register(key, sessionManager) {
      var otherManager = this.registry.get(key);
      if (otherManager && otherManager !== sessionManager) {
        if (!this.hasWarned) {
          logger.warn(MULTIPLE_STYTCH_CLIENTS_DETECTED_WARNING);
          this.hasWarned = true;
        }
        otherManager.cancelBackgroundRefresh();
      }
      this.registry.set(key, sessionManager);
    }
  }, {
    key: "unregister",
    value: function unregister(publicToken, sessionManager) {
      var otherManager = this.registry.get(publicToken);
      if (otherManager && otherManager === sessionManager) {
        this.registry["delete"](publicToken);
      }
    }
  }]);
}();
var SessionManager = /*#__PURE__*/function () {
  function SessionManager(_subscriptionService, _headlessSessionClient, _publicToken) {
    var _this32 = this;
    _classCallCheck(this, SessionManager);
    this._subscriptionService = _subscriptionService;
    this._headlessSessionClient = _headlessSessionClient;
    this._publicToken = _publicToken;
    this._onDataChange = function (state) {
      if (shouldTryRefresh(state)) {
        _this32.scheduleBackgroundRefresh();
      } else {
        _this32.cancelBackgroundRefresh();
      }
    };
    this._reauthenticateWithBackoff = function () {
      return __awaiter$1(_this32, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee164() {
        var count;
        return _regeneratorRuntime().wrap(function _callee164$(_context164) {
          while (1) switch (_context164.prev = _context164.next) {
            case 0:
              count = 0;
            case 1:
              _context164.prev = 2;
              _context164.next = 5;
              return this._headlessSessionClient.authenticate();
            case 5:
              return _context164.abrupt("return", _context164.sent);
            case 8:
              _context164.prev = 8;
              _context164.t0 = _context164["catch"](2);
              if (!SessionManager.isUnrecoverableError(_context164.t0)) {
                _context164.next = 12;
                break;
              }
              return _context164.abrupt("return", Promise.reject(_context164.t0));
            case 12:
              count++;
              _context164.next = 15;
              return new Promise(function (done) {
                return setTimeout(done, SessionManager.timeoutForAttempt(count));
              });
            case 15:
              _context164.next = 1;
              break;
            case 17:
            case "end":
              return _context164.stop();
          }
        }, _callee164, this, [[2, 8]]);
      }));
    };
    this.timeout = null;
    this._subscriptionService.subscribeToState(this._onDataChange);
  }
  return _createClass(SessionManager, [{
    key: "register",
    value: function register() {
      SessionManager.registry.register(this._publicToken, this);
    }
  }, {
    key: "unregister",
    value: function unregister() {
      SessionManager.registry.unregister(this._publicToken, this);
    }
  }, {
    key: "performBackgroundRefresh",
    value: function performBackgroundRefresh() {
      var _this33 = this;
      this._reauthenticateWithBackoff().then(function () {
        _this33.scheduleBackgroundRefresh();
      })["catch"](function (error) {
        logger.warn('Session background refresh failed. Signalling to app that user is logged out.', {
          error: error
        });
        _this33._subscriptionService.destroySession();
      });
    }
  }, {
    key: "scheduleBackgroundRefresh",
    value: function scheduleBackgroundRefresh() {
      var _this34 = this;
      this.cancelBackgroundRefresh();
      this.register();
      this.timeout = setTimeout(function () {
        _this34.performBackgroundRefresh();
      }, SessionManager.REFRESH_INTERVAL_MS);
    }
  }, {
    key: "cancelBackgroundRefresh",
    value: function cancelBackgroundRefresh() {
      if (this.timeout !== null) {
        this.unregister();
        clearTimeout(this.timeout);
        this.timeout = null;
      }
    }
  }], [{
    key: "timeoutForAttempt",
    value: function timeoutForAttempt(count) {
      count = Math.min(count, 7);
      var jitter = Math.floor(Math.random() * 350) - 175;
      var delayMS = 2000 * Math.pow(2, count);
      return jitter + delayMS;
    }
  }, {
    key: "isUnrecoverableError",
    value: function isUnrecoverableError(error) {
      return UNRECOVERABLE_ERROR_TYPES.includes(error.error_type);
    }
  }]);
}();
SessionManager.REFRESH_INTERVAL_MS = 1000 * 60 * 3;
SessionManager.registry = new SessionManagerRegistry();
var StateChangeClient = /*#__PURE__*/_createClass(function StateChangeClient(_subscriptionService, emptyState) {
  var _this35 = this;
  _classCallCheck(this, StateChangeClient);
  this._subscriptionService = _subscriptionService;
  this.emptyState = emptyState;
  this.onStateChange = function (callback) {
    return _this35._subscriptionService.subscribeToState(function (state) {
      callback(state !== null && state !== void 0 ? state : _this35.emptyState);
    });
  };
});
var VERTICAL_CONSUMER = 'CONSUMER';
var createDeepEqual = function createDeepEqual() {
  var _ref1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref1$KEYS_TO_EXCLUDE = _ref1.KEYS_TO_EXCLUDE,
    KEYS_TO_EXCLUDE = _ref1$KEYS_TO_EXCLUDE === void 0 ? [] : _ref1$KEYS_TO_EXCLUDE;
  var _deepEqual = function deepEqual(a, b) {
    if (_typeof(a) !== _typeof(b)) return false;
    if (a === null || b === null) return a === b;
    if (_typeof(a) === 'object') {
      if (Object.keys(a).length !== Object.keys(b).length || Object.keys(a).some(function (k) {
        return !(k in b);
      })) return false;
      return Object.entries(a).filter(function (_ref10) {
        var _ref11 = _slicedToArray(_ref10, 1),
          k = _ref11[0];
        return !KEYS_TO_EXCLUDE.includes(k);
      }).every(function (_ref12) {
        var _ref13 = _slicedToArray(_ref12, 2),
          k = _ref13[0],
          v = _ref13[1];
        return _deepEqual(v, b[k]);
      });
    }
    return a === b;
  };
  return _deepEqual;
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
var EMAIL_REGEX = /^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
var debounce = function debounce(func) {
  var waitFor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var timeout;
  var debounced = function debounced() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      return func.apply(void 0, args);
    }, waitFor);
  };
  return debounced;
};
var isLocalhost = function isLocalhost() {
  return Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
};
var buildFinalConfig = function buildFinalConfig(opts) {
  var _a, _b;
  return {
    cookieOptions: opts === null || opts === void 0 ? void 0 : opts.cookieOptions,
    endpoints: {
      testAPIURL: getTestApiURL(opts),
      liveAPIURL: getLiveApiURL(opts),
      dfpBackendURL: getDFPBackendURL(opts),
      dfpCdnURL: getDFPCdnURL(opts),
      clientsideServicesIframeURL: (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _a === void 0 ? void 0 : _a.clientsideServicesIframeURL) !== null && _b !== void 0 ? _b : CLIENTSIDE_SERVICES_IFRAME_URL
    }
  };
};
var hasMultipleCookies = function hasMultipleCookies(cookieName) {
  var cookiePairs = document.cookie ? document.cookie.split('; ') : [];
  var matchedCookies = cookiePairs.filter(function (pair) {
    var _pair$split = pair.split('='),
      _pair$split2 = _slicedToArray2(_pair$split, 1),
      name = _pair$split2[0];
    return cookieName === name;
  });
  return matchedCookies.length > 1;
};
var PERSISTENT_STORAGE_KEY_PREFIX = 'stytch_sdk_state_';
var getPersistentStorageKey = function getPersistentStorageKey(publicToken) {
  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return "".concat(PERSISTENT_STORAGE_KEY_PREFIX).concat(publicToken).concat(key ? "::".concat(key) : '');
};
var internalSymB2B = Symbol["for"]('stytch__internal_b2b');
var writeB2BInternals = function writeB2BInternals(obj, internals) {
  Object.assign(obj, _defineProperty({}, internalSymB2B, internals));
};
var readB2BInternals = function readB2BInternals(obj) {
  var casted = obj;
  if (!casted[internalSymB2B]) {
    throw Error('Internals not found!');
  }
  return casted[internalSymB2B];
};
export { PasskeysInvalidEncoding as $, AuthFlowType as A, B2BMFAProducts as B, COUNTRIES_LIST as C, DEFAULT_SESSION_DURATION_MINUTES as D, EMAIL_REGEX as E, FailedCodeChallengeError as F, KeystoreUnavailableError as G, MissingAuthorizationCredentialIDTokenError as H, IDPOAuthFlowMissingParamError as I, JSONDataNotConvertibleToStringError as J, KeyInvalidatedError as K, MissingCipherIv as L, MissingAttestationObjectError as M, NoCurrentSessionError as N, OAuthProviders as O, Products as P, MissingGoogleClientIDError as Q, RedirectURLType as R, StytchEventType as S, MissingPKCEError as T, MissingPublicKeyError as U, MissingUrlError as V, Wallets as W, NoBiometricsEnrolledError as X, NoBiometricsRegistrationError as Y, NoCredentialsPresentError as Z, __rest as _, B2BProducts as a, PasskeysMisconfigured as a0, PasskeysUnsupportedError as a1, RNUIProducts as a2, RandomNumberGenerationFailed as a3, SDKAPIUnreachableError as a4, SDKNotConfiguredError as a5, SignInWithAppleMisconfigured as a6, StytchAPISchemaError as a7, StytchAPIUnreachableError as a8, StytchError as a9, GOOGLE_ONE_TAP_SCRIPT_URL as aA, checkPublicToken as aB, buildFinalConfig as aC, StateChangeClient as aD, DFPProtectedAuthProvider as aE, HeadlessB2BOrganizationClient as aF, HeadlessB2BSelfClient as aG, HeadlessB2BSessionClient as aH, HeadlessB2BMagicLinksClient as aI, HeadlessB2BSSOClient as aJ, HeadlessB2BDiscoveryClient as aK, HeadlessB2BPasswordsClient as aL, HeadlessB2BOTPsClient as aM, HeadlessB2BTOTPsClient as aN, HeadlessB2BRecoveryCodesClient as aO, HeadlessB2BRBACClient as aP, HeadlessB2BSCIMClient as aQ, HeadlessB2BImpersonationClient as aR, HeadlessB2BIDPClient as aS, SessionManager as aT, SearchDataManager as aU, VERTICAL_CONSUMER as aV, writeB2BInternals as aW, StytchSDKAPIError as aa, StytchSDKSchemaError as ab, StytchSDKUsageError as ac, UNRECOVERABLE_ERROR_TYPES as ad, UserCancellationError as ae, UserLockedOutError as af, errorToStytchError as ag, createDeepEqual as ah, getPersistentStorageKey as ai, loadESModule as aj, IframeHostClient as ak, EventLogger as al, DEFAULT_MAX_BATCH_SIZE as am, DEFAULT_INTERVAL_DURATION_MS as an, createEventId as ao, createAppSessionId as ap, createPersistentId as aq, baseFetchSDK as ar, baseSubmitFormSDK as as, retriableFetchSDK as at, validate as au, hasMultipleCookies as av, isLocalhost as aw, HeadlessB2BOAuthClient$1 as ax, DisabledDFPProtectedAuthProvider as ay, GOOGLE_ONE_TAP_HOST as az, OTPMethods as b, B2BOAuthProviders as c, __awaiter as d, OneTapPositions as e, debounce as f, StytchSDKError as g, StytchAPIError as h, isTestPublicToken as i, checkB2BNotSSR as j, BiometricRegistrationIdIsNullOrBlank as k, logger as l, BiometricsAlreadyEnrolledError as m, BiometricsFailedError as n, BiometricsUnavailableError as o, ChallengeSigningFailedError as p, DFPNotConfigured as q, readB2BInternals as r, DeviceCredentialsNotAllowedError as s, FailedToDecryptDataError as t, InternalError as u, InvalidAuthorizationCredentialError as v, InvalidCredentialTypeError as w, InvalidPrivateKeyLength as x, InvalidRedirectSchemeError as y, InvalidStartUrlError as z };
